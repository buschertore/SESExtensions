data/tempCode/mouse-tooltip-translator/public/doq/doq.js:70:7:error(insecure-document-method):      this.config.schemeSelector.innerHTML += `<option>${scheme.name}</option>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mouse-tooltip-translator/public/doq/doq.js:314:5:error(insecure-document-method):    picker.innerHTML = toneWgt.outerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mouse-tooltip-translator/public/foliate-js/mobi.js:4:5:error(insecure-document-method):    textarea.innerHTML = str:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mouse-tooltip-translator/public/pdfjs/web/viewer.mjs:898:7:error(insecure-document-method):      templateElement.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mouse-tooltip-translator/public/pdfjs/web/viewer.mjs:6665:21:warning(detect-non-literal-regexp):    query = query ? new RegExp(query, flags) : null;:RegExp() called with a `pageIndex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/mouse-tooltip-translator/public/pdfjs/web/viewer.mjs:6709:25:info(unsafe-formatstring):          console.error(`Unable to get text content for page ${i + 1}`, reason);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/mouse-tooltip-translator/public/pdfjs/web/viewer.mjs:11669:27:info(unsafe-formatstring):            console.error(`Unable to get page ${pageNum} to initialize viewer`, reason);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/mouse-tooltip-translator/src/ocr/ocrIframe.js:13:1:warning(insufficient-postmessage-origin-validation):window.addEventListener(:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/mouse-tooltip-translator/src/ocr/ocrIframe.js:156:3:warning(wildcard-postmessage-configuration):  window.parent.postMessage(data, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/mouse-tooltip-translator/src/ocr/opencvHandler.js:5:1:warning(insufficient-postmessage-origin-validation):window.addEventListener(:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/mouse-tooltip-translator/src/ocr/opencvHandler.js:91:3:warning(wildcard-postmessage-configuration):  window.parent.postMessage(data, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/mouse-tooltip-translator/src/subtitle/baseVideo.js:312:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", ({ data }) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/mouse-tooltip-translator/src/subtitle/baseVideo.js:329:5:warning(wildcard-postmessage-configuration):    window.postMessage(message, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/mouse-tooltip-translator/src/subtitle/baseVideo.js:301:23:warning(unknown-value-with-script-tag):      $("<script>", { id }):Cannot determine what 'id' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'id' is not externally controlled, or sanitize this data.
data/tempCode/mouse-tooltip-translator/src/util/index.js:439:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/mouse-tooltip-translator/src/util/index.js:431:5:warning(wildcard-postmessage-configuration):    window.postMessage(data, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/mouse-tooltip-translator/src/util/index.js:433:5:warning(wildcard-postmessage-configuration):    window.postMessage(data, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/mouse-tooltip-translator/src/util/index.js:434:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(data, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
