/home/codescan/metamask-extension/.devcontainer/download-builds.ts:122:9:error(detect-child-process):        `tar -xf ${folder}/metamask-${browser}-${versionNumber}.zip -C dist/${browser}`,:Detected calls to child_process from a function argument `folder`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/metamask-extension/.devcontainer/download-builds.ts:122:9:error(detect-child-process):        `tar -xf ${folder}/metamask-${browser}-${versionNumber}.zip -C dist/${browser}`,:Detected calls to child_process from a function argument `versionNumber`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/metamask-extension/.devcontainer/download-builds.ts:126:9:error(detect-child-process):        `unzip ${folder}/metamask-${browser}-${versionNumber}.zip -d dist/${browser}`,:Detected calls to child_process from a function argument `folder`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/metamask-extension/.devcontainer/download-builds.ts:126:9:error(detect-child-process):        `unzip ${folder}/metamask-${browser}-${versionNumber}.zip -d dist/${browser}`,:Detected calls to child_process from a function argument `versionNumber`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/metamask-extension/.devcontainer/setup-browsers.ts:5:5:error(detect-child-process):    `node_modules/selenium-webdriver/bin/linux/selenium-manager --browser ${browserName}`,:Detected calls to child_process from a function argument `browserName`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/metamask-extension/.devcontainer/setup-browsers.ts:11:12:error(detect-child-process):  execSync(`sudo ln -sf ${browserCommand} /usr/local/bin/${browserName}-ln`);:Detected calls to child_process from a function argument `browserName`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/metamask-extension/.github/workflows/sonar.yml:17:15:error(detected-sonarqube-docs-api-key):        uses: SonarSource/sonarcloud-github-action@5875562561d22a34be0c657405578705a169af6c:SonarQube Docs API Key detected
/home/codescan/metamask-extension/app/scripts/contentscript.js:110:7:info(unsafe-formatstring):      `MetaMask: Muxed traffic for channel "${PHISHING_SAFELIST}" failed.`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/metamask-extension/app/scripts/contentscript.js:237:7:info(unsafe-formatstring):      `MetaMask: Muxed traffic for channel "${PROVIDER}" failed.`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/metamask-extension/app/scripts/contentscript.js:312:9:info(unsafe-formatstring):        `MetaMask: Muxed traffic between channels "${LEGACY_PROVIDER}" and "${PROVIDER}" failed.`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/metamask-extension/app/scripts/contentscript.js:325:9:info(unsafe-formatstring):        `MetaMask: Muxed traffic for channel "${LEGACY_PUBLIC_CONFIG}" failed.`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/metamask-extension/app/scripts/contentscript.js:432:5:info(unsafe-formatstring):    `MetaMask: Content script lost connection to "${remoteLabel}".`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/metamask-extension/app/scripts/lockdown-more.js:75:15:info(unsafe-formatstring):              `Property ${propertyName} will not be hardened`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/metamask-extension/app/scripts/ui.js:330:3:error(insecure-document-method):  container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/metamask-extension/development/charts/flamegraph/chart/index.html:8:5:warning(missing-integrity):    <link:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
/home/codescan/metamask-extension/development/charts/flamegraph/chart/index.html:46:7:warning(missing-integrity):      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
/home/codescan/metamask-extension/development/charts/flamegraph/chart/index.html:47:7:warning(missing-integrity):      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
/home/codescan/metamask-extension/development/charts/flamegraph/chart/index.html:73:5:warning(missing-integrity):    <script src="https://d3js.org/d3.v7.js" charset="utf-8"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph-tooltip.js:771:5:error(insecure-document-method):    this.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph-tooltip.js:778:5:error(insecure-document-method):    this.innerHTML = v == null ? "" : v;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph-tooltip.js:2976:44:warning(prototype-pollution-loop):  while (!(timing = node.__transition) || !(timing = timing[id])) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph.js:855:9:error(insecure-document-method):        this.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph.js:862:9:error(insecure-document-method):        this.innerHTML = v == null ? '' : v;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph.js:4818:20:warning(detect-non-literal-regexp):        const re = new RegExp(term);:RegExp() called with a `term` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/metamask-extension/development/charts/flamegraph/lib/d3-flamegraph.js:4618:48:warning(prototype-pollution-loop):      while (!(timing = node.__transition) || !(timing = timing[id])) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/metamask-extension/development/chromereload.js:9:36:error(detect-insecure-websocket):// var connection = new WebSocket('ws://' + LIVERELOAD_HOST + LIVERELOAD_PORT + '/livereload');:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/metamask-extension/development/create-static-server.js:8:10:warning(using-http-server):  return http.createServer((request, response) => {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
/home/codescan/metamask-extension/development/fitness-functions/common/shared.ts:21:15:warning(detect-non-literal-regexp):          if (new RegExp(regex, 'u').test(path)) {:RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/metamask-extension/development/lib/create-segment-server.js:35:18:warning(using-http-server):  const server = http.createServer(async (request, response) => {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
/home/codescan/metamask-extension/development/lib/locales.js:16:5:warning(path-join-resolve-traversal):    code,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/sourcemap-validator.js:52:7:warning(path-join-resolve-traversal):      `${buildName}`,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/sourcemap-validator.js:69:7:warning(path-join-resolve-traversal):      `${buildName}.map`,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/sourcemap-validator.js:80:7:warning(path-join-resolve-traversal):      `${buildName}.map`,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/static-server.js:44:37:warning(path-join-resolve-traversal):  const resolvedPath = path.resolve(pathString);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/ts-migration-dashboard/common/build-module-partitions.ts:81:45:warning(path-join-resolve-traversal):          path.resolve(ROOT_DIRECTORY_PATH, `${entrypointPattern}.{js,ts,tsx}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/ts-migration-dashboard/scripts/build-app.ts:120:39:warning(path-join-resolve-traversal):  const entries = await fg([path.join(src, '*')], {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/ts-migration-dashboard/scripts/build-app.ts:125:35:warning(path-join-resolve-traversal):      const destEntry = path.join(dest, path.basename(srcEntry));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/ts-migration-dashboard/scripts/build-app.ts:125:41:warning(path-join-resolve-traversal):      const destEntry = path.join(dest, path.basename(srcEntry));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/development/ts-migration-dashboard/scripts/write-list-of-files-to-convert.ts:29:45:warning(path-join-resolve-traversal):          path.resolve(ROOT_DIRECTORY_PATH, `${entrypointPattern}.{js,ts,tsx}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/offscreen/scripts/ledger.ts:23:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener('message', ({ origin, data, source }) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/metamask-extension/shared/constants/network.test.ts:12:37:warning(path-join-resolve-traversal):      expect(existsSync(join('app', image))).toBe(true),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/metamask-extension/ui/helpers/utils/accounts.js:30:25:warning(detect-non-literal-regexp):  const reservedRegEx = new RegExp(:RegExp() called with a `context` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/metamask-extension/ui/helpers/utils/settings-search.js:70:5:error(insecure-document-method):    menuElement.innerHTML = elemText.replace(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
