data/tempCode/redux-devtools/extension/examples/buildAll.js:10:43:warning(path-join-resolve-traversal):  return fs.statSync(path.join(__dirname, file)).isDirectory();:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/extension/src/contentScript/index.ts:117:3:warning(wildcard-postmessage-configuration):  window.postMessage(message, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/redux-devtools/extension/src/contentScript/index.ts:175:3:warning(wildcard-postmessage-configuration):  window.postMessage({ type: 'STOP', failed: true, source }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/redux-devtools/extension/src/options/EditorGroup.tsx:74:39:warning(incomplete-sanitization):            saveOption('projectPath', e.target.value.replace('\n', '')):`e.target.value.replace` method will only replace the first occurrence when used with a string argument ('\n'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/redux-devtools/extension/src/pageScript/api/index.ts:220:3:warning(wildcard-postmessage-configuration):  window.postMessage(message, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/redux-devtools/extension/src/pageScript/api/notifyErrors.ts:23:3:warning(wildcard-postmessage-configuration):  window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/redux-devtools/extension/src/pageScript/api/openWindow.ts:9:3:warning(wildcard-postmessage-configuration):  window.postMessage(message, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/redux-devtools/extension/src/pageScript/enhancerStore.ts:8:5:warning(detect-non-literal-regexp):    new RegExp(`[?&]${key}=([^&#]+)\\b`),:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/redux-devtools/packages/react-dock/demo/index.html:10:5:warning(missing-integrity):    <link:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/redux-devtools/packages/redux-devtools-app/buildUmd.mjs:33:18:warning(detect-non-literal-regexp):  const filter = new RegExp(:RegExp() called with a `mapping` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/redux-devtools/packages/redux-devtools-app/buildUmd.mjs:33:18:warning(detect-non-literal-regexp):  const filter = new RegExp(:RegExp() called with a `mod` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/redux-devtools/packages/redux-devtools-app/src/utils/parseJSON.ts:39:21:info(unsafe-formatstring):      console.error(data + 'is not a valid JSON', e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/redux-devtools/packages/redux-devtools-app/webpack.config.ts:14:35:warning(path-join-resolve-traversal):    path: path.resolve(__dirname, `build/${env.platform as string}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/packages/redux-devtools-cli/src/bin/injectServer.ts:26:31:warning(path-join-resolve-traversal):    fs.readFileSync(path.join(modulePath, 'package.json'), 'utf-8'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/packages/redux-devtools-cli/src/bin/redux-devtools.ts:16:54:warning(path-join-resolve-traversal):  return fs.readFileSync(path.resolve(process.cwd(), filePath), 'utf-8');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/packages/redux-devtools-cli/src/bin/redux-devtools.ts:44:51:warning(path-join-resolve-traversal):  return path.join(process.cwd(), 'node_modules', moduleName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/packages/redux-devtools-cli/src/bin/redux-devtools.ts:70:21:warning(path-join-resolve-traversal):          path.join(module.name, injectServer.fullPath) +:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/packages/redux-devtools-inspector-monitor/demo/index.html:15:5:warning(missing-integrity):    <link:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/redux-devtools/packages/redux-devtools-inspector-monitor-test-tab/demo/index.html:10:5:warning(missing-integrity):    <link:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/redux-devtools/packages/redux-devtools-inspector-monitor-trace-tab/src/react-error-overlay/containers/StackFrameCodeBlock.tsx:70:3:error(insecure-document-method):  code.innerHTML = htmlHighlight;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/redux-devtools/packages/redux-devtools-inspector-monitor-trace-tab/src/react-error-overlay/utils/generateAnsiHTML.ts:45:20:warning(incomplete-sanitization):      const part = contentParts[_index].replace('\r', '');:`contentParts[_index].replace` method will only replace the first occurrence when used with a string argument ('\r'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/redux-devtools/packages/redux-devtools-remote/examples/buildAll.js:10:43:warning(path-join-resolve-traversal):  return fs.statSync(path.join(__dirname, file)).isDirectory();:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/redux-devtools/packages/redux-devtools-rtk-query-monitor/src/selectors.ts:131:18:warning(detect-non-literal-regexp):          return new RegExp(regexPattern, 'i');:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
