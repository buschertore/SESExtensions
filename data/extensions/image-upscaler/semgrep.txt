data/tempCode/image-upscaler/.github/workflows/update-lockfile.yml:16:7:warning(pull-request-target-code-checkout):    - uses: actions/checkout@v3:This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.
data/tempCode/image-upscaler/Dockerfile:20:1:error(missing-user):CMD /bin/bash:By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.
data/tempCode/image-upscaler/dev/browser/basic/umd/index.html:9:3:warning(missing-integrity):  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/dev/browser/deployed/index.html:9:3:warning(missing-integrity):  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/dev/browser/deployed/index.html:10:3:warning(missing-integrity):  <script src="https://cdn.jsdelivr.net/npm/@upscalerjs/default-model@latest/dist/umd/index.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/dev/browser/deployed/index.html:11:3:warning(missing-integrity):  <script src="https://cdn.jsdelivr.net/npm/upscaler@latest/dist/browser/umd/upscaler.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/dev/browser/generate-pixel-upsampler-model/index.ts:36:3:error(insecure-document-method):  h3.innerHTML = `x${scale}`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/generate-pixel-upsampler-model/index.ts:50:5:error(insecure-document-method):    output.innerHTML += `\nCreated pixel upsampler for scale ${scale}`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/specific-model/index.ts:19:5:error(insecure-document-method):    option.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/speed-tests/index.ts:124:7:error(insecure-document-method):      tr.querySelector('td.duration')!.innerHTML = ``;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/speed-tests/index.ts:125:7:error(insecure-document-method):      tr.querySelector('td.fps')!.innerHTML = ``;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/speed-tests/index.ts:132:7:error(insecure-document-method):      status.innerHTML = `Running ${label} Model`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/speed-tests/index.ts:144:7:error(insecure-document-method):      tr.querySelector('td.fps')!.innerHTML = `${fpsReport}fps`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/browser/speed-tests/index.ts:145:7:error(insecure-document-method):      tr.querySelector('td.duration')!.innerHTML = `${duration}ms`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/dev/node/src/commands/test-model.ts:89:43:warning(path-join-resolve-traversal):          const outputPath = path.resolve(...[:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/dev/node/src/commands/test-model.ts:31:17:info(unsafe-formatstring):    console.log(height, width):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/image-upscaler/dev/node/src/commands/test-model.ts:36:17:info(unsafe-formatstring):    console.log(slicedHeight, slicedWidth):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/image-upscaler/dev/node/src/utils/upscaler.ts:36:40:warning(path-join-resolve-traversal):  const requireFilePath = path.resolve(folder, specificExport.require);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/dev/node/src/utils/upscaler.ts:44:51:warning(path-join-resolve-traversal):  const modelDirectory = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/dev/node/src/utils/upscaler.ts:48:5:warning(path-join-resolve-traversal):    packageName,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/dev/node/src/utils/upscaler.ts:49:5:warning(path-join-resolve-traversal):    _internals.path,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/docs/docusaurus.config.js:220:9:error(detected-generic-api-key):        apiKey: '9eb8362e5223d1810a14290300a5d79d',:Generic API Key detected
data/tempCode/image-upscaler/docs/src/components/demo/demo.tsx:16:1:error(insecure-document-method):globalStyle.innerHTML = `:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/image-upscaler/docs/workers/shared/src/index.ts:111:19:info(unsafe-formatstring):      console.log(`Should 403, because origin is not in allowed domains. Origin is "${origin}" and ALLOWED_DOMAINS include`, ALLOWED_DOMAINS):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/image-upscaler/examples/basic-umd/index.html:65:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/basic-umd/index.html:66:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/@upscalerjs/default-model@latest/dist/umd/index.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/basic-umd/index.html:67:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/@upscalerjs/esrgan-slim@latest/dist/umd/index.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/basic-umd/index.html:68:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/@upscalerjs/esrgan-slim@latest/dist/umd/2x.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/basic-umd/index.html:69:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/@upscalerjs/esrgan-slim@latest/dist/umd/3x.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/basic-umd/index.html:70:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/@upscalerjs/esrgan-slim@latest/dist/umd/4x.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/basic-umd/index.html:71:5:warning(missing-integrity):    <script src="https://cdn.jsdelivr.net/npm/upscaler@latest/dist/browser/umd/upscaler.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/cloudflare-worker/src/browser/index.js:29:26:error(react-insecure-request):  const response = await fetch(CLOUDFLARE_URL, {:Unencrypted request over HTTP detected.
data/tempCode/image-upscaler/examples/nodejs/src/index.js:9:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/image-upscaler/examples/nodejs-custom-file-path/src/index.js:9:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/image-upscaler/examples/nodejs-model/src/index.js:10:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/image-upscaler/examples/patch-sizes/index.html:4:3:warning(missing-integrity):  <script src="https://cdn.jsdelivr.net/npm/toolcool-range-slider/dist/plugins/tcrs-generated-labels.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/examples/patch-sizes/index.html:5:3:warning(missing-integrity):  <script src="https://cdn.jsdelivr.net/npm/toolcool-range-slider/dist/toolcool-range-slider.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/_templates/index.js.ejs:6:8:warning(template-explicit-unescape):import <%- dependency.hashedName %> from '<%- dependency.name %>';:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/_templates/index.js.ejs:6:43:warning(template-explicit-unescape):import <%- dependency.hashedName %> from '<%- dependency.name %>';:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/_templates/index.js.ejs:7:9:warning(template-explicit-unescape):window['<%- dependency.name %>'] = <%- dependency.hashedName %>;:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/_templates/index.js.ejs:7:36:warning(template-explicit-unescape):window['<%- dependency.name %>'] = <%- dependency.hashedName %>;:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/_templates/package.json.ejs:5:19:warning(template-explicit-unescape):  "dependencies": <%- dependencies %> ,:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/src/EsbuildBundler.ts:28:55:warning(path-join-resolve-traversal):) => _getTemplate(path.resolve(ESBUILD_TEMPLATES_DIR, templateName), args);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/src/EsbuildBundler.ts:89:38:warning(path-join-resolve-traversal):      }) => path.join('@upscalerjs', packageDirectoryName, modelName));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/esbuild/src/EsbuildBundler.ts:89:60:warning(path-join-resolve-traversal):      }) => path.join('@upscalerjs', packageDirectoryName, modelName));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/node/_templates/package.json.ejs:5:19:warning(template-explicit-unescape):  "dependencies": <%- dependencies %> ,:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/node/src/NodeBundler.ts:41:40:warning(path-join-resolve-traversal):  const packageJSONPath = path.resolve(outputDir, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/umd/_templates/index.html.ejs:8:64:warning(template-explicit-unescape):    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@<%- tfjsVersion %>/dist/tf.min.js"></script>:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/umd/_templates/index.html.ejs:8:64:warning(var-in-script-src):    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@<%- tfjsVersion %>/dist/tf.min.js"></script>:Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/umd/src/UMDBundler.ts:25:32:warning(path-join-resolve-traversal):  await writeFile(path.resolve(outDir, 'index.html'), contents);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/_templates/index.js.ejs:6:8:warning(template-explicit-unescape):import <%- dependency.hashedName %> from '<%- dependency.name %>';:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/_templates/index.js.ejs:6:43:warning(template-explicit-unescape):import <%- dependency.hashedName %> from '<%- dependency.name %>';:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/_templates/index.js.ejs:7:9:warning(template-explicit-unescape):window['<%- dependency.name %>'] = <%- dependency.hashedName %>;:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/_templates/index.js.ejs:7:36:warning(template-explicit-unescape):window['<%- dependency.name %>'] = <%- dependency.hashedName %>;:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/_templates/package.json.ejs:6:19:warning(template-explicit-unescape):  "dependencies": <%- dependencies %> ,:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/src/WebpackBundler.ts:32:55:warning(path-join-resolve-traversal):) => _getTemplate(path.resolve(WEBPACK_TEMPLATES_DIR, templateName), args);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/src/WebpackBundler.ts:93:38:warning(path-join-resolve-traversal):      }) => path.join('@upscalerjs', packageDirectoryName, modelName));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/bundlers/webpack/src/WebpackBundler.ts:93:60:warning(path-join-resolve-traversal):      }) => path.join('@upscalerjs', packageDirectoryName, modelName));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/utils/get-bundler-output-dir.ts:13:48:warning(path-join-resolve-traversal):  return path.resolve(ROOT_BUNDLER_OUTPUT_DIR, outputDir);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/bundlers/src/utils/get-packages-for-registry.ts:10:48:warning(path-join-resolve-traversal):    const directory = path.resolve(MODELS_DIR, packageDirectoryName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/index.ts:10:8:error(detect-child-process):  exec(command, (error) => {:Detected calls to child_process from a function argument `script`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/image-upscaler/internals/common/src/models.ts:11:45:warning(path-join-resolve-traversal):  const modelDir = path.resolve(MODELS_DIR, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/models.ts:16:40:warning(path-join-resolve-traversal):  const packageJSONPath = path.resolve(modelDir, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/models.ts:46:52:warning(path-join-resolve-traversal):  const modelPackageDir = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/models.ts:47:37:warning(path-join-resolve-traversal):  const umdNamesPath = path.resolve(modelPackageDir, 'umd-names.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/models.ts:60:52:warning(path-join-resolve-traversal):  const modelPackageDir = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/models.ts:95:54:warning(path-join-resolve-traversal):    const modelPackageDir = path.resolve(MODELS_DIR, packageDirectoryName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/models.ts:144:52:warning(path-join-resolve-traversal):  const packageJSONPath = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/npm.ts:17:17:error(spawn-shell-true):  const child = spawn(runner, parseCommand(command), {:Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
data/tempCode/image-upscaler/internals/common/src/npm.ts:17:23:error(detect-child-process):  const child = spawn(runner, parseCommand(command), {:Detected calls to child_process from a function argument `runner`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/image-upscaler/internals/common/src/package-json.ts:24:83:warning(path-join-resolve-traversal):  const packageJSONPath = folder.endsWith('package.json') ? folder : path.resolve(folder, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/package-json.ts:55:23:warning(path-join-resolve-traversal):  return path.resolve(file, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/tfjs-library.ts:10:62:warning(path-join-resolve-traversal):  const packageJSON = JSON.parse(await readFile(path.resolve(dir, 'package.json')));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/common/src/tmp-dir.ts:9:31:warning(path-join-resolve-traversal):  const folder = path.resolve(root, hashedName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/start/guide.ts:16:48:warning(path-join-resolve-traversal):  const guidePath = path.resolve(EXAMPLES_DIR, guide);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/start/guide.ts:29:48:warning(path-join-resolve-traversal):  const guidePath = path.resolve(EXAMPLES_DIR, exampleDirectory);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/start/guide.ts:20:10:error(spawn-shell-true):  return spawn(command[0], command.slice(1), {:Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
data/tempCode/image-upscaler/internals/scripts/src/bin/update/npm-dependencies.ts:81:35:warning(path-join-resolve-traversal):      cwd: path.resolve(ROOT_DIR, path.dirname(file)),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/update/npm-dependencies.ts:27:32:error(detect-child-process):  const spawnedProcess = _exec(cmd, opts, (error) => {:Detected calls to child_process from a function argument `cmd`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/image-upscaler/internals/scripts/src/bin/update/npm-dependencies.ts:42:32:error(detect-child-process):  const spawnedProcess = _exec(cmd, opts, (error) => {:Detected calls to child_process from a function argument `cmd`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:48:46:warning(path-join-resolve-traversal):  const packagePath = path.resolve(ROOT_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:51:30:warning(path-join-resolve-traversal):  ].map(file => path.resolve(packagePath, file)));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:51:43:warning(path-join-resolve-traversal):  ].map(file => path.resolve(packagePath, file)));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:52:40:warning(path-join-resolve-traversal):  const packageDistPath = path.resolve(packagePath, 'dist');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:54:37:warning(path-join-resolve-traversal):    if (!fs.existsSync(path.resolve(packageDistPath, file))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:54:54:warning(path-join-resolve-traversal):    if (!fs.existsSync(path.resolve(packageDistPath, file))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/validate/index.ts:55:57:warning(path-join-resolve-traversal):      const existingFiles: string[] = sync(path.resolve(packageDistPath, '**/*'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/api/lib/get-definitions/get-declaration-reflections-from-packages.ts:14:15:warning(path-join-resolve-traversal):    path.join(projectRoot, 'src'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/api/lib/get-definitions/get-types-from-platform-specific-upscaler-files.ts:54:39:warning(path-join-resolve-traversal):    path.resolve(UPSCALER_DIR, 'src', `${fileName}.${tfjsLibrary}.ts`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/api/lib/get-definitions/get-types-from-platform-specific-upscaler-files.ts:55:32:warning(path-join-resolve-traversal):    path.resolve(UPSCALER_DIR, `tsconfig.docs.${tfjsLibrary}.json`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/api/lib/write-api-documentation-files/write-api-documentation-files.ts:16:33:warning(path-join-resolve-traversal):    const target = path.resolve(dest, `${method.name}.md`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/api/lib/write-api-documentation-files/write-api-documentation-files.ts:16:39:warning(path-join-resolve-traversal):    const target = path.resolve(dest, `${method.name}.md`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/api/lib/write-index-file.ts:11:32:warning(path-join-resolve-traversal):  await writeFile(path.resolve(dest, 'index.md'), contents);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:28:50:warning(path-join-resolve-traversal):    const isDirectory = (await stat(path.resolve(root, file))).isDirectory();:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:28:56:warning(path-join-resolve-traversal):    const isDirectory = (await stat(path.resolve(root, file))).isDirectory();:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:54:71:warning(path-join-resolve-traversal):  const packageJSON = await getPackageJSON(path.resolve(EXAMPLES_DIR, key, 'package.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:55:49:warning(path-join-resolve-traversal):  const readmePath = path.resolve(EXAMPLES_DIR, key, 'README.md');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:99:51:warning(path-join-resolve-traversal):    const readmePath = path.resolve(EXAMPLES_DIR, folder, 'README.md');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:160:49:warning(path-join-resolve-traversal):  const readmePath = path.resolve(EXAMPLES_DIR, key, 'README.md');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:175:51:warning(path-join-resolve-traversal):  const srcAssetsDir = path.resolve(EXAMPLES_DIR, key, 'assets');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:177:42:warning(path-join-resolve-traversal):    const targetAssetsDir = path.resolve(targetDir, 'assets');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:181:38:warning(path-join-resolve-traversal):      const assetPath = path.resolve(srcAssetsDir, asset);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:181:52:warning(path-join-resolve-traversal):      const assetPath = path.resolve(srcAssetsDir, asset);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:182:46:warning(path-join-resolve-traversal):      await copyFile(assetPath, path.resolve(targetAssetsDir, asset));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:182:63:warning(path-join-resolve-traversal):      await copyFile(assetPath, path.resolve(targetAssetsDir, asset));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:207:36:warning(path-join-resolve-traversal):    const targetDir = path.resolve(...[dest, category, parent].filter(Boolean));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:213:37:warning(path-join-resolve-traversal):    const targetPath = path.resolve(targetDir, `${key}.md`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:213:48:warning(path-join-resolve-traversal):    const targetPath = path.resolve(targetDir, `${key}.md`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/guides/write-guide-docs.ts:268:32:warning(path-join-resolve-traversal):  await writeFile(path.resolve(dest, 'index.md'), content);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:28:48:warning(path-join-resolve-traversal):  const packagePath = path.resolve(MODELS_DIR, packageName, 'assets');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:29:35:warning(path-join-resolve-traversal):  const targetPath = path.resolve(targetDir, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:29:46:warning(path-join-resolve-traversal):  const targetPath = path.resolve(targetDir, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:48:50:warning(path-join-resolve-traversal):    const packagePath = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:49:37:warning(path-join-resolve-traversal):    const docMdxPath = path.resolve(packagePath, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:55:39:warning(path-join-resolve-traversal):      const targetPath = path.resolve(targetDocDir, category, `${packageName}.mdx`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:55:53:warning(path-join-resolve-traversal):      const targetPath = path.resolve(targetDocDir, category, `${packageName}.mdx`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:55:63:warning(path-join-resolve-traversal):      const targetPath = path.resolve(targetDocDir, category, `${packageName}.mdx`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:114:48:warning(path-join-resolve-traversal):  const packagePath = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:115:35:warning(path-join-resolve-traversal):  const docMdxPath = path.resolve(packagePath, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:128:50:warning(path-join-resolve-traversal):    const packagePath = path.resolve(MODELS_DIR, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/docs/models/write-model-readmes.ts:129:37:warning(path-join-resolve-traversal):    const readmePath = path.resolve(packagePath, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/docs/index.ts:11:53:warning(path-join-resolve-traversal):  const sharedDoc = path.resolve(SHARED_DIR, 'src', modelFamily, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/docs/index.ts:20:52:warning(path-join-resolve-traversal):  const docSnippetsPath = path.resolve(MODELS_DIR, model, 'doc-snippets');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/docs/index.ts:27:49:warning(path-join-resolve-traversal):    const snippet = await readFile(path.resolve(docSnippetsPath, snippetPath)) ?? '';:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/docs/index.ts:27:66:warning(path-join-resolve-traversal):    const snippet = await readFile(path.resolve(docSnippetsPath, snippetPath)) ?? '';:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/docs/index.ts:54:69:warning(path-join-resolve-traversal):  const packageJSON = await getPackageJSON(path.resolve(MODELS_DIR, model, 'package.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/docs/index.ts:95:49:warning(path-join-resolve-traversal):    const targetPath = path.resolve(MODELS_DIR, model, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:2:12:warning(template-explicit-unescape):  "name": "<%- name %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:3:15:warning(template-explicit-unescape):  "version": "<%- version %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:4:19:warning(template-explicit-unescape):  "description": "<%- description %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:5:15:warning(template-explicit-unescape):  "keywords": <%- JSON.stringify(keywords, null, 2) %>,:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:12:14:warning(template-explicit-unescape):  "exports": <%- JSON.stringify(exports, null, 2) %>,:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:13:14:warning(template-explicit-unescape):  "module": "<%- module %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:14:13:warning(template-explicit-unescape):  "types": "<%- types %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:15:16:warning(template-explicit-unescape):  "umd:main": "<%- umdMain %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:48:15:warning(template-explicit-unescape):    "title": "<%- title %>",:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:49:43:warning(template-explicit-unescape):    <% if (!!locals.models) { %>"models": <%- JSON.stringify(models, null, 2) %>,<% } %>:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/_templates/package.json.ejs:50:21:warning(template-explicit-unescape):    "modelFamily": "<%- modelFamily %>":Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/index.ts:26:47:warning(path-join-resolve-traversal):) => _getTemplate(path.resolve(TEMPLATES_DIR, templateName), args);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/index.ts:37:98:warning(path-join-resolve-traversal):const getUMDNames = async (modelDirectoryPath: string) => JSON.parse(await readFile(path.resolve(modelDirectoryPath, 'umd-names.json')));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/index.ts:41:55:warning(path-join-resolve-traversal):  const modelDirectoryPath = path.resolve(MODELS_DIR, modelDirectoryName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/folder/index.ts:211:32:warning(path-join-resolve-traversal):  await writeFile(path.resolve(modelDirectoryPath, 'package.json'), `${JSON.stringify(newPackageJSON, null, 2)}\n`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model/shared/getModels.ts:10:55:warning(path-join-resolve-traversal):  const modelDirectoryPath = path.resolve(MODELS_DIR, modelDirectoryName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:11:53:warning(path-join-resolve-traversal):  const sharedDoc = path.resolve(SHARED_DIR, 'src', modelFamily, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:20:52:warning(path-join-resolve-traversal):  const docSnippetsPath = path.resolve(MODELS_DIR, model, 'doc-snippets');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:27:49:warning(path-join-resolve-traversal):    const snippet = await readFile(path.resolve(docSnippetsPath, snippetPath)) ?? '';:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:27:66:warning(path-join-resolve-traversal):    const snippet = await readFile(path.resolve(docSnippetsPath, snippetPath)) ?? '';:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:54:69:warning(path-join-resolve-traversal):  const packageJSON = await getPackageJSON(path.resolve(MODELS_DIR, model, 'package.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:95:49:warning(path-join-resolve-traversal):    const targetPath = path.resolve(MODELS_DIR, model, 'DOC.mdx');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/scripts/src/bin/write/model-docs.ts:106:55:warning(path-join-resolve-traversal):  const modelDirectoryPath = path.resolve(MODELS_DIR, modelDirectoryName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/test-runner/src/ServersideTestRunner.ts:66:30:warning(path-join-resolve-traversal):  const dataFile = path.join(tmpDir, getHashedName());:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/internals/test-runner/src/ServersideTestRunner.ts:22:31:error(detect-child-process):  const spawnedProcess = exec(cmd, options, (error) => {:Detected calls to child_process from a function argument `cmd`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/image-upscaler/internals/test-runner/src/_templates/node-script.js.ejs:73:37:warning(template-explicit-unescape):  const script = <% if (script) { %><%- script %><% } else { throw new Error('Blank script') } %>;:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/test-runner/src/_templates/node-script.js.ejs:75:21:warning(template-explicit-unescape):  fs.writeFileSync('<%- outputFile %>', data);:Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.
data/tempCode/image-upscaler/internals/webdriver/src/index.ts:187:21:info(unsafe-formatstring):      console.error(`Error executing script (duration: ${performance.now() - start})`, err);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/image-upscaler/packages/upscalerjs/src/node/loadModel.node.ts:37:33:warning(path-join-resolve-traversal):  return `file://${path.resolve(moduleFolder, _internals.path)}`;:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/image-upscaler/packages/upscalerjs/src/node/loadModel.node.ts:37:47:warning(path-join-resolve-traversal):  return `file://${path.resolve(moduleFolder, _internals.path)}`;:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
