/home/codescan/requestly/app/.env:4:20:error(detected-generic-api-key):REACT_APP_FIREBASE_API_KEY="AIzaSyDLQVMq0xNdzr3SNrimDyvIEdBBQhpw-t8":Generic API Key detected
/home/codescan/requestly/app/index.html:15:85:error(detected-generic-api-key):    if ("https://app.requestly.io/goodbye/" === window.location.href) { const a = { api_key: "62ff1b46909e50358cfca0668d41f011", events: [{ user_id: localStorage.getItem("__rq_uid") || Math.random().toString(36).slice(2, 10), event_type: "extension_uninstalled" }] }, b = new Blob([JSON.stringify(a)]); navigator.sendBeacon("https://api2.amplitude.com/2/httpapi", b) }:Generic API Key detected
/home/codescan/requestly/app/public/index.html:14:87:error(detected-generic-api-key):      if ("https://app.requestly.io/goodbye/" === window.location.href) { const a = { api_key: "62ff1b46909e50358cfca0668d41f011", events: [{ user_id: localStorage.getItem("__rq_uid") || Math.random().toString(36).slice(2, 10), event_type: "extension_uninstalled" }] }, b = new Blob([JSON.stringify(a)]); navigator.sendBeacon("https://api2.amplitude.com/2/httpapi", b) }:Generic API Key detected
/home/codescan/requestly/app/src/components/features/mobileDebugger/features/interceptor/components/DeviceIdSelector.js:53:17:warning(detect-non-literal-regexp):      let reg = new RegExp(query.split("-").join("\\w*").replace(/\W/, ""), "i");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/app/src/components/features/rules/RuleBuilder/Header/ActionButtons/CreateRuleButton/actions/index.js:521:11:warning(detect-non-literal-regexp):          new RegExp(pattern);:RegExp() called with a `pair` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/app/src/components/features/rules/RuleBuilder/useExternalRuleCreation.ts:52:9:warning(wildcard-postmessage-configuration):        window.opener?.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/requestly/app/src/components/landing/ruleSelection/RuleDetails/index.tsx:20:98:warning(react-dangerouslysetinnerhtml):          <div className="text-gray rule-details-description" dangerouslySetInnerHTML={{ __html: description }} />:Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.
/home/codescan/requestly/app/src/components/mode-specific/desktop/InterceptTraffic/WebTraffic/TrafficTableV2/utils/index.ts:192:7:warning(prototype-pollution-loop):      jsonObject = jsonObject[pathParts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/app/src/utils/rules/misc.js:203:5:warning(detect-non-literal-regexp):    new RegExp(regexStr);:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/app/src/views/features/sessions/SessionsIndexPageContainer/NetworkSessions/actions.ts:50:21:info(unsafe-formatstring):      console.error(`Got error while getting session ${id}`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/requestly/browser-extension/common/src/custom-elements/utils.ts:9:5:error(insecure-document-method):    element.innerHTML = content;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/requestly/browser-extension/common/src/custom-elements/utils.ts:15:5:error(insecure-document-method):    element.innerHTML = trustedTypesPolicy.createHTML(content);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/requestly/browser-extension/common/src/devtools/utils.ts:30:7:warning(wildcard-postmessage-configuration):      editorWindow?.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/requestly/browser-extension/mv2/Gruntfile.js:18:19:info(unsafe-formatstring):    console.error(`Invalid URL: ${urlString}`, error);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/requestly/browser-extension/mv2/src/client/js/consoleLoggerHandler.js:6:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv2/src/client/js/consoleLoggerHandler.js:46:7:warning(wildcard-postmessage-configuration):      window.top.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/requestly/browser-extension/mv2/src/client/js/consoleLoggerHandler.js:70:5:info(unsafe-formatstring):    `%cRequestly%c ${text}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/requestly/browser-extension/mv2/src/client/js/requestResponseRuleHandler.js:51:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv2/src/client/js/requestResponseRuleHandler.js:196:9:warning(prototype-pollution-loop):        jsonObject = jsonObject[pathParts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/client/js/ruleMatcher.js:23:14:warning(detect-non-literal-regexp):      return new RegExp(matchRegExp[1], matchRegExp[2]);:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/client/js/sessionRecorder.js:245:5:error(insecure-document-method):    rqToast.innerHTML = trustedTypesPolicy.createHTML(rqToastContent);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/requestly/browser-extension/mv2/src/client/js/sessionRecorder.js:123:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv2/src/client/js/sessionRecorder.js:203:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:1284:13:error(insecure-document-method):            docElem.appendChild(el).innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:4800:11:error(insecure-document-method):          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:6110:19:error(insecure-document-method):                  elem.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:1824:27:warning(detect-non-literal-regexp):              ((pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&:RegExp() called with a `className` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:5110:25:warning(detect-non-literal-regexp):        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");:RegExp() called with a `types` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:8367:44:warning(detect-non-literal-regexp):      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;:RegExp() called with a `event` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:1897:31:warning(prototype-pollution-loop):                        while ((node = node[dir])) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:2344:21:warning(prototype-pollution-loop):              while ((elem = elem[dir])) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:2360:23:warning(prototype-pollution-loop):                while ((elem = elem[dir])) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:2368:23:warning(prototype-pollution-loop):                while ((elem = elem[dir])) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:2377:23:warning(prototype-pollution-loop):                      elem = elem[dir] || elem;:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:2921:12:warning(prototype-pollution-loop):    while ((elem = elem[dir]) && elem.nodeType !== 9) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/libs/jquery-3.5.1.js:3234:12:warning(prototype-pollution-loop):    while ((cur = cur[dir]) && cur.nodeType !== 1) {}:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/devtools/panel/templates/Row.hbs:6:30:warning(var-in-href):  <td class="cell-rule-name"><a href="{{ruleLink}}" target="_blank" title="Open in new tab">{{rule.name}}</a></td>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/requestly/browser-extension/mv2/src/modules/PreDefinedFunction.js:21:34:warning(detect-non-literal-regexp):  this.pattern = this.pattern || new RegExp(this.name + "\\(" + argumentPattern + "\\)", "ig");:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/modules/RuleMatcher.js:21:39:warning(detect-non-literal-regexp):    finalString = finalString.replace(new RegExp("[$]" + index, "g"), matchValue);:RegExp() called with a `index` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/shared/utils.js:13:12:warning(detect-non-literal-regexp):    return new RegExp(matchRegExp[1], matchRegExp[2]);:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/browser-extension/mv2/src/shared/utils.js:297:7:warning(prototype-pollution-loop):      jsonObject = jsonObject[pathParts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv2/src/shared/utils.js:324:5:warning(prototype-pollution-loop):    schema = schema[elem];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv3/rollup.config.js:16:19:info(unsafe-formatstring):    console.error(`Invalid URL: ${urlString}`, error);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/requestly/browser-extension/mv3/src/client-scripts/ajaxRequestInterceptor.js:52:9:warning(prototype-pollution-loop):        jsonObject = jsonObject[pathParts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/requestly/browser-extension/mv3/src/client-scripts/sessionRecorderHelper.js:14:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv3/src/content-scripts/client/ruleExecution.ts:7:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv3/src/content-scripts/client/sessionRecorder.ts:60:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/requestly/browser-extension/mv3/src/service-worker/services/ruleMatcher.ts:10:12:warning(detect-non-literal-regexp):    return new RegExp(matchRegExp[1], matchRegExp[2]);:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/common/rule-processor/src/RuleHelper.js:24:41:warning(detect-non-literal-regexp):      finalString = finalString.replace(new RegExp("[$]" + index, "g"), matchValue);:RegExp() called with a `index` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/common/utils.js:19:10:warning(detect-non-literal-regexp):  return new RegExp(matchRegExp[1], matchRegExp[2]);:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/requestly/common/utils.js:36:7:warning(prototype-pollution-loop):      jsonObject = jsonObject[pathParts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
