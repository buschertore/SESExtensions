/home/codescan/ghostery-extension/extension-manifest-v2/app/content-scripts/blocked_redirect.js:97:4:error(insecure-document-method):			document.getElementById('redirect-prevent').innerHTML = translations.blocked_redirect_prevent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v2/app/content-scripts/blocked_redirect.js:101:5:error(insecure-document-method):				document.getElementById('redirect-url').innerHTML = translations.blocked_redirect_url_content;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v2/app/content-scripts/click_to_play.js:67:4:error(insecure-document-method):			idoc.documentElement.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v2/app/content-scripts/notifications.js:482:3:error(insecure-document-method):		s.innerHTML = result.text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v2/manifest.json:285:4:error(detect-insecure-websocket):		"ws://*/*",:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v2/src/background.js:1151:50:error(detect-insecure-websocket):	let urlFilters = ['http://*/*', 'https://*/*', 'ws://*/*', 'wss://*/*'];:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v2/src/classes/Debugger.js:109:4:info(unsafe-formatstring):			`%c${text.replace(style, '')}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v2/src/classes/EventHandlers.js:275:12:error(detect-insecure-websocket):			// with ws:// and wss:// schemes are ignored.:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v2/src/classes/Policy.js:203:27:warning(detect-non-literal-regexp):				const wildcardRegex = new RegExp(wildcardPattern);:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:98:47:warning(path-join-resolve-traversal):  shelljs.mkdir('-p', resolve(options.outDir, path));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:101:29:warning(path-join-resolve-traversal):    resolve(options.srcDir, path, '*'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:102:29:warning(path-join-resolve-traversal):    resolve(options.outDir, path),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:115:47:warning(path-join-resolve-traversal):    resolve(options.srcDir, 'rule_resources', path),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:134:48:warning(path-join-resolve-traversal):    const sourcePath = resolve(options.srcDir, path);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:135:46:warning(path-join-resolve-traversal):    const destPath = resolve(options.outDir, dir);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:209:51:warning(path-join-resolve-traversal):      shelljs.mkdir('-p', resolve(options.outDir, dir));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:210:52:warning(path-join-resolve-traversal):      shelljs.cp('', path, resolve(options.outDir, dir));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:235:17:warning(path-join-resolve-traversal):      ? resolve(src):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/build.js:236:33:warning(path-join-resolve-traversal):      : resolve(options.srcDir, src);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/ghostery-extension/extension-manifest-v3/scripts/download-engines/utils.js:35:46:info(unsafe-formatstring):  const log = (msg) => debug && console.warn(`${msg}:\n`, JSON.stringify(rule));:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/background/external.js:39:27:info(unsafe-formatstring):            console.error(`Unknown message type from "${sender.id}"`, message);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/background/external.js:67:27:info(unsafe-formatstring):            console.error(`Unknown message type from "${sender.id}"`, message);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/content_scripts/whotracksme/ghostery-whotracksme.js:17:5:warning(wildcard-postmessage-configuration):    window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ghostery-extension/extension-manifest-v3/src/content_scripts/whotracksme/index.js:111:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener('message', (message) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ghostery-extension/extension-manifest-v3/src/manifest.chromium.json:22:6:error(detect-insecure-websocket):    "ws://*/*",:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v3/src/manifest.firefox.json:19:6:error(detect-insecure-websocket):    "ws://*/*",:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v3/src/manifest.safari-ios.json:21:6:error(detect-insecure-websocket):    "ws://*/*",:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v3/src/manifest.safari-macos.json:21:6:error(detect-insecure-websocket):    "ws://*/*",:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/ghostery-extension/extension-manifest-v3/src/pages/settings/components/devtools.js:30:5:error(insecure-document-method):    el.innerHTML = response;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v3/src/pages/settings/components/devtools.js:34:7:error(insecure-document-method):      el.innerHTML = origText;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v3/src/pages/settings/components/devtools.js:38:5:error(insecure-document-method):    el.innerHTML = origText;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v3/src/utils/engines.js:67:19:info(unsafe-formatstring):    console.error(`Failed to load engine "${name}" from storage`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/utils/engines.js:83:19:info(unsafe-formatstring):    console.error(`Failed to save engine "${name}" to storage`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/utils/engines.js:190:23:info(unsafe-formatstring):        console.error(`Failed to add list "${name}"`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/utils/engines.js:209:23:info(unsafe-formatstring):        console.error(`Failed to update list "${name}"`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/utils/engines.js:268:19:info(unsafe-formatstring):    console.error(`Failed to update engine "${name}"`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/src/utils/engines.js:300:19:info(unsafe-formatstring):    console.error(`Failed to load engine "${name}" from disk`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/ghostery-extension/extension-manifest-v3/xcode/Shared (App)/Resources/Script.js:26:16:error(insecure-document-method):    if (value) element.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/extension-manifest-v3/xcode/Shared (App)/StoreHelper/StoreHelper/KeychainHelper.swift:40:22:warning(keychain-without-user-auth):        let status = SecItemAdd(query as CFDictionary, nil):The application was observed to store keychain items that do not leverage user authentication. Requiring the user to provide authentication increases the confidence that the person using the phone is indeed authorized to view the information being retrieved.
/home/codescan/ghostery-extension/packages/trackers-preview/src/content_scripts/index.js:163:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', (message) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ghostery-extension/packages/trackers-preview/src/page_scripts/index.js:28:3:warning(wildcard-postmessage-configuration):  window.parent.postMessage('WTMReportClosePopups', '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ghostery-extension/packages/trackers-preview/src/page_scripts/index.js:32:3:warning(wildcard-postmessage-configuration):  window.parent.postMessage('WTMReportDisable', '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ghostery-extension/packages/trackers-preview/src/page_scripts/index.js:39:7:warning(wildcard-postmessage-configuration):      window.parent.postMessage(`WTMReportResize:${height}`, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ghostery-extension/packages/ui/src/utils/iframe.js:23:3:error(insecure-document-method):  template.innerHTML = /*html*/ `:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ghostery-extension/packages/ui/src/utils/iframe.js:81:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener('message', (e) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ghostery-extension/packages/ui/src/utils/iframe.js:123:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ghostery-extension/packages/ui/src/utils/iframe.js:132:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ghostery-extension/packages/ui/src/utils/iframe.js:151:7:warning(wildcard-postmessage-configuration):      window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
