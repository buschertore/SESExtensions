data/tempCode/heads-up/projects/@shared/components/app-icon.vue:2:3:warning(avoid-v-html):  <span:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/properties-item.vue:33:13:warning(avoid-v-html):            <span v-if="warningMessage" v-html="warningMessage" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/properties-item.vue:35:15:warning(avoid-v-html):              <li v-for="(warning, index) in warnings" :key="index" v-html="warning.message" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/properties-item.vue:40:13:warning(avoid-v-html):            <span v-if="errorMessage" v-html="errorMessage" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/properties-item.vue:42:15:warning(avoid-v-html):              <li v-for="(error, index) in errors" :key="index" v-html="error.message" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/properties-item.vue:46:13:warning(avoid-v-html):            <span v-html="tooltip.info.trim()" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/rich-previews/google-breadcrumb-preview.vue:25:11:warning(avoid-v-html):          <p class="google-breadcrumb__description" v-html="description" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/rich-previews/google-default-preview.vue:27:11:warning(avoid-v-html):          <p class="google-default__description" v-html="description" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/@shared/components/v-popover/lib/tooltip.js:220:5:error(insecure-document-method):    tooltipGenerator.innerHTML = template.trim();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/heads-up/projects/@shared/views/twitter/twitter.view.vue:10:9:warning(avoid-v-html):        <span v-html="supportedCards.map(card => `<code>${card}</code>`).join(', ')" />.:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/heads-up/projects/browser-extension/vue-app/vue.config.js:2:45:warning(path-join-resolve-traversal):const resolve = dir => path.join(__dirname, dir);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/heads-up/projects/browser-extension/webpack.config.js:7:45:warning(path-join-resolve-traversal):const resolve = dir => path.join(__dirname, dir);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/heads-up/projects/web-app/src/composables/use-head.js:18:21:info(unsafe-formatstring):      console.error(`Failed to load head data for "${ url }".`, err);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/heads-up/projects/web-app/vue.config.js:2:45:warning(path-join-resolve-traversal):const resolve = dir => path.join(__dirname, dir);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
