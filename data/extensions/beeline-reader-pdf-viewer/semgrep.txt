data/tempCode/beeline-reader-pdf-viewer/.gitpod.Dockerfile:5:1:warning(no-sudo-in-dockerfile):RUN sudo apt-get update && \:Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities.
data/tempCode/beeline-reader-pdf-viewer/external/builder/babel-plugin-pdfjs-preprocessor.mjs:50:13:warning(path-join-resolve-traversal):            ctx.rootPath,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/builder/babel-plugin-pdfjs-preprocessor.mjs:51:13:warning(path-join-resolve-traversal):            jsonPath.substring(ROOT_PREFIX.length):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/builder/test-fixtures.mjs:17:31:warning(path-join-resolve-traversal):    return path.join(baseDir, name);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/builder/test-fixtures_esprima.mjs:17:31:warning(path-join-resolve-traversal):    return path.join(baseDir, name);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/cmapscompress/compress.mjs:477:31:warning(path-join-resolve-traversal):    const srcPath = path.join(src, fn);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/cmapscompress/compress.mjs:477:36:warning(path-join-resolve-traversal):    const srcPath = path.join(src, fn);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/cmapscompress/compress.mjs:478:32:warning(path-join-resolve-traversal):    const destPath = path.join(dest, fn + ".bcmap");:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/cmapscompress/compress.mjs:478:38:warning(path-join-resolve-traversal):    const destPath = path.join(dest, fn + ".bcmap");:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/importL10n/locales.mjs:61:31:warning(path-join-resolve-traversal):  const outputDir = path.join(root, langCode);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/importL10n/locales.mjs:61:37:warning(path-join-resolve-traversal):  const outputDir = path.join(root, langCode);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/importL10n/locales.mjs:68:34:warning(path-join-resolve-traversal):    const outputPath = path.join(outputDir, fileName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/importL10n/locales.mjs:95:31:warning(path-join-resolve-traversal):    const dirPath = path.join(root, entry),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/external/importL10n/locales.mjs:95:37:warning(path-join-resolve-traversal):    const dirPath = path.join(root, entry),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/beeline-reader-pdf-viewer/gulpfile.mjs:812:25:warning(incomplete-sanitization):          buildCommit = stdout2.replace("\n", "");:`stdout2.replace` method will only replace the first occurrence when used with a string argument ("\n"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/beeline-reader-pdf-viewer/gulpfile.mjs:138:28:error(detect-child-process):  const result = spawnSync(command, parameters, options);:Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/beeline-reader-pdf-viewer/src/core/core_utils.js:441:16:warning(detect-non-literal-regexp):    const re = new RegExp(`[^\\\\]${m[1]}`);:RegExp() called with a `fontFamily` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/beeline-reader-pdf-viewer/src/core/jpg.js:197:7:warning(prototype-pollution-loop):      node = node[readBit()];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/beeline-reader-pdf-viewer/src/core/operator_list.js:22:5:warning(prototype-pollution-loop):    state = state[item] ||= [];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/beeline-reader-pdf-viewer/src/display/content_disposition.js:68:12:warning(detect-non-literal-regexp):    return new RegExp(:RegExp() called with a `attributePattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/beeline-reader-pdf-viewer/src/display/content_disposition.js:68:12:warning(detect-non-literal-regexp):    return new RegExp(:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/beeline-reader-pdf-viewer/src/scripting_api/util.js:504:21:warning(detect-non-literal-regexp):    const matches = new RegExp(`^${re}$`, "g").exec(cDate);:RegExp() called with a `cFormat` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/beeline-reader-pdf-viewer/web/firefoxcom.js:329:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", function windowMessage(e) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/beeline-reader-pdf-viewer/web/pdf_find_controller.js:805:21:warning(detect-non-literal-regexp):    query = query ? new RegExp(query, flags) : null;:RegExp() called with a `pageIndex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/beeline-reader-pdf-viewer/web/pdf_find_controller.js:871:17:info(unsafe-formatstring):                `Unable to get text content for page ${i + 1}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/beeline-reader-pdf-viewer/web/pdf_viewer.js:1008:19:info(unsafe-formatstring):                  `Unable to get page ${pageNum} to initialize viewer`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/beeline-reader-pdf-viewer/web/viewer-geckoview.html:34:5:warning(missing-integrity):<!--<link rel="stylesheet" href="resource://pdf.js/web/viewer.css">-->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/beeline-reader-pdf-viewer/web/viewer-geckoview.html:84:5:warning(missing-integrity):<!--<script src="resource://pdf.js/web/viewer.mjs" type="module"></script>-->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/beeline-reader-pdf-viewer/web/viewer-snippet-firefox-extension.html:2:1:warning(missing-integrity):<script src="resource://pdf.js/build/pdf.mjs" type="module"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/beeline-reader-pdf-viewer/web/viewer.html:41:5:warning(missing-integrity):<!--<link rel="stylesheet" href="resource://pdf.js/web/viewer.css">-->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/beeline-reader-pdf-viewer/web/viewer.html:48:5:warning(missing-integrity):<!--<script src="resource://pdf.js/web/viewer.mjs" type="module"></script>-->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
