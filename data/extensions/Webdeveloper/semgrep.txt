/home/codescan/web-developer/source/common/html/about/about.html:23:12:warning(plaintext-http-link):        <p><a href="http://chrispederick.com/about/">@author@</a></p>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/web-developer/source/common/html/about/about.html:39:5:warning(plaintext-http-link):    <a href="http://twitter.com/chrispederick/" class="btn btn-info btn-lg">:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/web-developer/source/common/html/background/background.html:20:115:warning(var-in-script-tag):  <div id="web-developer-dashboard-resizer">&bull;</div><h1 id="web-developer-dashboard-title" class="text-muted">{{dashboardTitle}}</h1><ul id="web-developer-dashboard-tabs" class="nav nav-pills"></ul><div id="web-developer-dashboard-panels" class="tab-content"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:24:12:warning(var-in-script-tag):  <div id="{{tabId}}-panel" class="tab-pane active"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:28:11:warning(var-in-script-tag):  <li id="{{tabId}}-tab" class="active"><a href="#{{tabId}}-panel" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:28:51:warning(var-in-script-tag):  <li id="{{tabId}}-tab" class="active"><a href="#{{tabId}}-panel" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:28:86:warning(var-in-script-tag):  <li id="{{tabId}}-tab" class="active"><a href="#{{tabId}}-panel" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:32:98:warning(var-in-script-tag):  <div id="element-information-content"><p id="web-developer-information" class="lead text-info">{{selectAnElementDisplayInformation}}</p></div><div id="current-element-ancestors"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:40:27:warning(var-in-script-tag):  <div id="edit-css-panel-{{position}}" class="tab-pane {{active}}"><textarea class="form-control">{{css}}</textarea></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:40:57:warning(var-in-script-tag):  <div id="edit-css-panel-{{position}}" class="tab-pane {{active}}"><textarea class="form-control">{{css}}</textarea></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:40:100:warning(var-in-script-tag):  <div id="edit-css-panel-{{position}}" class="tab-pane {{active}}"><textarea class="form-control">{{css}}</textarea></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:24:warning(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:45:warning(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:82:warning(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:114:warning(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:20:115:error(var-in-script-tag):  <div id="web-developer-dashboard-resizer">&bull;</div><h1 id="web-developer-dashboard-title" class="text-muted">{{dashboardTitle}}</h1><ul id="web-developer-dashboard-tabs" class="nav nav-pills"></ul><div id="web-developer-dashboard-panels" class="tab-content"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:24:12:error(var-in-script-tag):  <div id="{{tabId}}-panel" class="tab-pane active"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:28:11:error(var-in-script-tag):  <li id="{{tabId}}-tab" class="active"><a href="#{{tabId}}-panel" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:28:51:error(var-in-script-tag):  <li id="{{tabId}}-tab" class="active"><a href="#{{tabId}}-panel" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:28:86:error(var-in-script-tag):  <li id="{{tabId}}-tab" class="active"><a href="#{{tabId}}-panel" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:32:98:error(var-in-script-tag):  <div id="element-information-content"><p id="web-developer-information" class="lead text-info">{{selectAnElementDisplayInformation}}</p></div><div id="current-element-ancestors"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:40:27:error(var-in-script-tag):  <div id="edit-css-panel-{{position}}" class="tab-pane {{active}}"><textarea class="form-control">{{css}}</textarea></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:40:57:error(var-in-script-tag):  <div id="edit-css-panel-{{position}}" class="tab-pane {{active}}"><textarea class="form-control">{{css}}</textarea></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:40:100:error(var-in-script-tag):  <div id="edit-css-panel-{{position}}" class="tab-pane {{active}}"><textarea class="form-control">{{css}}</textarea></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:24:error(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:45:error(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:82:error(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/background/background.html:44:114:error(var-in-script-tag):  <li id="edit-css-tab-{{position}}" class="{{active}}"><a href="#edit-css-panel-{{position}}" data-toggle="tab">{{title}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:16:warning(var-in-script-tag):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:41:warning(var-in-script-tag):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:7:warning(var-in-href):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:10:warning(template-href-var):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:16:error(var-in-script-tag):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:41:error(var-in-script-tag):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-broken-images.html:54:10:warning(template-href-var):  <li><a href="{{src}}" target="_blank">{{src}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:16:warning(var-in-script-tag):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:24:warning(var-in-script-tag):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:49:warning(var-in-script-tag):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:7:warning(var-in-href):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:10:warning(template-href-var):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:16:error(var-in-script-tag):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:24:error(var-in-script-tag):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:49:error(var-in-script-tag):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/find-duplicate-ids.html:54:10:warning(template-href-var):  <li><a href="{{url}}#{{id}}" target="_blank">#{{id}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:16:warning(var-in-script-tag):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:24:warning(var-in-script-tag):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:53:warning(var-in-script-tag):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:7:warning(var-in-href):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:10:warning(template-href-var):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:16:error(var-in-script-tag):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:24:error(var-in-script-tag):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:53:error(var-in-script-tag):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-anchor-information.html:54:10:warning(template-href-var):  <li><a href="{{url}}#{{anchor}}" target="_blank">#{{anchor}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:55:3:warning(var-in-script-tag):  {{#colors}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:56:106:warning(var-in-script-tag):    <div class="web-developer-color-container"><div class="web-developer-color" style="background-color: {{.}}"></div><span>{{.}}</span></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:56:125:warning(var-in-script-tag):    <div class="web-developer-color-container"><div class="web-developer-color" style="background-color: {{.}}"></div><span>{{.}}</span></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:57:3:warning(var-in-script-tag):  {{/colors}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:55:3:error(var-in-script-tag):  {{#colors}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:56:106:error(var-in-script-tag):    <div class="web-developer-color-container"><div class="web-developer-color" style="background-color: {{.}}"></div><span>{{.}}</span></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:56:125:error(var-in-script-tag):    <div class="web-developer-color-container"><div class="web-developer-color" style="background-color: {{.}}"></div><span>{{.}}</span></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-color-information.html:57:3:error(var-in-script-tag):  {{/colors}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:11:warning(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:26:warning(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:43:warning(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:62:warning(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:63:3:warning(var-in-script-tag):  {{#elements}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:13:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:28:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:45:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:62:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:80:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:98:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:115:warning(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:65:3:warning(var-in-script-tag):  {{/elements}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:11:error(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:26:error(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:43:error(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:59:62:error(var-in-script-tag):  <tr><td>{{id}}</td><td>{{name}}</td><td>{{method}}</td><td>{{action}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:63:3:error(var-in-script-tag):  {{#elements}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:13:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:28:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:45:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:62:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:80:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:98:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:64:115:error(var-in-script-tag):    <tr><td>{{id}}</td><td>{{name}}</td><td>{{type}}</td><td>{{value}}</td><td>{{label}}</td><td>{{size}}</td><td>{{maximumLength}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-form-information.html:65:3:error(var-in-script-tag):  {{/elements}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:54:3:warning(var-in-script-tag):  {{#links}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:18:warning(var-in-script-tag):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:41:warning(var-in-script-tag):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:56:3:warning(var-in-script-tag):  {{/links}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:9:warning(var-in-href):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:12:warning(template-href-var):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:54:3:error(var-in-script-tag):  {{#links}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:18:error(var-in-script-tag):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:41:error(var-in-script-tag):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:56:3:error(var-in-script-tag):  {{/links}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-link-information.html:55:12:warning(template-href-var):    <li><a href="{{.}}" target="_blank">{{.}}</a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:54:3:warning(var-in-script-tag):  {{#metaTags}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:55:13:warning(var-in-script-tag):    <tr><td>{{name}}</td><td>{{content}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:55:30:warning(var-in-script-tag):    <tr><td>{{name}}</td><td>{{content}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:56:3:warning(var-in-script-tag):  {{/metaTags}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:54:3:error(var-in-script-tag):  {{#metaTags}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:55:13:error(var-in-script-tag):    <tr><td>{{name}}</td><td>{{content}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:55:30:error(var-in-script-tag):    <tr><td>{{name}}</td><td>{{content}}</td></tr>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/generated/view-meta-tag-information.html:56:3:error(var-in-script-tag):  {{/metaTags}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:323:9:warning(var-in-script-tag):    <td>{{description}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:324:9:warning(var-in-script-tag):    <td>{{width}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:325:9:warning(var-in-script-tag):    <td>{{height}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:326:9:warning(var-in-script-tag):    <td>{{keyboard}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:336:9:warning(var-in-script-tag):    <td>{{description}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:337:9:warning(var-in-script-tag):    <td>{{width}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:338:9:warning(var-in-script-tag):    <td>{{height}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:348:9:warning(var-in-script-tag):    <td>{{description}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:349:9:warning(var-in-script-tag):    <td>{{url}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:350:9:warning(var-in-script-tag):    <td>{{keyboard}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:323:9:error(var-in-script-tag):    <td>{{description}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:324:9:error(var-in-script-tag):    <td>{{width}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:325:9:error(var-in-script-tag):    <td>{{height}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:326:9:error(var-in-script-tag):    <td>{{keyboard}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:336:9:error(var-in-script-tag):    <td>{{description}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:337:9:error(var-in-script-tag):    <td>{{width}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:338:9:error(var-in-script-tag):    <td>{{height}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:348:9:error(var-in-script-tag):    <td>{{description}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:349:9:error(var-in-script-tag):    <td>{{url}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/options/options.html:350:9:error(var-in-script-tag):    <td>{{keyboard}}</td>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:395:9:warning(var-in-script-tag):  <span>{{hoverColor}}</span><span id="web-developer-color-picker-hover-color"></span><span id="web-developer-color-picker-hover-hex"></span><span>{{selectedColor}}</span><span id="web-developer-color-picker-selected-color"></span><span id="web-developer-color-picker-selected-hex"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:395:148:warning(var-in-script-tag):  <span>{{hoverColor}}</span><span id="web-developer-color-picker-hover-color"></span><span id="web-developer-color-picker-hover-hex"></span><span>{{selectedColor}}</span><span id="web-developer-color-picker-selected-color"></span><span id="web-developer-color-picker-selected-hex"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:395:329:warning(var-in-script-tag):  <span>{{hoverColor}}</span><span id="web-developer-color-picker-hover-color"></span><span id="web-developer-color-picker-hover-hex"></span><span>{{selectedColor}}</span><span id="web-developer-color-picker-selected-color"></span><span id="web-developer-color-picker-selected-hex"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:399:32:warning(var-in-script-tag):  <li><a href="#" data-height="{{height}}" data-width="{{width}}" class="custom-resize-window"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:399:56:warning(var-in-script-tag):  <li><a href="#" data-height="{{height}}" data-width="{{width}}" class="custom-resize-window"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:399:109:warning(var-in-script-tag):  <li><a href="#" data-height="{{height}}" data-width="{{width}}" class="custom-resize-window"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:403:29:warning(var-in-script-tag):  <li><a href="#" data-url="{{url}}" class="custom-tool"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:403:71:warning(var-in-script-tag):  <li><a href="#" data-url="{{url}}" class="custom-tool"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:43:warning(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:111:warning(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:191:warning(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:348:warning(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:465:warning(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:537:warning(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:42:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:137:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:200:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:277:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:346:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:419:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:519:warning(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:395:9:error(var-in-script-tag):  <span>{{hoverColor}}</span><span id="web-developer-color-picker-hover-color"></span><span id="web-developer-color-picker-hover-hex"></span><span>{{selectedColor}}</span><span id="web-developer-color-picker-selected-color"></span><span id="web-developer-color-picker-selected-hex"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:395:148:error(var-in-script-tag):  <span>{{hoverColor}}</span><span id="web-developer-color-picker-hover-color"></span><span id="web-developer-color-picker-hover-hex"></span><span>{{selectedColor}}</span><span id="web-developer-color-picker-selected-color"></span><span id="web-developer-color-picker-selected-hex"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:395:329:error(var-in-script-tag):  <span>{{hoverColor}}</span><span id="web-developer-color-picker-hover-color"></span><span id="web-developer-color-picker-hover-hex"></span><span>{{selectedColor}}</span><span id="web-developer-color-picker-selected-color"></span><span id="web-developer-color-picker-selected-hex"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:399:32:error(var-in-script-tag):  <li><a href="#" data-height="{{height}}" data-width="{{width}}" class="custom-resize-window"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:399:56:error(var-in-script-tag):  <li><a href="#" data-height="{{height}}" data-width="{{width}}" class="custom-resize-window"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:399:109:error(var-in-script-tag):  <li><a href="#" data-height="{{height}}" data-width="{{width}}" class="custom-resize-window"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:403:29:error(var-in-script-tag):  <li><a href="#" data-url="{{url}}" class="custom-tool"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:403:71:error(var-in-script-tag):  <li><a href="#" data-url="{{url}}" class="custom-tool"><span></span>{{description}}</a></li>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:43:error(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:111:error(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:191:error(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:348:error(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:465:error(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:407:537:error(var-in-script-tag):  <span id="line-guide-information"><span>{{positionLabel}}</span><span id="line-guide-position"></span><span>{{previousPosition}}</span><span id="previous-line-guide-position"></span><span>{{nextPosition}}</span><span id="next-line-guide-position"></span></span><button id="add-horizontal-line-guide" type="button" class="btn btn-sm btn-primary">{{addHorizontalLineGuide}}</button><button id="add-vertical-line-guide" type="button" class="btn btn-sm btn-primary">{{addVerticalLineGuide}}</button><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:42:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:137:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:200:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:277:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:346:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:419:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/overlay/overlay.html:411:519:error(var-in-script-tag):  <label for="web-developer-ruler-width">{{width}}</label><input id="web-developer-ruler-width"><label for="web-developer-ruler-height">{{height}}</label><input id="web-developer-ruler-height"><span>{{startPositionX}}</span><span id="web-developer-ruler-start-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-start-y"></span><span>{{endPositionX}}</span><span id="web-developer-ruler-end-x"></span><span>{{yLabel}}</span><span id="web-developer-ruler-end-y"></span><img width="16" height="16" alt=""><h1>{{title}}</h1>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/web-developer/source/common/html/validation/css.html:21:1:warning(django-no-csrf-token):<form id="form" action="https://jigsaw.w3.org/css-validator/validator" enctype="multipart/form-data" method="post" class="hidden">:Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
/home/codescan/web-developer/source/common/html/validation/html.html:21:1:warning(django-no-csrf-token):<form id="form" action="https://validator.w3.org/check" enctype="multipart/form-data" method="post" class="hidden">:Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
/home/codescan/web-developer/source/common/javascript/common/codemirror/codemirror.js:1224:11:error(insecure-document-method):          markerElement.innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/common/codemirror/searchcursor.js:14:34:warning(detect-non-literal-regexp):      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? "ig" : "g");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/common.js:80:5:error(insecure-document-method):    htmlElement.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/common/common.js:142:10:warning(detect-non-literal-regexp):  return new RegExp(endsWith + "$").test(string);:RegExp() called with a `endsWith` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:1268:4:error(insecure-document-method):			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:4817:5:error(insecure-document-method):				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:6164:8:error(insecure-document-method):							elem.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:10396:3:error(remote-property-injection):		jQuery.fn[ funcName ] = function( margin, value ) {:Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:1741:16:warning(detect-non-literal-regexp):				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&:RegExp() called with a `className` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:5150:5:warning(detect-non-literal-regexp):				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );:RegExp() called with a `types` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:8420:4:warning(detect-non-literal-regexp):			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) ::RegExp() called with a `event` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:1797:15:warning(prototype-pollution-loop):								while ( (node = node[ dir ]) ) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:2241:10:warning(prototype-pollution-loop):			while ( (elem = elem[ dir ]) ) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:2256:11:warning(prototype-pollution-loop):				while ( (elem = elem[ dir ]) ) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:2264:11:warning(prototype-pollution-loop):				while ( (elem = elem[ dir ]) ) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:2273:8:warning(prototype-pollution-loop):							elem = elem[ dir ] || elem;:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:2797:10:warning(prototype-pollution-loop):	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/jquery/jquery.js:3132:10:warning(prototype-pollution-loop):	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/common/mustache.js:156:22:warning(detect-non-literal-regexp):      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');:RegExp() called with a `tagsToCompile` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/mustache.js:157:22:warning(detect-non-literal-regexp):      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));:RegExp() called with a `tagsToCompile` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/mustache.js:158:24:warning(detect-non-literal-regexp):      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));:RegExp() called with a `tagsToCompile` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/web-developer/source/common/javascript/common/mustache.js:445:13:warning(prototype-pollution-loop):            intermediateValue = intermediateValue[names[index++]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/web-developer/source/common/javascript/dashboard/dashboard.js:52:3:error(insecure-document-method):  WebDeveloper.Common.getDocumentBodyElement(dashboardDocument).innerHTML = dashboardHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/dashboard/edit-css.js:172:3:error(insecure-document-method):  dashboardPanel.innerHTML = editCSSPanel;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/dashboard/element-information.js:472:7:error(insecure-document-method):      dashboardPanel.innerHTML = response.elementInformation;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/toolbar/color-picker.js:42:3:error(insecure-document-method):  WebDeveloper.Common.getDocumentBodyElement(WebDeveloper.ColorPicker.toolbarDocument).innerHTML = toolbarHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/toolbar/line-guides.js:131:3:error(insecure-document-method):  WebDeveloper.Common.getDocumentBodyElement(WebDeveloper.LineGuides.toolbarDocument).innerHTML = toolbarHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/web-developer/source/common/javascript/toolbar/ruler.js:110:3:error(insecure-document-method):  WebDeveloper.Common.getDocumentBodyElement(WebDeveloper.Ruler.toolbarDocument).innerHTML = toolbarHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
