data/tempCode/url-in-title/urlintitle/src/background.js:10:32:warning(detect-non-literal-regexp):          regexp => url.search(new RegExp(regexp)) >= 0);:RegExp() called with a `regexp` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/url-in-title/urlintitle/src/options_ui.js:19:5:error(insecure-document-method):    row.insertCell(-1).innerHTML = Title.TAGS[tag].description;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
