data/tempCode/web-maker/packages/website/_includes/default.html:36:3:warning(missing-integrity):		<link:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/web-maker/src/analytics.js:21:13:warning(detect-eval-with-expression):	setTimeout(function () {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
data/tempCode/web-maker/src/components/ContentWrap.jsx:84:3:warning(insufficient-postmessage-origin-validation):		window.addEventListener('message', e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/web-maker/src/components/ContentWrap.jsx:161:5:warning(wildcard-postmessage-configuration):				this.detachedWindow.postMessage({ contents }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/web-maker/src/components/ContentWrap.jsx:190:7:warning(wildcard-postmessage-configuration):						this.detachedWindow.postMessage({ url: src }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/web-maker/src/components/ContentWrapFiles.jsx:139:3:warning(insufficient-postmessage-origin-validation):		window.addEventListener('message', e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/web-maker/src/components/ContentWrapFiles.jsx:272:3:warning(wildcard-postmessage-configuration):		window.talkFrame.contentWindow.postMessage(obj, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/web-maker/src/components/ContentWrapFiles.jsx:276:4:warning(wildcard-postmessage-configuration):			this.detachedWindow.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/web-maker/src/components/ContentWrapFiles.jsx:571:4:warning(wildcard-postmessage-configuration):			this.frame.contentWindow.postMessage({ exprToEval: e.target.value }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/web-maker/src/components/LibraryAutoSuggest.jsx:73:7:error(insecure-document-method):						this.list.innerHTML += `<li data-url="${arr[i].latest}"><a>${:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/web-maker/src/detached-window.js:1:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/web-maker/src/detached-window.js:18:3:warning(wildcard-postmessage-configuration):		window.opener.postMessage(e.data, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/web-maker/src/firebaseInit.js:4:2:error(detected-generic-api-key):	apiKey: 'AIzaSyBl8Dz7ZOE7aP75mipYl2zKdLSRzBU2fFc',:Generic API Key detected
data/tempCode/web-maker/src/index.html:80:9:warning(var-in-script-src):			src="<%= htmlWebpackPlugin.files.chunks['bundle'].entry %>":Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.
data/tempCode/web-maker/src/lib/codemirror/addon/dialog/dialog.js:24:7:error(insecure-document-method):      dialog.innerHTML = template;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/web-maker/src/lib/codemirror/addon/hint/anyword-hint.js:25:14:warning(detect-non-literal-regexp):    var re = new RegExp(word.source, "g");:RegExp() called with a `options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/addon/mode/simple.js:75:12:warning(detect-non-literal-regexp):    return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);:RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/addon/search/match-highlighter.js:74:37:warning(detect-non-literal-regexp):      var searchFor = hasBoundary ? new RegExp("\\b" + query + "\\b") : query;:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/addon/search/search.js:24:15:warning(detect-non-literal-regexp):      query = new RegExp(query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), caseInsensitive ? "gi" : "g");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/addon/search/search.js:26:15:warning(detect-non-literal-regexp):      query = new RegExp(query.source, query.ignoreCase ? "gi" : "g");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/addon/search/search.js:90:21:warning(detect-non-literal-regexp):      try { query = new RegExp(isRE[1], isRE[2].indexOf("i") == -1 ? "" : "i"); }:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/addon/search/searchcursor.js:27:34:warning(detect-non-literal-regexp):      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? "ig" : "g");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/keymap/sublime.js:150:30:warning(detect-non-literal-regexp):      var query = fullWord ? new RegExp("\\b" + text + "\\b") : text;:RegExp() called with a `cm` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/coffeescript/coffeescript.js:22:12:warning(detect-non-literal-regexp):    return new RegExp("^((" + words.join(")|(") + "))\\b");:RegExp() called with a `words` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/css/gss.html:15:3:warning(plaintext-http-link):  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/web-maker/src/lib/codemirror/mode/css/less.html:13:3:warning(plaintext-http-link):  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/web-maker/src/lib/codemirror/mode/css/scss.html:12:3:warning(plaintext-http-link):  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/web-maker/src/lib/codemirror/mode/htmlmixed/htmlmixed.js:44:36:warning(detect-non-literal-regexp):    return attrRegexpCache[attr] = new RegExp("\\s+" + attr + "\\s*=\\s*('|\")?([^'\"]+)('|\")?\\s*");:RegExp() called with a `attr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/htmlmixed/htmlmixed.js:53:12:warning(detect-non-literal-regexp):    return new RegExp((anchored ? "^" : "") + "<\/\s*" + tagName + "\s*>", "i");:RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/javascript/json-ld.html:15:3:warning(plaintext-http-link):  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"/></a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/web-maker/src/lib/codemirror/mode/javascript/typescript.html:12:3:warning(plaintext-http-link):  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/web-maker/src/lib/codemirror/mode/markdown/markdown.js:90:22:warning(detect-non-literal-regexp):  ,   fencedCodeRE = new RegExp("^(" + (modeCfg.fencedCodeBlocks === true ? "~~~+|```+" : modeCfg.fencedCodeBlocks) +:RegExp() called with a `modeCfg` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/markdown/markdown.js:399:24:warning(detect-non-literal-regexp):      if (stream.match(new RegExp(regex), true)) {:RegExp() called with a `stream` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/sass/sass.js:16:12:warning(detect-non-literal-regexp):    return new RegExp("^" + words.join("|"));:RegExp() called with a `words` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/stylus/stylus.js:285:50:warning(detect-non-literal-regexp):      return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));:RegExp() called with a `stream` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/stylus/stylus.js:400:35:warning(detect-non-literal-regexp):          if (stream.string.match(new RegExp("\\[\\s*" + word + "|" + word +"\\s*\\]"))) {:RegExp() called with a `stream` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/codemirror/mode/stylus/stylus.js:754:12:warning(detect-non-literal-regexp):    return new RegExp("^((" + words.join(")|(") + "))\\b");:RegExp() called with a `words` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/web-maker/src/lib/screenlog.js:268:16:warning(eval-detected):		var result = eval(expr);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/web-maker/src/lib/screenlog.js:275:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/web-maker/src/lib/screenlog.js:69:2:warning(wildcard-postmessage-configuration):	mainWindow.postMessage({ logs: sanitizedArgs }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
