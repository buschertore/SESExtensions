data/tempCode/growthbook-devtools/.docker-compose-okteto.yml:3:3:warning(no-new-privileges):  mongo::Service 'mongo' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
data/tempCode/growthbook-devtools/.docker-compose-okteto.yml:3:3:warning(writable-filesystem-service):  mongo::Service 'mongo' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.
data/tempCode/growthbook-devtools/docker-compose.proxy.yml:3:3:warning(no-new-privileges):  mongo::Service 'mongo' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
data/tempCode/growthbook-devtools/docker-compose.proxy.yml:9:3:warning(no-new-privileges):  growthbook::Service 'growthbook' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
data/tempCode/growthbook-devtools/docker-compose.proxy.yml:27:3:warning(no-new-privileges):  proxy::Service 'proxy' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
data/tempCode/growthbook-devtools/docker-compose.proxy.yml:3:3:warning(writable-filesystem-service):  mongo::Service 'mongo' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.
data/tempCode/growthbook-devtools/docker-compose.proxy.yml:9:3:warning(writable-filesystem-service):  growthbook::Service 'growthbook' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.
data/tempCode/growthbook-devtools/docker-compose.proxy.yml:27:3:warning(writable-filesystem-service):  proxy::Service 'proxy' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.
data/tempCode/growthbook-devtools/docker-compose.yml:3:3:warning(no-new-privileges):  mongo::Service 'mongo' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
data/tempCode/growthbook-devtools/docker-compose.yml:10:3:warning(no-new-privileges):  growthbook::Service 'growthbook' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
data/tempCode/growthbook-devtools/docker-compose.yml:3:3:warning(writable-filesystem-service):  mongo::Service 'mongo' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.
data/tempCode/growthbook-devtools/docker-compose.yml:10:3:warning(writable-filesystem-service):  growthbook::Service 'growthbook' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.
data/tempCode/growthbook-devtools/docs/docusaurus.config.js:201:9:error(detected-generic-api-key):        apiKey: "43a7bc1b7a1494649e79a9fa7c3376be",:Generic API Key detected
data/tempCode/growthbook-devtools/packages/back-end/src/controllers/experiments.ts:1324:3:error(remote-property-injection):  phases[i] = {:Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
data/tempCode/growthbook-devtools/packages/back-end/src/controllers/features.ts:1081:5:error(remote-property-injection):    changes.rules[env] =:Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
data/tempCode/growthbook-devtools/packages/back-end/src/controllers/features.ts:1088:5:error(remote-property-injection):    updates.environmentSettings[env] = updates.environmentSettings[env] || {:Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
data/tempCode/growthbook-devtools/packages/back-end/src/controllers/metrics.ts:530:7:error(remote-property-injection):      (updates as any)[k] = req.body[k];:Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
data/tempCode/growthbook-devtools/packages/back-end/src/integrations/Mysql.ts:43:37:warning(node-mysql-sqli):    const [rows] = await conn.query(sql);:Detected a `mysql2/promise` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
data/tempCode/growthbook-devtools/packages/back-end/src/integrations/Mysql.ts:43:37:warning(node-mysql-sqli):    const [rows] = await conn.query(sql);:Detected a `mysql2` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
data/tempCode/growthbook-devtools/packages/back-end/src/models/OrganizationModel.ts:206:17:warning(detect-non-literal-regexp):  const regex = new RegExp(search, "i");:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/back-end/src/services/datasource.ts:56:5:error(remote-property-injection):    integration.params[k] = newParams[k];:Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
data/tempCode/growthbook-devtools/packages/back-end/src/services/postgres.ts:14:13:warning(bypass-tls-verification):      ssl = {:Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.
data/tempCode/growthbook-devtools/packages/back-end/src/templates/javascript.js:6:869:error(insecure-document-method):var t=/^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/,e={revert:function(){}},n=new Map,r=new Set;function u(t){var e=n.get(t);return e||(e={el:t,attributes:{}},n.set(t,e)),e}function i(t,e,n,r,u){var i=n(t),a={isDirty:!1,originalValue:i,virtualValue:i,mutations:[],el:t,observer:new MutationObserver((function(){var e=n(t);e!==a.virtualValue&&(a.originalValue=e,u(a))})),runMutations:u,setValue:r,getCurrentValue:n};return a.observer.observe(t,function(t){return"html"===t?{childList:!0,subtree:!0,attributes:!0,characterData:!0}:{childList:!1,subtree:!1,attributes:!0,attributeFilter:[t]}}(e)),a}function a(t){var e=t.originalValue;return t.mutations.forEach((function(t){return e=t.mutate(e)})),e}function s(t,e){var n=e.getCurrentValue(e.el);e.virtualValue=t,t!==n&&(e.isDirty=!0,V||(V=!0,requestAnimationFrame(k)))}function o(t){s(function(t){v||(v=document.createElement("div"));return v.innerHTML=t,v.innerHTML}(a(t)),t)}function l(t){var e=function(t,e){return e.mutations.forEach((function(e){return e.mutate(t)})),t}(new Set(t.originalValue.split(/\s+/).filter(Boolean)),t);s(Array.from(e).filter(Boolean).join(" "),t)}function c(t){s(a(t),t)}var f=function(t){return t.innerHTML},m=function(t,e){return t.innerHTML=e};function d(t){var e=u(t);return e.html||(e.html=i(t,"html",f,m,o)),e.html}var v,b=function(t,e){return e?t.className=e:t.removeAttribute("class")},h=function(t){return t.className};function p(t){var e=u(t);return e.classes||(e.classes=i(t,"class",h,b,l)),e.classes}function M(t,e){var n=u(t);return n.attributes[e]||(n.attributes[e]=i(t,e,(function(t){return t.getAttribute(e)||""}),(function(t,n){return n?t.setAttribute(e,n):t.removeAttribute(e)}),c)),n.attributes[e]}function w(t,e,r){if(r.isDirty){r.isDirty=!1;var u=r.virtualValue;r.mutations.length||function(t,e){var r,u,i=n.get(t);if(i)if("html"===e)null==(r=i.html)||null==(u=r.observer)||u.disconnect(),delete i.html;else if("class"===e){var a,s;null==(a=i.classes)||null==(s=a.observer)||s.disconnect(),delete i.classes}else{var o,l,c;null==(o=i.attributes)||null==(l=o[e])||null==(c=l.observer)||c.disconnect(),delete i.attributes[e]}}(t,e),r.setValue(t,u)}}var y,V=!1;function g(t,e){t.html&&w(e,"html",t.html),t.classes&&w(e,"class",t.classes),Object.keys(t.attributes).forEach((function(n){w(e,n,t.attributes[n])}))}function k(){V=!1,n.forEach(g)}function A(t,e){if(t.elements.delete(e),"html"===t.kind){var n=d(e),r=n.mutations.indexOf(t);-1!==r&&n.mutations.splice(r,1),n.runMutations(n)}else if("class"===t.kind){var u=p(e),i=u.mutations.indexOf(t);-1!==i&&u.mutations.splice(i,1),u.runMutations(u)}else if("attribute"===t.kind){var a=M(e,t.attribute),s=a.mutations.indexOf(t);-1!==s&&a.mutations.splice(s,1),a.runMutations(a)}}function E(t){var e=new Set(t.elements),n=new Set;document.querySelectorAll(t.selector).forEach((function(r){n.add(r),e.has(r)||function(t,e){if(t.elements.add(e),"html"===t.kind){var n=d(e);n.mutations.push(t),n.runMutations(n)}else if("class"===t.kind){var r=p(e);r.mutations.push(t),r.runMutations(r)}else if("attribute"===t.kind){var u=M(e,t.attribute);u.mutations.push(t),u.runMutations(u)}}(t,r)})),e.forEach((function(e){n.has(e)||A(t,e)}))}function S(){r.forEach(E)}function L(t){return"undefined"==typeof document?e:(r.add(t),E(t),{revert:function(){var e;e=t,new Set(e.elements).forEach((function(t){A(e,t)})),e.elements.clear(),r.delete(e)}})}function D(t,e){return L({kind:"html",elements:new Set,mutate:e,selector:t})}function O(t,e){return L({kind:"class",elements:new Set,mutate:e,selector:t})}function H(n,r,u){return t.test(r)?L("class"===r||"className"===r?{kind:"class",elements:new Set,mutate:function(t){var e=u(Array.from(t).join(" "));t.clear(),e.split(/\s+/g).filter(Boolean).forEach((function(e){t.add(e)}))},selector:n}:{kind:"attribute",attribute:r,elements:new Set,mutate:u,selector:n}):e}return"undefined"!=typeof document&&(y||(y=new MutationObserver((function(){S()}))),S(),y.observe(document.documentElement,{childList:!0,subtree:!0,attributes:!1,characterData:!1})),{html:D,classes:O,attribute:H,declarative:function(t){var n=t.selector,r=t.action,u=t.value,i=t.attribute;if("html"===i){if("append"===r)return D(n,(function(t){return t+u}));if("set"===r)return D(n,(function(){return u}))}else if("class"===i){if("append"===r)return O(n,(function(t){return t.add(u)}));if("remove"===r)return O(n,(function(t){return t.delete(u)}));if("set"===r)return O(n,(function(t){t.clear(),t.add(u)}))}else{if("append"===r)return H(n,i,(function(t){return t+u}));if("set"===r)return H(n,i,(function(){return u}))}return e}}:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/growthbook-devtools/packages/back-end/src/templates/javascript.js:6:1191:error(insecure-document-method):var t=/^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/,e={revert:function(){}},n=new Map,r=new Set;function u(t){var e=n.get(t);return e||(e={el:t,attributes:{}},n.set(t,e)),e}function i(t,e,n,r,u){var i=n(t),a={isDirty:!1,originalValue:i,virtualValue:i,mutations:[],el:t,observer:new MutationObserver((function(){var e=n(t);e!==a.virtualValue&&(a.originalValue=e,u(a))})),runMutations:u,setValue:r,getCurrentValue:n};return a.observer.observe(t,function(t){return"html"===t?{childList:!0,subtree:!0,attributes:!0,characterData:!0}:{childList:!1,subtree:!1,attributes:!0,attributeFilter:[t]}}(e)),a}function a(t){var e=t.originalValue;return t.mutations.forEach((function(t){return e=t.mutate(e)})),e}function s(t,e){var n=e.getCurrentValue(e.el);e.virtualValue=t,t!==n&&(e.isDirty=!0,V||(V=!0,requestAnimationFrame(k)))}function o(t){s(function(t){v||(v=document.createElement("div"));return v.innerHTML=t,v.innerHTML}(a(t)),t)}function l(t){var e=function(t,e){return e.mutations.forEach((function(e){return e.mutate(t)})),t}(new Set(t.originalValue.split(/\s+/).filter(Boolean)),t);s(Array.from(e).filter(Boolean).join(" "),t)}function c(t){s(a(t),t)}var f=function(t){return t.innerHTML},m=function(t,e){return t.innerHTML=e};function d(t){var e=u(t);return e.html||(e.html=i(t,"html",f,m,o)),e.html}var v,b=function(t,e){return e?t.className=e:t.removeAttribute("class")},h=function(t){return t.className};function p(t){var e=u(t);return e.classes||(e.classes=i(t,"class",h,b,l)),e.classes}function M(t,e){var n=u(t);return n.attributes[e]||(n.attributes[e]=i(t,e,(function(t){return t.getAttribute(e)||""}),(function(t,n){return n?t.setAttribute(e,n):t.removeAttribute(e)}),c)),n.attributes[e]}function w(t,e,r){if(r.isDirty){r.isDirty=!1;var u=r.virtualValue;r.mutations.length||function(t,e){var r,u,i=n.get(t);if(i)if("html"===e)null==(r=i.html)||null==(u=r.observer)||u.disconnect(),delete i.html;else if("class"===e){var a,s;null==(a=i.classes)||null==(s=a.observer)||s.disconnect(),delete i.classes}else{var o,l,c;null==(o=i.attributes)||null==(l=o[e])||null==(c=l.observer)||c.disconnect(),delete i.attributes[e]}}(t,e),r.setValue(t,u)}}var y,V=!1;function g(t,e){t.html&&w(e,"html",t.html),t.classes&&w(e,"class",t.classes),Object.keys(t.attributes).forEach((function(n){w(e,n,t.attributes[n])}))}function k(){V=!1,n.forEach(g)}function A(t,e){if(t.elements.delete(e),"html"===t.kind){var n=d(e),r=n.mutations.indexOf(t);-1!==r&&n.mutations.splice(r,1),n.runMutations(n)}else if("class"===t.kind){var u=p(e),i=u.mutations.indexOf(t);-1!==i&&u.mutations.splice(i,1),u.runMutations(u)}else if("attribute"===t.kind){var a=M(e,t.attribute),s=a.mutations.indexOf(t);-1!==s&&a.mutations.splice(s,1),a.runMutations(a)}}function E(t){var e=new Set(t.elements),n=new Set;document.querySelectorAll(t.selector).forEach((function(r){n.add(r),e.has(r)||function(t,e){if(t.elements.add(e),"html"===t.kind){var n=d(e);n.mutations.push(t),n.runMutations(n)}else if("class"===t.kind){var r=p(e);r.mutations.push(t),r.runMutations(r)}else if("attribute"===t.kind){var u=M(e,t.attribute);u.mutations.push(t),u.runMutations(u)}}(t,r)})),e.forEach((function(e){n.has(e)||A(t,e)}))}function S(){r.forEach(E)}function L(t){return"undefined"==typeof document?e:(r.add(t),E(t),{revert:function(){var e;e=t,new Set(e.elements).forEach((function(t){A(e,t)})),e.elements.clear(),r.delete(e)}})}function D(t,e){return L({kind:"html",elements:new Set,mutate:e,selector:t})}function O(t,e){return L({kind:"class",elements:new Set,mutate:e,selector:t})}function H(n,r,u){return t.test(r)?L("class"===r||"className"===r?{kind:"class",elements:new Set,mutate:function(t){var e=u(Array.from(t).join(" "));t.clear(),e.split(/\s+/g).filter(Boolean).forEach((function(e){t.add(e)}))},selector:n}:{kind:"attribute",attribute:r,elements:new Set,mutate:u,selector:n}):e}return"undefined"!=typeof document&&(y||(y=new MutationObserver((function(){S()}))),S(),y.observe(document.documentElement,{childList:!0,subtree:!0,attributes:!1,characterData:!1})),{html:D,classes:O,attribute:H,declarative:function(t){var n=t.selector,r=t.action,u=t.value,i=t.attribute;if("html"===i){if("append"===r)return D(n,(function(t){return t+u}));if("set"===r)return D(n,(function(){return u}))}else if("class"===i){if("append"===r)return O(n,(function(t){return t.add(u)}));if("remove"===r)return O(n,(function(t){return t.delete(u)}));if("set"===r)return O(n,(function(t){t.clear(),t.add(u)}))}else{if("append"===r)return H(n,i,(function(t){return t+u}));if("set"===r)return H(n,i,(function(){return u}))}return e}}:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/growthbook-devtools/packages/back-end/src/templates/javascript.js:9:61:error(insecure-document-method):,injectStyles=(css)=>{var s=document.createElement("style");s.innerHTML=css;document.head.appendChild(s); return function(){s.remove();}}:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/growthbook-devtools/packages/back-end/src/templates/javascript.js:12:44:warning(detect-non-literal-regexp):,qaForce=(k)=>{let m=location.search.match(new RegExp('[&?]'+k+'=([0-9])\\b'));return m?parseInt(m[1]):-1}:RegExp() called with a `k` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/back-end/src/templates/javascript.js:14:125:warning(detect-non-literal-regexp):,included=(o,g)=>{g=conf('groups')||[];if(o.g&&!o.g.filter((n)=>g.includes(n)).length)return 0;if(o.u&&!location.href.match(new RegExp(o.u)))return 0;return 1}:RegExp() called with a `o` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/back-end/src/util/handlebarsHelpers.ts:173:22:warning(detect-non-literal-regexp):  return str.replace(new RegExp(pattern, "g"), replacement);:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/back-end/src/util/sql.ts:60:20:warning(detect-non-literal-regexp):  return sql.match(new RegExp(`{{[^}]*${variableName}`, "g"));:RegExp() called with a `variableName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/front-end/components/Auth/InAppHelp.tsx:22:7:error(insecure-document-method):      scriptElement.innerHTML = config.script_content;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/growthbook-devtools/packages/front-end/components/SyntaxHighlighting/Snippets/TargetingAttributeCodeSnippet.tsx:43:7:warning(prototype-pollution-loop):      current = current[parts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/growthbook-devtools/packages/sdk-js/src/GrowthBook.ts:1501:7:error(insecure-document-method):      s.innerHTML = changes.css;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/growthbook-devtools/packages/sdk-js/src/GrowthBook.ts:1507:7:error(insecure-document-method):      script.innerHTML = changes.js;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/growthbook-devtools/packages/sdk-js/src/auto-wrapper.ts:206:13:warning(detect-eval-with-expression):setInterval(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
data/tempCode/growthbook-devtools/packages/sdk-js/src/mongrule.ts:58:26:warning(detect-non-literal-regexp):    _regexCache[regex] = new RegExp(regex.replace(/([^\\])\//g, "$1\\/"));:RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/sdk-js/src/mongrule.ts:47:7:warning(prototype-pollution-loop):      current = current[parts[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/growthbook-devtools/packages/sdk-js/src/util.ts:63:12:warning(detect-non-literal-regexp):    return new RegExp(escaped);:RegExp() called with a `regexString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/growthbook-devtools/packages/sdk-js/src/util.ts:104:19:warning(detect-non-literal-regexp):    const regex = new RegExp("^" + escaped + "$", "i");:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
