data/tempCode/screenity-screen-recorder/src/assets/selfieSegmentation/selfie_segmentation.js:7:387:warning(prototype-pollution-loop):function ca(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var y=ca(this);function z(a,b){if(b)a:{var c=y;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/screenity-screen-recorder/src/assets/selfieSegmentation/selfie_segmentation.js:51:79:warning(prototype-pollution-loop):function ic(a,b,c){for(;ub(b)&&4!=b.i;){var d=b.l,e=c[d];if(!e){var g=c[0];g&&(g=g[d])&&(e=c[d]=kc(g))}if(!e||!e(b,a,d)){e=b;d=a;g=e.j;vb(e);var f=e;if(!f.ca){e=f.h.h-g;f.h.h=g;f=f.h;if(0==e)e=jb();else{g=pb(f,e);if(f.S&&f.m)e=f.i.subarray(g,g+e);else{f=f.i;var h=g;e=g+e;e=h===e?Pa():Ra?f.slice(h,e):new Uint8Array(f.subarray(h,e))}e=0==e.length?jb():new ib(e,Qa)}(g=d.R)?g.push(e):d.R=[e]}}}return a}:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/screenity-screen-recorder/src/assets/selfieSegmentation.js:13:387:warning(prototype-pollution-loop):function ca(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var y=ca(this);function z(a,b){if(b)a:{var c=y;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/screenity-screen-recorder/src/assets/selfieSegmentation.js:57:79:warning(prototype-pollution-loop):function ic(a,b,c){for(;ub(b)&&4!=b.i;){var d=b.l,e=c[d];if(!e){var g=c[0];g&&(g=g[d])&&(e=c[d]=kc(g))}if(!e||!e(b,a,d)){e=b;d=a;g=e.j;vb(e);var f=e;if(!f.ca){e=f.h.h-g;f.h.h=g;f=f.h;if(0==e)e=jb();else{g=pb(f,e);if(f.S&&f.m)e=f.i.subarray(g,g+e);else{f=f.i;var h=g;e=g+e;e=h===e?Pa():Ra?f.slice(h,e):new Uint8Array(f.subarray(h,e))}e=0==e.length?jb():new ib(e,Qa)}(g=d.R)?g.push(e):d.R=[e]}}}return a}:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/screenity-screen-recorder/src/pages/Background/index.js:403:11:info(unsafe-formatstring):          `Sending batch failed, retrying... Attempt ${retryCount + 1}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/screenity-screen-recorder/src/pages/Backup/index.html:42:10:warning(missing-integrity):    <!-- <script src="chrome-extension://__MSG_@@extension_id__/assets/vendor/ffmpeg-core.js"></script> -->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/screenity-screen-recorder/src/pages/Content/Wrapper.jsx:68:5:warning(wildcard-postmessage-configuration):    permissionsRef.current.contentWindow.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Content/context/ContentState.jsx:576:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", handleMessage);:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/screenity-screen-recorder/src/pages/Content/context/ContentState.jsx:82:9:warning(wildcard-postmessage-configuration):        contentStateRef.current.regionCaptureRef.contentWindow.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Content/context/ContentState.jsx:278:13:warning(wildcard-postmessage-configuration):            contentStateRef.current.regionCaptureRef.contentWindow.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Download/index.html:11:10:warning(missing-integrity):    <!-- <script src="chrome-extension://__MSG_@@extension_id__/assets/vendor/ffmpeg-core.js"></script> -->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/screenity-screen-recorder/src/pages/Editor/Sandbox.jsx:240:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", (event) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/screenity-screen-recorder/src/pages/Editor/Sandbox.jsx:25:5:warning(wildcard-postmessage-configuration):    iframeRef.current.contentWindow.postMessage(message, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Editor/index.html:11:10:warning(missing-integrity):    <!-- <script src="chrome-extension://__MSG_@@extension_id__/assets/vendor/ffmpeg-core.js"></script> -->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/screenity-screen-recorder/src/pages/EditorFallback/Sandbox.jsx:200:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", (event) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/screenity-screen-recorder/src/pages/EditorFallback/Sandbox.jsx:24:5:warning(wildcard-postmessage-configuration):    iframeRef.current.contentWindow.postMessage(message, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/EditorFallback/index.html:11:10:warning(missing-integrity):    <!-- <script src="chrome-extension://__MSG_@@extension_id__/assets/vendor/ffmpeg-core.js"></script> -->:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/screenity-screen-recorder/src/pages/Permissions/Permissions.jsx:151:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", (event) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/screenity-screen-recorder/src/pages/Permissions/Permissions.jsx:5:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Permissions/Permissions.jsx:42:9:warning(wildcard-postmessage-configuration):        window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Permissions/Permissions.jsx:110:7:warning(wildcard-postmessage-configuration):      window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Permissions/Permissions.jsx:131:7:warning(wildcard-postmessage-configuration):      window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Region/Recorder.jsx:76:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", (event) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/screenity-screen-recorder/src/pages/Region/Recorder.jsx:58:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/screenity-screen-recorder/src/pages/Sandbox/components/player/VideoPlayer.jsx:139:11:error(insecure-document-method):          bannerRef.current.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/screenity-screen-recorder/src/pages/Sandbox/context/ContentState.jsx:612:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", (event) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/screenity-screen-recorder/src/pages/Sandbox/context/ContentState.jsx:624:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(message, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
