data/tempCode/health-and-fitness/js/externalLib/pikaday.js:896:13:error(insecure-document-method):            this.el.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:2284:3:error(insecure-document-method):		fixture.innerHTML = config.fixture;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:2653:2:error(insecure-document-method):	urlConfigContainer.innerHTML = getUrlConfigHtml();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:2740:2:error(insecure-document-method):	dropDownList.innerHTML = moduleListHtml();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:2854:3:error(insecure-document-method):		header.innerHTML = "<a href='" + escapeText( unfilteredUrl ) + "'>" + header.innerHTML +:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:2914:3:error(insecure-document-method):		qunit.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:2953:2:error(insecure-document-method):	title.innerHTML = getNameHtml( name, moduleName );:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:3018:3:error(insecure-document-method):		id( "qunit-testresult" ).innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:3076:3:error(insecure-document-method):		running.innerHTML = ( bad ?:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:3171:2:error(insecure-document-method):	assertLi.innerHTML = message;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:3221:2:error(insecure-document-method):	testTitle.innerHTML += " <b class='counts'>(" + testCounts +:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:3239:3:error(insecure-document-method):		time.innerHTML = details.runtime + " ms";:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:3246:3:error(insecure-document-method):		sourceName.innerHTML = "<strong>Source: </strong>" + details.source;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:1037:15:warning(detect-non-literal-regexp):		var regex = new RegExp( pattern, flags );:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/health-and-fitness/js/externalLib/qunit-2.0.1.js:1037:15:warning(detect-non-literal-regexp):		var regex = new RegExp( pattern, flags );:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
