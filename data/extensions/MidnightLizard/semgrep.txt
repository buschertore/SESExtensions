/home/codescan/Midnight-Lizard/Dockerfile:6:1:error(missing-user-entrypoint):ENTRYPOINT npm run prod-pack:By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.
/home/codescan/Midnight-Lizard/ts/ContentScript/DocumentProcessor.ts:2015:83:warning(detect-non-literal-regexp):                                            newTextShadow = newTextShadow.replace(new RegExp(escapeRegex(c), "gi"), newColor.color);:RegExp() called with a `c` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/ContentScript/DocumentProcessor.ts:2380:45:warning(detect-non-literal-regexp):                    backgroundImage.replace(new RegExp(escapeRegex(color), "g"), id));:RegExp() called with a `color` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/ContentScript/DocumentProcessor.ts:2387:77:warning(detect-non-literal-regexp):                gradientColors.forEach((id, color) => bgImg = bgImg.replace(new RegExp(id, "g"), color));:RegExp() called with a `id` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/ContentScript/DocumentProcessor.ts:2449:49:warning(detect-non-literal-regexp):                    gradient = gradient.replace(new RegExp(escapeRegex(c), "gi"),:RegExp() called with a `c` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/ContentScript/DocumentProcessor.ts:2223:59:warning(incomplete-sanitization):            [tag.mlComputedStyle.getPropertyValue(`--ml-${cc[component].replace("$", "-").toLowerCase()}-${property}`)];:`cc[component].replace` method will only replace the first occurrence when used with a string argument ("$"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/Midnight-Lizard/ts/ContentScript/DocumentProcessor.ts:2651:21:warning(incomplete-sanitization):                    component.replace("$", "").replace(/([A-Z])/g, "-$1"):`component.replace` method will only replace the first occurrence when used with a string argument ("$"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/Midnight-Lizard/ts/ContentScript/StyleSheetProcessor.ts:571:16:warning(detect-non-literal-regexp):        return new RegExp(x.remember(x.outOfSet(x.LeftParenthesis, x.WhiteSpace)) +:RegExp() called with a `pseudoClass` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/Settings/MatchPatternProcessor.ts:109:20:warning(detect-non-literal-regexp):            return new RegExp(regex, "i");:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/Utils/RegExp.ts:55:65:warning(detect-non-literal-regexp):    vars.forEach((varValue, varName) => result = result.replace(RegExp(escape($var(varName)), "g"), varValue));:RegExp() called with a `varName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/Utils/String.ts:9:24:warning(detect-non-literal-regexp):    return str.replace(new RegExp("^[" + characters + "]+|[" + characters + "]+$", flags), '');:RegExp() called with a `characters` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/Utils/String.ts:9:24:warning(detect-non-literal-regexp):    return str.replace(new RegExp("^[" + characters + "]+|[" + characters + "]+$", flags), '');:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Midnight-Lizard/ts/i18n/DocumentTranslator.ts:59:21:error(insecure-document-method):                    tag.innerHTML = htmlMsg;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
