/home/codescan/Timetable/scripts/import-subject.php:10:27:warning(tainted-filename):$html = file_get_contents("https://qutvirtual3.qut.edu.au/qvpublic/ttab_unit_search_p." . $url);:File name based on user input risks server-side request forgery.
/home/codescan/Timetable/scripts/import-subject.php:12:1:warning(php-permissive-cors):header('Access-Control-Allow-Origin: *');:Access-Control-Allow-Origin response header is set to "*". This will disable CORS Same Origin Policy restrictions.
/home/codescan/Timetable/scripts/import-subject.php:15:1:warning(taint-unsafe-echo-tag):echo json_encode([:Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.
/home/codescan/Timetable/scripts/semesters.php:10:27:warning(tainted-filename):$html = file_get_contents("https://qutvirtual3.qut.edu.au/qvpublic/ttab_unit_search_p." . $url);:File name based on user input risks server-side request forgery.
/home/codescan/Timetable/scripts/semesters.php:27:15:error(tainted-sql-string):    'html' => $start . $html . $end:User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.
/home/codescan/Timetable/scripts/semesters.php:21:1:warning(php-permissive-cors):header('Access-Control-Allow-Origin: *');:Access-Control-Allow-Origin response header is set to "*". This will disable CORS Same Origin Policy restrictions.
/home/codescan/Timetable/scripts/semesters.php:25:1:warning(taint-unsafe-echo-tag):echo json_encode([:Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.
