data/tempCode/duckduckgo-privacy-essent/.github/workflows/stage.yml:23:9:error(run-shell-injection):        run: |:Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".
data/tempCode/duckduckgo-privacy-essent/.github/workflows/stage.yml:36:9:error(run-shell-injection):        run: |:Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".
data/tempCode/duckduckgo-privacy-essent/integration-test/fingerprint-randomization.spec.js:32:95:warning(path-join-resolve-traversal):                const data = await fs.promises.readFile(path.join(__dirname, 'data', 'pages', url.pathname)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/gpc.spec.js:25:87:warning(path-join-resolve-traversal):        const data = await fs.promises.readFile(path.join(__dirname, 'data', 'pages', url.pathname)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/apiSchema.js:29:66:warning(eval-detected):    const targetObjectHandle = await page.evaluateHandle(name => eval(name), targetObjectName):Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/apiSchema.js:99:54:warning(path-join-resolve-traversal):        __dirname, '..', 'artifacts', 'api_schemas', schemaFilename:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/apiSchema.js:102:49:warning(path-join-resolve-traversal):        __dirname, '..', 'data', 'api_schemas', schemaFilename:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/playwrightHarness.js:11:47:warning(path-join-resolve-traversal):    return path.join(testRoot, 'data', 'har', harFile):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/playwrightHarness.js:20:64:warning(path-join-resolve-traversal):    const localPath = path.join(testRoot, 'data', 'staticcdn', url.pathname):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/testConfig.js:11:45:warning(path-join-resolve-traversal):        __dirname, '..', 'data', 'configs', testConfigFilename:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/testConfig.js:17:75:warning(path-join-resolve-traversal):        const localPath = path.join(__dirname, '..', 'data', 'staticcdn', url.pathname):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/testConfig.js:48:83:warning(path-join-resolve-traversal):        const tds = await fs.promises.readFile(path.join(__dirname, '..', 'data', tdsFilePath), 'utf-8'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/integration-test/helpers/testConfig.js:27:17:warning(prototype-pollution-loop):                target = target[p]:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/duckduckgo-privacy-essent/packages/ddg2dnr/puppeteerInterface.js:59:22:warning(puppeteer-evaluate-arg-injection):        return await this.backgroundWorker?.evaluate(options =>:If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
data/tempCode/duckduckgo-privacy-essent/packages/ddg2dnr/puppeteerInterface.js:78:15:warning(puppeteer-evaluate-arg-injection):        await this.backgroundWorker?.evaluate(async addRules => {:If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
data/tempCode/duckduckgo-privacy-essent/packages/ddg2dnr/puppeteerInterface.js:101:15:warning(puppeteer-evaluate-arg-injection):        await this.backgroundWorker?.evaluate(async removeRules => {:If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
data/tempCode/duckduckgo-privacy-essent/packages/ddg2dnr/puppeteerInterface.js:164:22:warning(puppeteer-evaluate-arg-injection):        return await this.backgroundWorker.evaluate(:If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
data/tempCode/duckduckgo-privacy-essent/packages/privacy-grade/src/classes/trackers.js:119:48:warning(detect-non-literal-regexp):                    data[name].rules[i].rule = new RegExp(data[name].rules[i].rule, 'ig'):RegExp() called with a `data` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/duckduckgo-privacy-essent/scripts/asana-release.js:16:30:warning(path-join-resolve-traversal):    const folder = path.join(...pathParts):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/scripts/asana-release.js:18:22:warning(path-join-resolve-traversal):    return path.join(folder, filename):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/scripts/asana-release.js:18:30:warning(path-join-resolve-traversal):    return path.join(folder, filename):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/scripts/bundleLocales.mjs:10:61:warning(path-join-resolve-traversal):    const namespaces = fs.readdirSync(path.join(localesDir, lang)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/duckduckgo-privacy-essent/shared/js/background/components/resource-loader.js:163:21:info(unsafe-formatstring):        console.log(`Loaded ${this.name}:`, result):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/duckduckgo-privacy-essent/shared/js/background/https.js:138:25:info(unsafe-formatstring):            console.log(`HTTPS: Service cache - host is${foundInServiceCache ? '' : ' not'} upgradable`, host):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/duckduckgo-privacy-essent/shared/js/background/onboarding.js:46:17:warning(insufficient-postmessage-origin-validation):                window.addEventListener('message', (e) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/duckduckgo-privacy-essent/shared/js/background/privacy-practices.js:14:33:warning(detect-non-literal-regexp):            tosdrRegexList.push(new RegExp(`(^)${tldts.getDomain(site)}`)):RegExp() called with a `site` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/duckduckgo-privacy-essent/shared/js/background/storage/https.js:135:26:info(unsafe-formatstring):            console.warn(`getListFromLocalDB failed for ${listDetails.name}`, e):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/duckduckgo-privacy-essent/shared/js/background/storage/https.js:142:26:info(unsafe-formatstring):            console.warn(`storeInLocalDB failed for ${name}: resetting stored etag`, e):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/duckduckgo-privacy-essent/shared/js/content-scripts/content-scope-messaging.js:33:13:warning(insufficient-postmessage-origin-validation):            window.addEventListener('message', message => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/duckduckgo-privacy-essent/shared/js/ui/base/store.js:92:22:info(unsafe-formatstring):        console.info(`STORE NOTIFICATION change:${notification.notifierName}`, notification):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/duckduckgo-privacy-essent/shared/js/ui/base/store.js:96:22:info(unsafe-formatstring):        console.info(`STORE NOTIFICATION action:${notification.notifierName}`, notification):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/duckduckgo-privacy-essent/shared/js/ui/pages/options.js:43:17:error(insecure-document-method):                el.innerHTML = text:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/duckduckgo-privacy-essent/unit-test/background/reference-tests/broken-site-reporting-tests.js:99:31:warning(detect-non-literal-regexp):                const regex = new RegExp(param.matches):RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/duckduckgo-privacy-essent/unit-test/background/storage/https.js:46:40:warning(insecure-object-assign):                return Promise.resolve(Object.assign(listDetails, val)):Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
