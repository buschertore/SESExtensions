/home/codescan/autopagerize/bg/bg-util.js:56:10:warning(detect-non-literal-regexp):    rx = RegExp(rxStr);:RegExp() called with a `str` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/autopagerize/content/xpather.js:58:18:warning(detect-non-literal-regexp):  TOKEN_PATTERN: RegExp(:RegExp() called with a `rx` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/autopagerize/siteinfo-updater.js:17:1:warning(http-request):http.get(DATA_URL, r => {:Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.
/home/codescan/autopagerize/siteinfo-updater.js:17:1:warning(using-http-server):http.get(DATA_URL, r => {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
/home/codescan/autopagerize/ui/options-rules.js:123:9:warning(detect-non-literal-regexp):        RegExp(v);:RegExp() called with a `el` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/autopagerize/ui/options.html:106:28:warning(plaintext-http-link):          <td>pageElement, <a href="http://xpather.com/" target="_blank">XPath</a></td>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/autopagerize/ui/options.html:110:25:warning(plaintext-http-link):          <td>nextLink, <a href="http://xpather.com/" target="_blank">XPath</a></td>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/autopagerize/ui/options.html:115:13:warning(plaintext-http-link):            <a href="http://xpather.com/" target="_blank">XPath</a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
