data/tempCode/adguard-adblocker-mv3-exp/scripts/browser-test/logger.ts:55:21:info(unsafe-formatstring):        console.log(test.name, colorizeStatusText(test.status));:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/adguard-adblocker-mv3-exp/scripts/bundle/webpack-config.ts:89:73:warning(path-join-resolve-traversal):    const OUTPUT_DIR = path.resolve(__dirname, BUILD_PATH, OUTPUT_PATH, browser);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/bundle/webpack-config.ts:90:71:warning(path-join-resolve-traversal):    const FILTERS_DECLARATIVE_DIR = path.resolve(__dirname, SRC_PATH, FILTERS_PATH, 'declarative/');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/bundle/webpack-config.ts:213:25:warning(path-join-resolve-traversal):                        ...paths,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/filters/filters.ts:61:35:warning(path-join-resolve-traversal):    await fse.writeFile(path.join(filtersDir, url.file), response.data);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/filters/filters.ts:61:47:warning(path-join-resolve-traversal):    await fse.writeFile(path.join(filtersDir, url.file), response.data);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/filters/filters.ts:72:19:warning(path-join-resolve-traversal):        path.join(filtersDir, FILTERS_I18N_FILENAME),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/helpers.ts:24:32:warning(path-join-resolve-traversal):    const filePath = path.join(localesDir, locale, localesDataFilename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/helpers.ts:24:44:warning(path-join-resolve-traversal):    const filePath = path.join(localesDir, locale, localesDataFilename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/helpers.ts:24:52:warning(path-join-resolve-traversal):    const filePath = path.join(localesDir, locale, localesDataFilename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/download-locales.ts:105:55:warning(path-join-resolve-traversal):        const localeFilePath = path.join(LOCALES_DIR, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/download-locales.ts:106:54:warning(path-join-resolve-traversal):        const localeDirPath = path.join(LOCALES_DIR, locale);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/download-locales.ts:143:53:warning(path-join-resolve-traversal):        const pathToLocale = path.join(LOCALES_DIR, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/renew-locales.ts:51:26:warning(detect-non-literal-regexp):    const filterRegexp = new RegExp(filesReg);:RegExp() called with a `filesReg` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/renew-locales.ts:57:40:warning(path-join-resolve-traversal):            const filePath = path.join(dir, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/renew-locales.ts:57:45:warning(path-join-resolve-traversal):            const filePath = path.join(dir, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/unused.ts:44:36:warning(path-join-resolve-traversal):        const fullPath = path.join(dirPath, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/unused.ts:44:45:warning(path-join-resolve-traversal):        const fullPath = path.join(dirPath, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/scripts/locales/upload-locales.ts:33:73:warning(path-join-resolve-traversal):    formData.append('file', fse.createReadStream(path.join(LOCALES_DIR, `${locale}/${LOCALE_DATA_FILENAME}`)));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker-mv3-exp/src/common/editor/mode-adguard.js:963:39:warning(detect-non-literal-regexp):            this.foldingStartMarker = new RegExp(:RegExp() called with a `commentRegex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-adblocker-mv3-exp/src/common/editor/mode-adguard.js:966:38:warning(detect-non-literal-regexp):            this.foldingStopMarker = new RegExp(:RegExp() called with a `commentRegex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
