data/tempCode/solid-devtools/packages/extension/content/content.ts:61:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/solid-devtools/packages/frontend/src/modules/structure/index.ts:123:25:warning(detect-non-literal-regexp):            const rgx = new RegExp('^' + query, 'i'):RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/solid-devtools/packages/logger/src/log.ts:118:17:info(unsafe-formatstring):    console.log(`${inGray('Previous =')}${getValueSpecifier(prev)}`, prev):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:135:25:info(unsafe-formatstring):            console.log(`${label} %c${name}`, STYLES.grayBackground):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:140:39:info(unsafe-formatstring):    if (value !== UNUSED) console.log(`${inGray('Value =')}${getValueSpecifier(value)}`, value):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:148:17:info(unsafe-formatstring):                `%c${inGray('Caused By:')} %c${cause.name}%c ${inGray('=')}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:158:21:info(unsafe-formatstring):                    `%c${cause.name}%c ${inGray('=')}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:173:25:info(unsafe-formatstring):            console.log(`%c${name}%c ${inGray('=')}`, getNameStyle(type), '', source.value):Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:202:9:info(unsafe-formatstring):        `Owned by the %c${ownerState.name}%c ${ownerState.typeName}:`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:234:9:info(unsafe-formatstring):        `%c${typeName} %c${name}%c initial value ${inGray('=')}${getValueSpecifier(value)}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:245:9:info(unsafe-formatstring):        `${inGray(typeName)} %c${name}%c ${inGray('=')}${getValueSpecifier(value)}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/logger/src/log.ts:259:9:info(unsafe-formatstring):        `%c${name}%c updated ${inGray('=')}${getValueSpecifier(value)}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/solid-devtools/packages/shared/tsup.config.ts:15:69:warning(path-join-resolve-traversal):            entries: entries.map(entry => ({entry: path.join('src', entry)})),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
