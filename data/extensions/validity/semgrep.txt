data/tempCode/validity/src/background/util.js:100:17:warning(detect-non-literal-regexp):			hostRegExp = new RegExp(element);:RegExp() called with a `element` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/validity/src/options.html:65:33:warning(plaintext-http-link):				Source code is available at <a href="http://github.com/renyard/validity">http://github.com/renyard/validity</a>.:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/validity/src/validity.js:105:3:warning(eval-detected):		eval(toEval);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
