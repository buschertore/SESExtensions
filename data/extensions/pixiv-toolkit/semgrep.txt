data/tempCode/pixiv-toolkit/config/utils.js:76:13:warning(detect-non-literal-regexp):      test: new RegExp('\\.' + extension + '$'),:RegExp() called with a `options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/pixiv-toolkit/config/utils.js:8:37:warning(path-join-resolve-traversal):  return path.join(__dirname, '..', dir, subdir ? subdir : '.'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/pixiv-toolkit/config/utils.js:8:42:warning(path-join-resolve-traversal):  return path.join(__dirname, '..', dir, subdir ? subdir : '.'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/pixiv-toolkit/src/options_page/components/options/ChangeLocationBtn.vue:17:11:warning(avoid-v-html):          <p style="font-size: 12px;" v-html="hint"></p>:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/pixiv-toolkit/src/options_page/components/options/DownloadRelativeLocationDialog.vue:11:9:warning(avoid-v-html):        <p style="font-size: 12px;" v-html="hint"></p>:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/pixiv-toolkit/src/options_page/modules/common.js:7:17:warning(detect-non-literal-regexp):    var regex = new RegExp(browser, 'i');:RegExp() called with a `browser` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/pixiv-toolkit/src/popup_page/App.vue:25:7:warning(avoid-v-html):      <div class="card":Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/pixiv-toolkit/src/statics/lib/ffmpeg/ffmpeg-core.js:113:484:error(detect-insecure-websocket):(R.zg.current=0);return"socket["+R.zg.current++ +"]"},qf:{tg:function(a,b,c){if("object"===typeof b){var d=b;c=b=null}if(d)if(d._socket)b=d._socket.remoteAddress,c=d._socket.remotePort;else{c=/ws[s]?:\/\/([^:]+):(\d+)/.exec(d.url);if(!c)throw Error("WebSocket URL must be in the format ws(s)://address:port");b=c[1];c=parseInt(c[2],10)}else try{var e=f.websocket&&"object"===typeof f.websocket,g="ws:#".replace("#","//");e&&"string"===typeof f.websocket.url&&(g=f.websocket.url);if("ws://"===g||"wss://"===:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
