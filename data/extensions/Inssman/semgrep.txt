/home/codescan/Inssman/browser-extension/src/cotentScript/recorderWidget.ts:9:5:error(insecure-document-method):    this.shadowRoot.innerHTML = this.getHTML();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Inssman/browser-extension/src/serviceWorker/firebase.ts:32:20:info(firebase-hardcoded-secret):export const app = initializeApp(firebaseConfig);:A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).
/home/codescan/Inssman/browser-extension/src/services/MatcherService.ts:16:5:warning(detect-non-literal-regexp):    new RegExp(replaceAsteriskToPlus(sourceUrl)).test(currentUrl);:RegExp() called with a `sourceUrl` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Inssman/web/src/config/firebase.ts:19:20:info(firebase-hardcoded-secret):export const app = initializeApp(firebaseConfig);:A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).
