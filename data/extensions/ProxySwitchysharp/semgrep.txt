/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/i18n.js:82:13:error(insecure-document-method):            element.innerHTML/*textContent*/ = I18n.getMessage(attributeValue);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/i18n.js:102:29:warning(prototype-pollution-loop):                            object = object[path.shift()];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/ruleManager.js:554:7:warning(insufficient-postmessage-origin-validation):      window.addEventListener("message", function (e) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/ruleManager.js:561:5:warning(wildcard-postmessage-configuration):    RuleManager.sandboxFrame.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/ruleManager.js:578:5:warning(wildcard-postmessage-configuration):    RuleManager.sandboxFrame.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/ruleManager.js:313:18:warning(detect-non-literal-regexp):    var regexp = new RegExp(pattern);:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/ruleManager.js:393:13:warning(detect-non-literal-regexp):            new RegExp(urlPattern);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/ruleManager.js:396:13:warning(detect-non-literal-regexp):            new RegExp(RuleManager.wildcardToRegexp(urlPattern));:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/sandbox.js:60:20:warning(eval-detected):      window.u2p = eval(e.data.u2p);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/sandbox.js:57:1:warning(insufficient-postmessage-origin-validation):window.addEventListener("message", function (e) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/sandbox.js:66:5:warning(wildcard-postmessage-configuration):    e.source.postMessage({"reqid": e.data.reqid, "profileId": profileId}, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/assets/scripts/sandbox.js:50:18:warning(detect-non-literal-regexp):    var regexp = new RegExp(pattern);:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Proxy-Switchysharp-Chrome-Extension-Chrome-Webstore/options.html:292:13:warning(plaintext-http-link):            <a href="http://code.google.com/p/switchy/wiki/RuleList" class="link" target="_blank":This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
