data/tempCode/link-map/server/start.ts:26:32:error(react-insecure-request):            const resp = await fetch(reactDevtoolsJSAddress);:Unencrypted request over HTTP detected.
data/tempCode/link-map/src/tree/features/search/Search.tsx:37:24:warning(detect-non-literal-regexp):            const re = new RegExp(match, 'i');:RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
