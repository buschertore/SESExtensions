data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.ex.js:316:16:warning(detect-non-literal-regexp):	s = s.replace(RegExp('([a-zA-Z]*)\\'+delim+'?'), function(match, p1){:RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:52:50:warning(detect-non-literal-regexp):	if (!(separator instanceof RegExp)) separator = new RegExp (quoteRegExp (separator));:RegExp() called with a `separator` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:61:50:warning(detect-non-literal-regexp):	if (!(separator instanceof RegExp)) separator = new RegExp (quoteRegExp (separator));:RegExp() called with a `separator` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:144:13:warning(detect-non-literal-regexp):	const re = new RegExp (source, flags);:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:144:13:warning(detect-non-literal-regexp):	const re = new RegExp (source, flags);:RegExp() called with a `source` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:144:13:warning(detect-non-literal-regexp):	const re = new RegExp (source, flags);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:144:13:warning(detect-non-literal-regexp):	const re = new RegExp (source, flags);:RegExp() called with a `to` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:160:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:160:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `source` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:160:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:160:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `to` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:165:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:165:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `source` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:165:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:165:14:warning(detect-non-literal-regexp):		const re = new RegExp (source, flags);:RegExp() called with a `to` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:197:13:warning(detect-non-literal-regexp):	const re = new RegExp (search, flagobject.flags);:RegExp() called with a `flagobject` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:197:13:warning(detect-non-literal-regexp):	const re = new RegExp (search, flagobject.flags);:RegExp() called with a `from` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:197:13:warning(detect-non-literal-regexp):	const re = new RegExp (search, flagobject.flags);:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:197:13:warning(detect-non-literal-regexp):	const re = new RegExp (search, flagobject.flags);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.find.js:197:13:warning(detect-non-literal-regexp):	const re = new RegExp (search, flagobject.flags);:RegExp() called with a `to` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.js:521:7:error(insecure-document-method):      this._el.innerHTML = this._el.innerHTML + "\n";:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.lines.js:26:21:warning(detect-non-literal-regexp):		const mynewline = (new RegExp(`^(.*\n){${n}}`)).exec(this.all()); // find the nth newline:RegExp() called with a `n` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.lines.js:134:18:warning(detect-non-literal-regexp):	const restart = new RegExp(`^(?:\t| {${tabsize}}){1,${count}}`, 'g');:RegExp() called with a `count` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.lines.js:134:18:warning(detect-non-literal-regexp):	const restart = new RegExp(`^(?:\t| {${tabsize}}){1,${count}}`, 'g');:RegExp() called with a `tabsize` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.lines.js:135:19:warning(detect-non-literal-regexp):	const remiddle = new RegExp(`(\\n)(?:\t| {${tabsize}}){1,${count}}`, 'g');:RegExp() called with a `count` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/blend-run-enable-copy-and/billiliteRange/bililiteRange/bililiteRange.lines.js:135:19:warning(detect-non-literal-regexp):	const remiddle = new RegExp(`(\\n)(?:\t| {${tabsize}}){1,${count}}`, 'g');:RegExp() called with a `tabsize` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
