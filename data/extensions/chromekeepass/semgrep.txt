data/tempCode/chromekeepass/src/classes/Constants.ts:46:27:info(unsafe-formatstring):            console.error(`[CKP]: ${msg}`, ...optionalParams);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/chromekeepass/src/classes/Constants.ts:49:26:info(unsafe-formatstring):            console.warn(`[CKP]: ${msg}`, ...optionalParams);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/chromekeepass/src/classes/Constants.ts:53:29:info(unsafe-formatstring):                console.log(`[CKP]: ${msg}`, ...optionalParams);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/chromekeepass/src/classes/UncontrolledFields.ts:34:13:warning(insufficient-postmessage-origin-validation):            window.addEventListener('message', ev=>{:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/chromekeepass/src/components/Wrapper.tsx:40:5:error(insecure-document-method):    style.innerHTML = `:root {:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
