data/tempCode/block-site/v2/firefox/common.js:123:60:warning(detect-non-literal-regexp):    schedule.rules = Object.keys(prefs.schedules).map(r => new RegExp(r, 'i'));:RegExp() called with a `r` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v2/firefox/common.js:251:12:warning(detect-non-literal-regexp):    return new RegExp(rule.substr(2), 'i');:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v2/firefox/common.js:263:10:warning(detect-non-literal-regexp):  return new RegExp('^' + rule.split('*').map(escapeRegexp).join('.*') + '$', 'i');:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v2/firefox/common.js:276:5:warning(insecure-object-assign):    Object.assign(prefs, p);:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
data/tempCode/block-site/v2/firefox/common.js:292:17:warning(insecure-object-assign):            p = Object.assign(prefs, rps);:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
data/tempCode/block-site/v2/firefox/data/options/index.js:64:5:warning(detect-non-literal-regexp):    new RegExp(regexStr, 'i');:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/blocker.js:130:15:warning(detect-non-literal-regexp):    .map(r => new RegExp(r.condition.regexFilter, 'i'));:RegExp() called with a `r` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/blocker.js:137:15:warning(detect-non-literal-regexp):  }).map(r => new RegExp(r.condition.regexFilter, 'i'));:RegExp() called with a `r` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/data/blocked/index.js:149:29:warning(detect-non-literal-regexp):                  const r = new RegExp(resp[i], 'i');:RegExp() called with a `i` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/data/blocked/index.js:149:29:warning(detect-non-literal-regexp):                  const r = new RegExp(resp[i], 'i');:RegExp() called with a `resp` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/data/inject/page-blocker.js:14:21:warning(detect-non-literal-regexp):          const r = new RegExp(rule, 'i');:RegExp() called with a `rules` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/data/inject/page-blocker.js:21:27:warning(detect-non-literal-regexp):                const r = new RegExp(schedule.condition.regexFilter, 'i');:RegExp() called with a `schedules` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/data/options/index.js:77:5:warning(detect-non-literal-regexp):    new RegExp(regexStr, 'i');:RegExp() called with a `regexStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/worker.js:136:19:warning(detect-non-literal-regexp):        const r = new RegExp(convert(s), 'i');:RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/block-site/v3/worker.js:266:9:warning(insecure-object-assign):        Object.assign(prefs, rps);:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
