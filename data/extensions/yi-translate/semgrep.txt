data/tempCode/yi-translate/src/content/index.js:156:12:warning(detect-non-literal-regexp):    return RegExp("^" + pattern + "$").test(pageUrl);:RegExp() called with a `urlPattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/yi-translate/webpack.utils.js:14:39:warning(path-join-resolve-traversal):    filename: path.resolve(__dirname, `${outputDir}/${browserDir}/popup/index.html`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:20:39:warning(path-join-resolve-traversal):    filename: path.resolve(__dirname, `${outputDir}/${browserDir}/options/index.html`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:28:35:warning(path-join-resolve-traversal):    path: path.resolve(__dirname, `${outputDir}/${browserDir}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:35:36:warning(path-join-resolve-traversal):    popup: path.resolve(__dirname, `${sourceDir}/popup/index.js`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:36:38:warning(path-join-resolve-traversal):    options: path.resolve(__dirname, `${sourceDir}/options/index.js`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:37:38:warning(path-join-resolve-traversal):    content: path.resolve(__dirname, `${sourceDir}/content/index.js`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:38:41:warning(path-join-resolve-traversal):    background: path.resolve(__dirname, `${sourceDir}/background/background.js`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:46:35:warning(path-join-resolve-traversal):      to: path.resolve(__dirname, `${outputDir}/${browserDir}/icons`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:50:35:warning(path-join-resolve-traversal):      to: path.resolve(__dirname, `${outputDir}/${browserDir}/_locales`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:54:35:warning(path-join-resolve-traversal):      to: path.resolve(__dirname, `${outputDir}/${browserDir}/manifest.json`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:63:35:warning(path-join-resolve-traversal):      to: path.resolve(__dirname, `${outputDir}/${browserDir}/icons`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:67:35:warning(path-join-resolve-traversal):      to: path.resolve(__dirname, `${outputDir}/${browserDir}/_locales`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:71:35:warning(path-join-resolve-traversal):      to: path.resolve(__dirname, `${outputDir}/${browserDir}/manifest.json`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/yi-translate/webpack.utils.js:78:35:warning(path-join-resolve-traversal):    path: path.resolve(__dirname, `${outputDir}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
