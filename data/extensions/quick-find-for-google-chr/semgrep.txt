data/tempCode/quick-find-for-google-chr/js/text-search.js:403:10:warning(detect-non-literal-regexp):				re = new RegExp('<span class="ts-ce-hl">' + utility.regexEscape(content) + '</span>','g');:RegExp() called with a `$el` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/quick-find-for-google-chr/js/text-search.js:407:11:warning(detect-non-literal-regexp):					re = new RegExp('<span class="ts-ce-hl ts-ce-hl-sel">' + utility.regexEscape(content) + '</span>','g');:RegExp() called with a `$el` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
