/home/codescan/ODH/src/bg/js/agent.js:6:9:warning(insufficient-postmessage-origin-validation):        window.addEventListener('message', e => this.onMessage(e));:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ODH/src/bg/js/agent.js:26:13:warning(wildcard-postmessage-configuration):            this.target.postMessage({ action, params }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ODH/src/bg/js/backend.js:22:9:warning(insufficient-postmessage-origin-validation):        window.addEventListener('message', e => this.onSandboxMessage(e));:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ODH/src/bg/js/utils.js:69:9:error(insecure-document-method):        el.innerHTML = chrome.i18n.getMessage(el.getAttribute('data-i18n'));:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/bg/sandbox/sandbox.js:39:26:warning(eval-detected):            let SCRIPT = eval(`(${scripttext})`);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
/home/codescan/ODH/src/bg/sandbox/sandbox.js:6:9:warning(insufficient-postmessage-origin-validation):        window.addEventListener('message', e => this.onBackendMessage(e));:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ODH/src/dict/builtin_encn_Collins.js:78:78:warning(detect-non-literal-regexp):            eng_tran = eng_tran ? `<span class="eng_tran">${eng_tran.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span>` : '';:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/builtin_encn_Collins.js:87:54:warning(detect-non-literal-regexp):                    let eng_sent = ex.ext_en.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`);:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/decn_Eudict.js:97:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<p class="exp">(.+?)<\/p>/gi, '<span class="exp">$1</span>');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/decn_Eudict.js:98:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<span class="exp"><br>/gi, '<span class="exp">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/decn_Eudict.js:99:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<span class="eg"><br>/gi, '<span class="eg">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/encn_Cambridge.js:94:79:warning(detect-non-literal-regexp):                        eng_tran = `<span class='eng_tran'>${eng_tran.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span>`;:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Cambridge.js:107:108:warning(detect-non-literal-regexp):                                definition += `<li class='sent'><span class='eng_sent'>${eng_examp.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span><span class='chn_sent'>${chn_examp}</span></li>`;:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Cambridge_tc.js:94:79:warning(detect-non-literal-regexp):                        eng_tran = `<span class='eng_tran'>${eng_tran.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span>`;:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Cambridge_tc.js:107:108:warning(detect-non-literal-regexp):                                definition += `<li class='sent'><span class='eng_sent'>${eng_examp.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span><span class='chn_sent'>${chn_examp}</span></li>`;:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Collins.js:109:110:warning(detect-non-literal-regexp):                        let eng_sent = T(example.querySelector('p')) ? T(example.querySelector('p')).replace(RegExp(expression, 'gi'), '<b>$&</b>') : ''; //surround expression with <b> in eng_example.:RegExp() called with a `doc` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Oxford.js:62:53:warning(detect-non-literal-regexp):                    let enText = def.enText.replace(RegExp(exp, 'gi'), `<b>${exp}</b>`);:RegExp() called with a `exp` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Oxford_bing.js:99:75:warning(detect-non-literal-regexp):                    eng_tran = `<span class='eng_tran'>${eng_tran.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span>`;:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/encn_Oxford_bing.js:111:104:warning(detect-non-literal-regexp):                            definition += `<li class='sent'><span class='eng_sent'>${eng_examp.replace(RegExp(expression, 'gi'),`<b>${expression}</b>`)}</span><span class='chn_sent'>${chn_examp}</span></li>`;:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/enen_Collins.js:72:41:warning(detect-non-literal-regexp):            eng_tran = eng_tran.replace(RegExp(expression, 'gi'), '<b>$&</b>');:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/enen_Collins.js:83:65:warning(detect-non-literal-regexp):                    let eng_examp = T(examp) ? T(examp).replace(RegExp(expression, 'gi'), '<b>$&</b>') : '';:RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/enen_UrbanDict.js:66:13:error(insecure-document-method):            exampsnode.innerHTML = exampsnode.innerHTML.replace('<br>', '@');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/enfr_Cambridge.js:36:13:error(insecure-document-method):            x.outerHTML = x.innerText;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/enfr_Cambridge.js:41:13:error(insecure-document-method):            x.outerHTML = `<div class='head2'>${x.innerHTML}</div>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/enfr_Cambridge.js:46:13:error(insecure-document-method):            x.outerHTML = `<div class='head3'>${x.innerHTML}</div>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/escn_Eudict.js:97:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<p class="exp">(.+?)<\/p>/gi, '<span class="exp">$1</span>');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/escn_Eudict.js:98:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<span class="exp"><br>/gi, '<span class="exp">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/escn_Eudict.js:99:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<span class="eg"><br>/gi, '<span class="eg">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/esen_Spanishdict.js:36:13:error(insecure-document-method):            x.outerHTML = `<span class='link'>${x.innerText}</span>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/esen_Spanishdict.js:41:13:error(insecure-document-method):            x.outerHTML = `<div class='head2'>${x.innerHTML}</div>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/esen_Spanishdict.js:46:13:error(insecure-document-method):            x.outerHTML = `<div class='head3'>${x.innerHTML}</div>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/frcn_Eudict.js:136:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<p class="exp">(.+?)<\/p>/gi, '<span class="exp">$1</span>');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/frcn_Eudict.js:137:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<span class="exp"><br>/gi, '<span class="exp">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/frcn_Eudict.js:138:9:error(insecure-document-method):        content.innerHTML = content.innerHTML.replace(/<span class="eg"><br>/gi, '<span class="eg">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/dict/frcn_Eudict.js:41:39:warning(detect-non-literal-regexp):                    str = str.replace(RegExp(eval_var + '="(.*?)";', 'g'), eval_var + '=\`$1\`;');:RegExp() called with a `str` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/dict/frcn_Eudict.js:61:27:warning(incomplete-sanitization):                respons = respons.replace('`', '\\\`').replace('\n', '\x10');:`respons.replace('`', '\\\`').replace` method will only replace the first occurrence when used with a string argument ('\n'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/ODH/src/fg/js/frame.js:61:5:error(insecure-document-method):    document.querySelector('.spell-content').innerHTML=document.querySelector('#context').innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/ODH/src/fg/js/frame.js:13:13:warning(wildcard-postmessage-configuration):            window.parent.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ODH/src/fg/js/frame.js:31:13:warning(wildcard-postmessage-configuration):            window.parent.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ODH/src/fg/js/frame.js:49:13:warning(wildcard-postmessage-configuration):            window.parent.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ODH/src/fg/js/frontend.js:26:9:warning(insufficient-postmessage-origin-validation):        window.addEventListener('message', e => this.onFrameMessage(e));:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ODH/src/fg/js/popup.js:64:13:warning(wildcard-postmessage-configuration):            this.popup.contentWindow.postMessage({ action, params }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/ODH/src/fg/js/text.js:22:27:warning(detect-non-literal-regexp):    return target.replace(new RegExp(search, 'g'), replacement);:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ODH/src/fg/js/text.js:28:17:warning(detect-non-literal-regexp):    let regex = new RegExp(search, 'gi');:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
