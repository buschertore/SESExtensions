data/tempCode/vocabularycom-enhancer/src/api/store.js:26:26:info(unsafe-formatstring):            console.info(`Retrieved value ${key}: `, result[key]);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/vocabularycom-enhancer/src/api/store.js:41:26:info(unsafe-formatstring):            console.info(`Retrieved values ${Object.keys(settings).join(', ')}: `, Object.values(result).map(JSON.strinfiy).join(', '));:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/vocabularycom-enhancer/src/api/store.js:55:25:info(unsafe-formatstring):          console.error(`Error attempting to save ${setting};`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/vocabularycom-enhancer/src/api/store.js:59:26:info(unsafe-formatstring):            console.info(`Saved setting ${setting} :`, value);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/vocabularycom-enhancer/src/content/quiz-injector.js:58:21:error(insecure-document-method):                    exampleElement.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/vocabularycom-enhancer/src/options/options.js:14:5:error(insecure-document-method):    checkElement.innerHTML = `<input type="checkbox" id="${name}" name="${name}" ${:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
