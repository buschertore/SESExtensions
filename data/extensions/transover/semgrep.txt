data/tempCode/transover/fixtures/attribute-behavior/src/App.js:341:7:error(insecure-document-method):      container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/attribute-behavior/src/App.js:348:7:error(insecure-document-method):      container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/attribute-behavior/src/App.js:359:7:error(insecure-document-method):      outerContainer.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/devtools/regression/14.9.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@0.14.9/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/14.9.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@0.14.9/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/14.9.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/14.9.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/14.9.html">http://localhost:3000/14.9.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.0.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.0/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.0.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.0/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.0.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.0.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.0.html">http://localhost:3000/15.0.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.1.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.1/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.1.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.1/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.1.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.1.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.1.html">http://localhost:3000/15.1.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.2.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.2/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.2.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.2/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.2.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.2.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.2.html">http://localhost:3000/15.2.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.3.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.3/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.3.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.3/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.3.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.3.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.3.html">http://localhost:3000/15.3.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.4.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.4/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.4.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.4/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.4.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.4.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.4.html">http://localhost:3000/15.4.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.5.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.5/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.5.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.5/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.5.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.5.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.5.html">http://localhost:3000/15.5.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/15.6.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@15.6/dist/react.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.6.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@15.6/dist/react-dom.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.6.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/15.6.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/15.6.html">http://localhost:3000/15.6.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.0.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.0/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.0.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.0/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.0.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.0.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.0.html">http://localhost:3000/16.0.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.1.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.1/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.1.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.1/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.1.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.1.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.1.html">http://localhost:3000/16.1.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.2.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.2/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.2.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.2/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.2.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.2.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.2.html">http://localhost:3000/16.2.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.3.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.3/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.3.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.3/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.3.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.3.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.3.html">http://localhost:3000/16.3.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.4.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.4/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.4.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.4/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.4.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.4.html:27:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.4.html">http://localhost:3000/16.4.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.5.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/schedule@0.5.0/umd/schedule.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.5.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/schedule@0.5.0/umd/schedule-tracing.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.5.html:16:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.5/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.5.html:17:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.5/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.5.html:20:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.5.html:29:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.5.html">http://localhost:3000/16.5.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@0.10.0/umd/scheduler.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@0.10.0/umd/scheduler-tracing.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:16:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.6/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:17:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.6/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/react-cache@2.0.0-alpha.1/umd/react-cache.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:21:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.6.html:30:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.6.html">http://localhost:3000/16.6.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@0.12.0/umd/scheduler.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@0.12.0/umd/scheduler-tracing.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:16:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16.7/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:17:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16.7/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/react-cache@2.0.0-alpha.1/umd/react-cache.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:21:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/16.7.html:30:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/16.7.html">http://localhost:3000/16.7.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/canary.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@canary/umd/scheduler.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/canary.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@canary/umd/scheduler-tracing.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/canary.html:16:5:warning(missing-integrity):    <script src="https://unpkg.com/react@canary/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/canary.html:17:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@canary/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/canary.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/react-cache@canary/umd/react-cache.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/canary.html:21:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/canary.html:30:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/canary.html">http://localhost:3000/canary.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/next.html:14:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@canary/umd/scheduler.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/next.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/scheduler@canary/umd/scheduler-tracing.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/next.html:16:5:warning(missing-integrity):    <script src="https://unpkg.com/react@canary/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/next.html:17:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@canary/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/next.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/react-cache@canary/umd/react-cache.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/next.html:21:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/regression/next.html:30:18:warning(plaintext-http-link):      <code>open <a href="http://localhost:3000/next.html">http://localhost:3000/next.html</a></code>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/transover/fixtures/devtools/regression/server.js:11:16:warning(using-http-server):const server = http.createServer(function onRequest(req, res) {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
data/tempCode/transover/fixtures/devtools/scheduling-profiler/run.js:51:51:warning(path-join-resolve-traversal):          join(__dirname, DEPENDENCIES_DIRECTORY, request.url):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/devtools/scheduling-profiler/run.js:71:18:warning(using-http-server):  const server = http.createServer(requestListener);:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
data/tempCode/transover/fixtures/devtools/standalone/index.html:8:5:warning(missing-integrity):    <script src="http://localhost:8097"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/standalone/index.html:10:5:warning(missing-integrity):    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/standalone/index.html:11:5:warning(missing-integrity):    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/standalone/index.html:12:5:warning(missing-integrity):    <script src="https://unpkg.com/immutable@4.0.0-rc.12/dist/immutable.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/devtools/standalone/index.html:15:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/dom/public/index.html:17:5:warning(missing-integrity):    <script src="https://unpkg.com/prop-types@15.5.6/prop-types.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/dom/public/index.html:18:5:warning(missing-integrity):    <script src="https://unpkg.com/expect@1.20.2/umd/expect.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/dom/public/renderer.html:83:5:warning(missing-integrity):    <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/dom/public/renderer.js:56:5:error(insecure-document-method):    status.innerHTML = label;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/dom/public/renderer.js:88:9:error(insecure-document-method):        output.innerHTML = string;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/dom/public/renderer.js:123:5:error(insecure-document-method):    output.innerHTML = error;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/dom/public/renderer.js:184:7:warning(insufficient-postmessage-origin-validation):      window.addEventListener('message', function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/transover/fixtures/dom/public/renderer.js:198:7:warning(wildcard-postmessage-configuration):      window.parent.postMessage(JSON.stringify({type: 'ready'}), '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/fixtures/dom/public/renderer.js:41:19:warning(detect-non-literal-regexp):    var pattern = new RegExp(key + '=([^&]+)(&|$)');:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/fixtures/dom/src/components/Iframe.js:12:11:error(insecure-document-method):          ref.contentDocument.head.innerHTML = this.props.head;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/fixtures/dom/src/components/fixtures/hydration/index.js:63:7:warning(wildcard-postmessage-configuration):      this.frame.contentWindow.postMessage(JSON.stringify(message), '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/fixtures/fiber-debugger/public/index.html:7:5:warning(missing-integrity):    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.14.0/babel.min.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/fiber-debugger/src/App.js:122:5:warning(eval-detected):    eval(:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/transover/fixtures/fiber-triangle/index.html:21:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/fizz/server/server.js:28:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/fixtures/fizz-ssr-browser/index.html:22:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/flight/config/env.js:56:45:warning(path-join-resolve-traversal):  .map(folder => path.resolve(appDirectory, folder)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/config/modules.js:21:55:warning(path-join-resolve-traversal):  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/config/modules.js:64:55:warning(path-join-resolve-traversal):  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/config/modules.js:85:55:warning(path-join-resolve-traversal):  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/config/paths.js:10:63:warning(path-join-resolve-traversal):const resolveApp = relativePath => path.resolve(appDirectory, relativePath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/server/global.js:42:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/fixtures/flight/server/global.js:133:21:warning(path-join-resolve-traversal):          path.join(buildPath, 'react-ssr-manifest.json'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/server/global.js:142:21:warning(path-join-resolve-traversal):          path.join(buildPath, 'entrypoint-manifest.json'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/flight/server/global.js:79:17:warning(using-http-server):    const req = http.request(options, res => {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
data/tempCode/transover/fixtures/flight/server/region.js:37:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/fixtures/flight/server/region.js:61:13:error(react-insecure-request):      await fetch('http://localhost:3000/react-client-manifest.json'):Unencrypted request over HTTP detected.
data/tempCode/transover/fixtures/flight/server/region.js:65:15:error(react-insecure-request):        await fetch('http://localhost:3000/entrypoint-manifest.json'):Unencrypted request over HTTP detected.
data/tempCode/transover/fixtures/flight/src/App.js:23:21:error(react-insecure-request):  const res = await fetch('http://localhost:3001/todos');:Unencrypted request over HTTP detected.
data/tempCode/transover/fixtures/flight-browser/index.html:24:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/flight-esm/server/global.js:20:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/fixtures/flight-esm/server/global.js:26:17:warning(using-http-server):    const req = http.request(options, res => {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
data/tempCode/transover/fixtures/flight-esm/server/region.js:16:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/fixtures/flight-esm/src/App.js:13:21:error(react-insecure-request):  const res = await fetch('http://localhost:3001/todos');:Unencrypted request over HTTP detected.
data/tempCode/transover/fixtures/packaging/babel-standalone/dev.html:5:5:warning(missing-integrity):    <script src="https://unpkg.com/babel-standalone@6/babel.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/packaging/build-all.js:6:43:warning(path-join-resolve-traversal):  return fs.statSync(path.join(__dirname, file)).isDirectory();:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/packaging/build-all.js:29:42:warning(path-join-resolve-traversal):    const devPath = path.join(__dirname, dir, 'dev');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/packaging/build-all.js:34:43:warning(path-join-resolve-traversal):    const prodPath = path.join(__dirname, dir, 'prod');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/fixtures/packaging/build-all.js:19:42:error(detect-child-process):  const result = child_process.spawnSync(cmdArg.cmd, cmdArg.args, opts);:Detected calls to child_process from a function argument `cmdArg`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/transover/fixtures/packaging/requirejs/dev.html:3:5:warning(missing-integrity):    <script src="https://unpkg.com/requirejs@2.3.2/require.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/packaging/requirejs/prod.html:3:5:warning(missing-integrity):    <script src="https://unpkg.com/requirejs@2.3.2/require.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/packaging/rjs/dev/index.html:4:5:warning(missing-integrity):    <script src="https://unpkg.com/requirejs@2.3.2/require.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/packaging/rjs/prod/index.html:4:5:warning(missing-integrity):    <script src="https://unpkg.com/requirejs@2.3.2/require.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/packaging/systemjs/dev.html:3:5:warning(missing-integrity):    <script src="https://unpkg.com/systemjs@0.19.41/dist/system.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/packaging/systemjs/prod.html:3:5:warning(missing-integrity):    <script src="https://unpkg.com/systemjs@0.19.41/dist/system.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/scheduler/index.html:153:3:warning(missing-integrity):  <script src="https://unpkg.com/babel-standalone@6/babel.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/transover/fixtures/ssr/server/index.js:13:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/fixtures/ssr2/server/server.js:26:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
data/tempCode/transover/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js:45:11:warning(detect-non-literal-regexp):        ? new RegExp(context.options[0].additionalHooks):RegExp() called with a `context` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react/src/__tests__/ReactFetch-test.js:153:28:error(react-insecure-request):      const response = use(fetch(url));:Unencrypted request over HTTP detected.
data/tempCode/transover/packages/react-client/src/__tests__/ReactFlight-test.js:1472:9:error(detected-generic-secret):        SECRET: '3e971ecc1485fe78625598bf9b6f85db',:Generic Secret detected
data/tempCode/transover/packages/react-devtools-core/src/backend.js:54:7:info(unsafe-formatstring):      `%c[core/backend] %c${methodName}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-core/src/editor.js:126:31:warning(path-join-resolve-traversal):      const joinedPath = join(projectRoot, maybeRelativePath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-core/src/editor.js:126:44:warning(path-join-resolve-traversal):      const joinedPath = join(projectRoot, maybeRelativePath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-core/src/standalone.js:184:3:error(insecure-document-method):  node.innerHTML = nodeWaitingToConnectHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-devtools-core/src/standalone.js:204:5:error(insecure-document-method):    node.innerHTML = `:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-devtools-core/src/standalone.js:97:7:info(unsafe-formatstring):      `%c[core/standalone] %c${methodName}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-extensions/build.js:56:24:warning(path-join-resolve-traversal):  const binPath = join(tempPath, 'bin');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:57:24:warning(path-join-resolve-traversal):  const zipPath = join(tempPath, 'zip');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:81:35:warning(path-join-resolve-traversal):  const copiedManifestPath = join(zipPath, 'manifest.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:84:28:warning(path-join-resolve-traversal):  await copy(binPath, join(zipPath, 'build'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:87:51:warning(path-join-resolve-traversal):    STATIC_FILES.map(file => copy(join(__dirname, file), join(zipPath, file))),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:87:63:warning(path-join-resolve-traversal):    STATIC_FILES.map(file => copy(join(__dirname, file), join(zipPath, file))),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:87:72:warning(path-join-resolve-traversal):    STATIC_FILES.map(file => copy(join(__dirname, file), join(zipPath, file))),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:114:44:warning(path-join-resolve-traversal):  const zipStream = createWriteStream(join(tempPath, 'ReactDevTools.zip'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:126:35:warning(path-join-resolve-traversal):  const unpackedSourcePath = join(tempPath, 'zip');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:127:33:warning(path-join-resolve-traversal):  const packedSourcePath = join(tempPath, 'ReactDevTools.zip');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:128:31:warning(path-join-resolve-traversal):  const packedDestPath = join(destinationPath, 'ReactDevTools.zip');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:129:33:warning(path-join-resolve-traversal):  const unpackedDestPath = join(destinationPath, 'unpacked');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:147:32:warning(path-join-resolve-traversal):  const root = join(__dirname, buildId);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:148:29:warning(path-join-resolve-traversal):  const manifestPath = join(root, 'manifest.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:149:32:warning(path-join-resolve-traversal):  const destinationPath = join(root, 'build');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:158:47:warning(path-join-resolve-traversal):    const tempPath = join(__dirname, 'build', buildId);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:163:36:warning(path-join-resolve-traversal):    const builtUnpackedPath = join(destinationPath, 'unpacked');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/build.js:62:5:error(detect-child-process):    `${webpackPath} --config webpack.config.js --output-path ${binPath}`,:Detected calls to child_process from a function argument `tempPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/transover/packages/react-devtools-extensions/build.js:70:5:error(detect-child-process):    `${webpackPath} --config webpack.backend.js --output-path ${binPath}`,:Detected calls to child_process from a function argument `tempPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:10:32:warning(path-join-resolve-traversal):  const root = join(__dirname, buildId);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:11:26:warning(path-join-resolve-traversal):  const buildPath = join(root, 'build');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:13:25:warning(path-join-resolve-traversal):  execSync(`node ${join(root, './build')}`, {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:21:17:warning(path-join-resolve-traversal):  shell.cp(join(root, 'now.json'), join(buildPath, 'now.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:21:41:warning(path-join-resolve-traversal):  shell.cp(join(root, 'now.json'), join(buildPath, 'now.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:22:34:warning(path-join-resolve-traversal):  const file = readFileSync(join(root, 'now.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:41:22:warning(path-join-resolve-traversal):  writeFileSync(join(buildPath, 'index.html'), html);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:13:12:error(detect-child-process):  execSync(`node ${join(root, './build')}`, {:Detected calls to child_process from a function argument `buildId`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:43:14:error(detect-child-process):  await exec(`now deploy && now alias ${alias}`, {:Detected calls to child_process from a function argument `buildId`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/transover/packages/react-devtools-extensions/deploy.js:43:9:error(shelljs-exec-injection):  await exec(`now deploy && now alias ${alias}`, {:If unverified user data can reach the `exec` method it can result in Remote Code Execution
data/tempCode/transover/packages/react-devtools-extensions/src/background/index.js:141:21:info(unsafe-formatstring):        console.log(`Broken pipe ${tabId}: `, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-extensions/src/background/index.js:153:21:info(unsafe-formatstring):        console.log(`Broken pipe ${tabId}: `, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-extensions/src/contentScripts/backendManager.js:169:3:warning(wildcard-postmessage-configuration):  window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/packages/react-devtools-extensions/src/contentScripts/installHook.js:11:7:warning(wildcard-postmessage-configuration):      window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/packages/react-devtools-extensions/src/contentScripts/prepareInjection.js:37:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', function onMessage({data, source}) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/transover/packages/react-devtools-extensions/src/contentScripts/proxy.js:39:3:warning(wildcard-postmessage-configuration):  window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/packages/react-devtools-extensions/src/contentScripts/proxy.js:49:3:warning(wildcard-postmessage-configuration):  window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/packages/react-devtools-inline/src/frontend.js:44:9:warning(insufficient-postmessage-origin-validation):        window.addEventListener('message', onMessage);:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/transover/packages/react-devtools-shared/src/__tests__/utils.js:266:5:warning(detect-non-literal-regexp):    new RegExp(source); // eslint-disable-line no-new:RegExp() called with a `source` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/__tests__/utils.js:306:5:warning(detect-non-literal-regexp):    new RegExp(source); // eslint-disable-line no-new:RegExp() called with a `source` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/backend/agent.js:51:7:info(unsafe-formatstring):      `%cAgent %c${methodName}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/backend/legacy/renderer.js:611:7:warning(prototype-pollution-loop):      current = current[key];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/transover/packages/react-devtools-shared/src/backend/legacy/renderer.js:624:9:warning(prototype-pollution-loop):        current = current[path[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/transover/packages/react-devtools-shared/src/backend/legacy/renderer.js:873:9:info(unsafe-formatstring):        `[Click to expand] %c<${result.displayName || 'Component'} />`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:899:15:warning(detect-non-literal-regexp):              new RegExp(componentFilter.value, 'i'),:RegExp() called with a `componentFilter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:908:39:warning(detect-non-literal-regexp):            hideElementsWithPaths.add(new RegExp(componentFilter.value, 'i'));:RegExp() called with a `componentFilter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:3469:7:warning(prototype-pollution-loop):      current = current[key];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:3517:9:warning(prototype-pollution-loop):        current = current[path[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:863:9:info(unsafe-formatstring):        `[renderer] %c${name} %c${displayName} (${maybeID}) %c${:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:3671:13:info(unsafe-formatstring):            'React DevTools encountered an error while trying to inspect hooks. ' +:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/backend/renderer.js:3778:9:info(unsafe-formatstring):        `[Click to expand] %c<${result.displayName || 'Component'} />`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/devtools/store.js:56:7:info(unsafe-formatstring):      `%cStore %c${methodName}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/devtools/views/Profiler/CommitTreeBuilder.js:34:7:info(unsafe-formatstring):      `%cCommitTreeBuilder %c${methodName}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js:196:15:warning(detect-non-literal-regexp):              new RegExp(value); // eslint-disable-line no-new:RegExp() called with a `value` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/devtools/views/utils.js:45:14:warning(detect-non-literal-regexp):      return new RegExp(string, 'i');:RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/devtools/views/utils.js:79:12:warning(detect-non-literal-regexp):    return new RegExp(firstChar + restRegex);:RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/devtools/views/utils.js:83:10:warning(detect-non-literal-regexp):  return new RegExp(:RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:77:48:warning(path-join-resolve-traversal):  const code = readFileSync(resolve(sourceDir, fileName), 'utf8');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:99:26:warning(path-join-resolve-traversal):    resolve(externalDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:105:26:warning(path-join-resolve-traversal):    resolve(externalDir, `${fileName}.map`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:112:24:warning(path-join-resolve-traversal):    resolve(inlineDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:140:27:warning(path-join-resolve-traversal):    resolve(noColumnsDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:170:34:warning(path-join-resolve-traversal):    resolve(externalIndexMapDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:176:34:warning(path-join-resolve-traversal):    resolve(externalIndexMapDir, `${fileName}.map`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:183:32:warning(path-join-resolve-traversal):    resolve(inlineIndexMapDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:239:41:warning(path-join-resolve-traversal):    resolve(inlineFbSourcesExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:246:43:warning(path-join-resolve-traversal):    resolve(externalFbSourcesExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:252:43:warning(path-join-resolve-traversal):    resolve(externalFbSourcesExtendedDir, `${fileName}.map`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:258:49:warning(path-join-resolve-traversal):    resolve(inlineFbSourcesIndexMapExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:265:51:warning(path-join-resolve-traversal):    resolve(externalFbSourcesIndexMapExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:271:51:warning(path-join-resolve-traversal):    resolve(externalFbSourcesIndexMapExtendedDir, `${fileName}.map`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:278:44:warning(path-join-resolve-traversal):    resolve(inlineReactSourcesExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:285:46:warning(path-join-resolve-traversal):    resolve(externalReactSourcesExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:291:46:warning(path-join-resolve-traversal):    resolve(externalReactSourcesExtendedDir, `${fileName}.map`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:297:52:warning(path-join-resolve-traversal):    resolve(inlineReactSourcesIndexMapExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:304:54:warning(path-join-resolve-traversal):    resolve(externalReactSourcesIndexMapExtendedDir, fileName),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:310:54:warning(path-join-resolve-traversal):    resolve(externalReactSourcesIndexMapExtendedDir, `${fileName}.map`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/hooks/__tests__/updateMockSourceMaps.js:344:45:warning(path-join-resolve-traversal):  const stat = lstatSync(resolve(sourceDir, entry));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/packages/react-devtools-shared/src/registerDevToolsEventLogger.js:36:9:warning(wildcard-postmessage-configuration):        currentLoggingIFrame?.contentWindow?.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/transover/packages/react-devtools-timeline/src/TimelineSearchContext.js:77:24:warning(detect-non-literal-regexp):        searchRegExp = new RegExp(`^${safeSearchText}`, 'i');:RegExp() called with a `action` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-devtools-timeline/src/TimelineSearchContext.js:77:24:warning(detect-non-literal-regexp):        searchRegExp = new RegExp(`^${safeSearchText}`, 'i');:RegExp() called with a `state` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMComponent-test.js:1556:30:warning(detect-non-literal-regexp):      expect(actual).toMatch(new RegExp(re));:RegExp() called with a `expected` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMComponent-test.js:1590:14:warning(detect-non-literal-regexp):      return new RegExp(re).test(actual);:RegExp() called with a `expected` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMEventListener-test.js:1219:7:error(insecure-document-method):      container.innerHTML = ReactDOMServer.renderToString(tree);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzDeferredValue-test.js:64:5:error(insecure-document-method):    temp.innerHTML = result;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js:80:5:error(insecure-document-method):    temp.innerHTML = result;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js:261:13:error(insecure-document-method):            source.innerHTML = tempHeadNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js:275:13:error(insecure-document-method):            source.innerHTML = tempBodyNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js:286:11:error(insecure-document-method):          div.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js:295:9:error(insecure-document-method):        source.innerHTML = tempHeadNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js:307:11:error(insecure-document-method):          bodySource.innerHTML = tempBodyNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js:316:9:error(insecure-document-method):        div.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzShellHydration-test.js:90:5:error(insecure-document-method):    fakeBody.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzStatic-test.js:83:5:error(insecure-document-method):    fakeBody.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js:110:5:error(insecure-document-method):    temp.innerHTML = result;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzStaticFloat-test.js:58:5:error(insecure-document-method):    temp.innerHTML = result;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFizzSuppressHydrationWarning-test.js:89:5:error(insecure-document-method):    fakeBody.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFloat-test.js:181:13:error(insecure-document-method):            source.innerHTML = tempHeadNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFloat-test.js:195:13:error(insecure-document-method):            source.innerHTML = tempBodyNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFloat-test.js:206:11:error(insecure-document-method):          div.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFloat-test.js:215:9:error(insecure-document-method):        source.innerHTML = tempHeadNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFloat-test.js:227:11:error(insecure-document-method):          bodySource.innerHTML = tempBodyNode.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMFloat-test.js:236:9:error(insecure-document-method):        div.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js:72:5:error(insecure-document-method):    container.innerHTML = htmlString;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:655:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:665:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:674:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:683:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:701:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:716:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:1491:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMInput-test.js:1583:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMOption-test.js:252:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(children);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMRoot-test.js:158:5:error(insecure-document-method):    container1.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMRoot-test.js:168:5:error(insecure-document-method):    container2.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMSelect-test.js:562:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(stub);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMSelect-test.js:581:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(stub);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMSelect-test.js:617:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(stub);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMSelect-test.js:636:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(stub);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js:921:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerIntegrationRefs-test.js:89:7:error(insecure-document-method):      root.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:177:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:229:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:293:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:384:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:466:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:558:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:652:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:733:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:809:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:893:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:980:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1037:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1084:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1143:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1193:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1246:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1309:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1366:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1414:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1486:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1559:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1637:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1713:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1788:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1869:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:1937:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2019:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2098:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2168:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2243:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2326:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2407:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2492:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2566:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2636:5:error(insecure-document-method):    container.innerHTML = html + '<!--unrelated comment-->';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2691:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2742:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2834:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2910:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:2991:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3075:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3154:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3232:5:error(insecure-document-method):    childContainer.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3310:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3405:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3487:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3546:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3580:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3605:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3630:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3677:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3716:7:error(insecure-document-method):      container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3788:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3825:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js:3856:5:error(insecure-document-method):    container2.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:191:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:265:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:350:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:429:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:509:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:597:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:685:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:817:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:983:7:error(insecure-document-method):      outerContainer.innerHTML = outerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:988:7:error(insecure-document-method):      innerContainer.innerHTML = innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1167:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1252:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1315:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1368:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1491:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1556:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1612:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1664:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1700:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1736:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1786:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1844:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js:1883:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js:86:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js:97:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js:113:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js:137:5:error(insecure-document-method):    container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMTextComponent-test.js:191:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(children);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMTextComponent-test.js:209:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(children);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMTextarea-test.js:232:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMTextarea-test.js:241:5:error(insecure-document-method):    div.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactDOMUseId-test.js:84:5:error(insecure-document-method):    fakeBody.innerHTML = bufferedContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactIdentity-test.js:120:58:warning(unknown-value-with-script-tag):    await renderAComponentWithKeyIntoContainer(h4x0rKey, root);:Cannot determine what 'root' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'root' is not externally controlled, or sanitize this data.
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:100:7:error(insecure-document-method):      element.innerHTML = lastMarkup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:125:7:error(insecure-document-method):      element.innerHTML = lastMarkup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:174:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:195:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:216:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:252:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:351:7:error(insecure-document-method):      element.innerHTML = ReactDOMServer.renderToString(markup);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:377:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(markup);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:397:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(markup);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:429:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(markup);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:480:5:error(insecure-document-method):    element.innerHTML = ReactDOMServer.renderToString(<HelloWorld />);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:496:5:error(insecure-document-method):    container.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:515:5:error(insecure-document-method):    domElement.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:529:5:error(insecure-document-method):    domElement.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:565:5:error(insecure-document-method):    domElement.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:595:7:error(insecure-document-method):      element.innerHTML = ReactDOMServer.renderToString(jsx);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:615:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(jsx);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:662:5:error(insecure-document-method):    container.innerHTML = ReactDOMServer.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js:708:5:error(insecure-document-method):    container.innerHTML = ReactDOMServerBrowser.renderToString(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js:45:7:error(insecure-document-method):      container.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/client/__tests__/getNodeForCharacterOffset-test.js:19:3:error(insecure-document-method):  node.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/events/__tests__/DOMPluginEventSystem-test.internal.js:704:11:error(insecure-document-method):          childContainer.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom/src/events/__tests__/DOMPluginEventSystem-test.internal.js:1405:13:error(insecure-document-method):            container.innerHTML = output;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom-bindings/src/client/ReactDOMComponent.js:297:5:error(insecure-document-method):    testElement.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom-bindings/src/client/ReactDOMComponent.js:580:13:error(insecure-document-method):            domElement.innerHTML = nextHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom-bindings/src/client/ReactDOMComponent.js:921:13:error(insecure-document-method):            domElement.innerHTML = nextHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom-bindings/src/client/setInnerHTML.js:45:7:error(insecure-document-method):      reusableSVGContainer.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-dom-bindings/src/client/setInnerHTML.js:59:3:error(insecure-document-method):  node.innerHTML = (html: any);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-reconciler/src/__tests__/ReactScope-test.internal.js:275:7:error(insecure-document-method):      container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-reconciler/src/__tests__/ReactScope-test.internal.js:362:7:error(insecure-document-method):      container2.innerHTML = finalHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMForm-test.js:110:5:error(insecure-document-method):    temp.innerHTML = result;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js:132:5:error(insecure-document-method):    temp.innerHTML = result;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/transover/scripts/bench/benchmarks/hacker-news/build.js:8:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/hacker-news/build.js:12:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react-dom.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/pe-class-components/build.js:8:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/pe-class-components/build.js:12:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react-dom.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/pe-functional-components/build.js:8:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/pe-functional-components/build.js:12:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react-dom.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/pe-no-components/build.js:8:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/benchmarks/pe-no-components/build.js:12:10:warning(path-join-resolve-traversal):    join(reactPath, 'build', 'dist', 'react-dom.production.min.js'),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/build.js:47:47:warning(path-join-resolve-traversal):  await require(join(__dirname, 'benchmarks', benchmark, 'build.js'))(:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/bench/runner.js:19:44:warning(path-join-resolve-traversal):    statSync(join(__dirname, 'benchmarks', file)).isDirectory():Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/circleci/download_devtools_regression_build.js:55:46:warning(path-join-resolve-traversal):    (str, name) => `${str} ${join(buildPath, name)}`,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/circleci/download_devtools_regression_build.js:72:72:warning(path-join-resolve-traversal):    (str, name) => `${str} ${join(regressionBuildPath, 'node_modules', name)}`,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/devtools/build-and-test.js:29:7:info(unsafe-formatstring):      chalk.bold('  ' + join(packagesPath, 'react-devtools-core')),:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/scripts/devtools/build-and-test.js:33:7:info(unsafe-formatstring):      chalk.bold('  ' + join(packagesPath, 'react-devtools-inline')),:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/transover/scripts/devtools/prepare-release.js:248:34:warning(path-join-resolve-traversal):    const path = join(ROOT_PATH, partialPath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/devtools/prepare-release.js:266:34:warning(path-join-resolve-traversal):    const path = join(ROOT_PATH, partialPath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/error-codes/extract-errors.js:55:19:warning(insecure-object-assign):        newJSON = Object.assign({}, originalJSON);:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
data/tempCode/transover/scripts/flow/createFlowConfigs.js:27:30:warning(path-join-resolve-traversal):  const basePath = path.join(file, '..');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/flow/createFlowConfigs.js:28:31:warning(path-join-resolve-traversal):  const forksPath = path.join(basePath, 'forks');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/flow/createFlowConfigs.js:29:54:warning(path-join-resolve-traversal):  const forks = fs.readdirSync(path.join('packages', forksPath));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/jest/config.build-devtools.js:26:42:warning(path-join-resolve-traversal):  const packagePath = join(packagesRoot, dir, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/jest/config.build.js:24:42:warning(path-join-resolve-traversal):  const packagePath = join(packagesRoot, dir, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/jest/setupHostConfigs.js:132:64:warning(path-join-resolve-traversal):          fs.statSync(nodePath.join(process.cwd(), 'packages', candidate));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/prettier/index.js:47:24:warning(path-join-resolve-traversal):      return path.join(ignoredPath, '/**');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/add-build-info-json.js:17:28:warning(path-join-resolve-traversal):  const packagesDir = join(tempDirectory, 'packages');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/add-build-info-json.js:30:30:warning(path-join-resolve-traversal):    const packagePath = join(packagesDir, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/add-build-info-json.js:30:43:warning(path-join-resolve-traversal):    const packagePath = join(packagesDir, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/add-build-info-json.js:31:45:warning(path-join-resolve-traversal):    const packageJSON = await readJson(join(packagePath, 'package.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/add-build-info-json.js:42:25:warning(path-join-resolve-traversal):    if (existsSync(join(packagePath, 'npm'))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/add-build-info-json.js:43:38:warning(path-join-resolve-traversal):      const buildInfoJSONPath = join(packagePath, 'npm', 'build-info.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/build-artifacts.js:18:36:warning(path-join-resolve-traversal):  const tempNodeModulesPath = join(tempDirectory, 'build', 'node_modules');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/build-artifacts.js:19:26:warning(path-join-resolve-traversal):  const buildPath = join(cwd, 'build');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/copy-repo-to-temp-directory.js:15:40:warning(path-join-resolve-traversal):  if (tempDirectory !== join(tmpdir(), directory)) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/npm-pack-and-unpack.js:17:42:warning(path-join-resolve-traversal):  const builtPackages = readdirSync(join(tempDirectory, 'build/node_modules/'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/npm-pack-and-unpack.js:32:47:warning(path-join-resolve-traversal):  const compressedPackages = readdirSync(join(cwd, 'build/node_modules/'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/build-release-locally-commands/npm-pack-and-unpack.js:39:12:warning(path-join-resolve-traversal):      join(cwd, `./build/node_modules/package/package.json`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:14:26:warning(path-join-resolve-traversal):    if (!existsSync(join(cwd, 'build', 'node_modules', 'react'))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:21:24:warning(path-join-resolve-traversal):  if (!existsSync(join(cwd, 'build'))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:29:32:warning(path-join-resolve-traversal):  const nodeModulesPath = join(cwd, 'build/node_modules');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:43:27:warning(path-join-resolve-traversal):    const filePath = join(nodeModulesPath, `${packageName}.tgz`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:43:44:warning(path-join-resolve-traversal):    const filePath = join(nodeModulesPath, `${packageName}.tgz`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:44:30:warning(path-join-resolve-traversal):    const packagePath = join(nodeModulesPath, `${packageName}`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:44:47:warning(path-join-resolve-traversal):    const packagePath = join(nodeModulesPath, `${packageName}`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/prepare-release-from-npm-commands/check-out-packages.js:45:34:warning(path-join-resolve-traversal):    const tempPackagePath = join(nodeModulesPath, 'package');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/confirm-version-and-tags.js:32:7:warning(path-join-resolve-traversal):      cwd,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/confirm-version-and-tags.js:34:7:warning(path-join-resolve-traversal):      packageName,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:29:34:warning(path-join-resolve-traversal):    const nodeModulesPath = join(cwd, 'build/node_modules');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:45:11:warning(path-join-resolve-traversal):          cwd,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:48:11:warning(path-join-resolve-traversal):          arbitraryPackageName,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:102:29:warning(path-join-resolve-traversal):        if (existsSync(join(nodeModulesPath, packageName, 'umd'))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:102:46:warning(path-join-resolve-traversal):        if (existsSync(join(nodeModulesPath, packageName, 'umd'))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:104:18:warning(path-join-resolve-traversal):            join(nodeModulesPath, packageName, 'package.json'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/print-follow-up-instructions.js:104:35:warning(path-join-resolve-traversal):            join(nodeModulesPath, packageName, 'package.json'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/publish-to-npm.js:12:28:warning(path-join-resolve-traversal):  const packagePath = join(cwd, 'build/node_modules', packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/publish-to-npm.js:12:55:warning(path-join-resolve-traversal):  const packagePath = join(cwd, 'build/node_modules', packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/publish-to-npm.js:13:39:warning(path-join-resolve-traversal):  const {version} = readJsonSync(join(packagePath, 'package.json'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:15:32:warning(path-join-resolve-traversal):  const nodeModulesPath = join(cwd, 'build/node_modules');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:16:29:warning(path-join-resolve-traversal):  const packagesPath = join(cwd, 'packages');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:22:12:warning(path-join-resolve-traversal):      join(nodeModulesPath, packageName, 'package.json'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:22:29:warning(path-join-resolve-traversal):      join(nodeModulesPath, packageName, 'package.json'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:25:7:warning(path-join-resolve-traversal):      packagesPath,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:26:7:warning(path-join-resolve-traversal):      packageName,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:40:41:warning(path-join-resolve-traversal):    const sourceReactVersionPath = join(cwd, 'packages/shared/ReactVersion.js');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/update-stable-version-numbers.js:42:12:warning(path-join-resolve-traversal):      join(nodeModulesPath, 'react', 'package.json'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/validate-skip-packages.js:12:5:warning(path-join-resolve-traversal):    cwd,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/publish-commands/validate-skip-packages.js:15:5:warning(path-join-resolve-traversal):    name,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/shared-commands/download-build-artifacts.js:42:24:warning(path-join-resolve-traversal):  if (!existsSync(join(cwd, 'build'))) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/shared-commands/test-packaging-fixture.js:45:42:warning(path-join-resolve-traversal):    exec('node build-all.js', {cwd: join(cwd, 'fixtures/packaging')}),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:106:28:warning(path-join-resolve-traversal):  const packagesDir = join(cwd, 'packages');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:226:28:warning(path-join-resolve-traversal):  const packagesDir = join(cwd, 'packages');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:231:39:warning(path-join-resolve-traversal):  const sourceReactVersionPath = join(cwd, 'packages/shared/ReactVersion.js');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:241:34:warning(path-join-resolve-traversal):    const packageJSONPath = join(cwd, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:249:30:warning(path-join-resolve-traversal):    const packagePath = join(packagesDir, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:249:43:warning(path-join-resolve-traversal):    const packagePath = join(packagesDir, packageName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/release/utils.js:252:34:warning(path-join-resolve-traversal):    const packageJSONPath = join(packagePath, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build-all-release-channels.js:299:39:warning(path-join-resolve-traversal):    const packageJSONPath = path.join(modulesDir, moduleName, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build-all-release-channels.js:299:51:warning(path-join-resolve-traversal):    const packageJSONPath = path.join(modulesDir, moduleName, 'package.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build-all-release-channels.js:382:38:warning(path-join-resolve-traversal):    const sourceFileName = path.join(source, sourceFileBaseName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build-all-release-channels.js:382:46:warning(path-join-resolve-traversal):    const sourceFileName = path.join(source, sourceFileBaseName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build-all-release-channels.js:383:38:warning(path-join-resolve-traversal):    const targetFileName = path.join(destination, sourceFileBaseName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build-all-release-channels.js:383:51:warning(path-join-resolve-traversal):    const targetFileName = path.join(destination, sourceFileBaseName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/build.js:592:13:warning(path-join-resolve-traversal):            outputFolder,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/packaging.js:143:28:warning(path-join-resolve-traversal):    .map(file => path.join(directory, file));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/packaging.js:143:39:warning(path-join-resolve-traversal):    .map(file => path.join(directory, file));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/plugins/use-forks-plugin.js:39:35:warning(path-join-resolve-traversal):      path.resolve(process.cwd(), srcModule),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/plugins/use-forks-plugin.js:45:39:warning(path-join-resolve-traversal):        ? path.resolve(process.cwd(), targetModule):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/utils.js:79:40:warning(path-join-resolve-traversal):    return path.join(process.env.HOME, filepath.slice(1));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/utils.js:81:25:warning(path-join-resolve-traversal):    return path.resolve(filepath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/transover/scripts/rollup/validate/index.js:61:46:warning(path-join-resolve-traversal):    overrideConfigFile: path.join(__dirname, `eslintrc.${format}.js`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
