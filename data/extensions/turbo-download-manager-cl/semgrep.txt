data/tempCode/turbo-download-manager-cl/server/server.js:17:1:warning(using-http-server):http.createServer(function (req, res) {:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
data/tempCode/turbo-download-manager-cl/src/data/about/index.html:52:35:warning(plaintext-http-link):        <tr><td>FAQs page</td><td><a href="http://add0n.com/turbo-download-manager.html">Link</a></td></tr>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/turbo-download-manager-cl/src/data/info/index.js:23:7:error(insecure-document-method):      msg.innerHTML = converter.makeHtml(obj.log);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:382:21:warning(detect-non-literal-regexp):        ext.regex = new RegExp(ext.regex, 'g');:RegExp() called with a `extension` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:529:15:warning(detect-non-literal-regexp):  var regex = new RegExp(regexString, 'g');:RegExp() called with a `charsToEscape` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:539:9:warning(detect-non-literal-regexp):    x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:539:9:warning(detect-non-literal-regexp):    x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),:RegExp() called with a `left` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:539:9:warning(detect-non-literal-regexp):    x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),:RegExp() called with a `right` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:540:9:warning(detect-non-literal-regexp):    l = new RegExp(left, f.replace(/g/g, '')),:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:540:9:warning(detect-non-literal-regexp):    l = new RegExp(left, f.replace(/g/g, '')),:RegExp() called with a `left` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/data/info/showdown.js:2232:12:warning(detect-non-literal-regexp):      re = new RegExp(re, 'g');:RegExp() called with a `ext` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/turbo-download-manager-cl/src/lib/firefox/firefox.js:548:7:warning(wildcard-postmessage-configuration):      window.postMessage('detach', '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/turbo-download-manager-cl/src/lib/wget.js:435:17:warning(detect-non-literal-regexp):        let r = new RegExp('\.(' + extension.join('|') + ')$');:RegExp() called with a `obj` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
