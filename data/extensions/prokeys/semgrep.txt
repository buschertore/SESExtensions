data/tempCode/prokeys/html/options.html:1054:8:warning(plaintext-http-link):							<a href="http://stackexchange.com/users/3136569/gaurang-tandon">StackExchange</a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/prokeys/html/options.html:1072:8:warning(plaintext-http-link):							<a href="http://severaltales.blogspot.in/">Blog</a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/prokeys/html/options.html:1074:8:warning(plaintext-http-link):							<a href="http://singhgalus.deviantart.com/">DeviantArt</a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/prokeys/html/options.html:1083:7:warning(plaintext-http-link):						<a class="fb-share":This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/prokeys/html/options.html:1088:7:warning(plaintext-http-link):						<a target="_blank" class='tw-share':This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/prokeys/js/detector.js:550:22:warning(eval-detected):            result = eval(result.replace(/%/g, "/100"));:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/prokeys/js/options.js:355:13:error(insecure-document-method):            span.innerHTML = VERSION;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/options.js:389:21:error(insecure-document-method):                    tablerow.firstElementChild.innerHTML = gTranlateImmune(tablerow.firstElementChild.innerHTML);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/options.js:419:17:error(insecure-document-method):                link.innerHTML = `no ${type} data found`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/options.js:430:21:error(insecure-document-method):                    link.innerHTML = `${type} recovered data`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/primitiveExtend.js:98:34:warning(detect-non-literal-regexp):        return this.className && new RegExp(`(^|\\s)${className}(\\s|$)`).test(this.className);:RegExp() called with a `className` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:637:13:error(insecure-document-method):            replaced.innerHTML = tle.outerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:674:5:error(insecure-document-method):    htmlNode.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:867:13:error(insecure-document-method):            pElm.outerHTML = content;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:883:5:error(insecure-document-method):    $container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:969:5:error(insecure-document-method):    $container.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:1030:9:error(insecure-document-method):        $refDiv.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:1085:5:error(insecure-document-method):    htmlNode.innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:1089:5:error(insecure-document-method):    htmlNode.innerHTML = htmlNode.innerHTML.replace(/&nbsp;/g, " ");:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:1430:9:error(insecure-document-method):        div.innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:2129:13:error(insecure-document-method):            $richEditor.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/snippetClasses.js:26:16:warning(detect-non-literal-regexp):        return new RegExp(text, "i").test(this.name);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:32:16:warning(detect-non-literal-regexp):        return new RegExp(text, "i").test(this.name + this.strippedBody);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:37:16:warning(detect-non-literal-regexp):        return new RegExp(`\\b${text}\\b`, "i").test(this.name + this.strippedBody);:RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:422:37:warning(detect-non-literal-regexp):            string = string.replace(new RegExp(`^\\${startReplacement}`), "");:RegExp() called with a `startReplacement` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:424:40:warning(detect-non-literal-regexp):            const array = string.split(new RegExp(`\\${delimiter}`, "g")),:RegExp() called with a `delimiter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:432:35:warning(detect-non-literal-regexp):            return string.replace(new RegExp(`^\\${startReplacement}`), "").split(delimiter)[:RegExp() called with a `startReplacement` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:1442:13:warning(detect-non-literal-regexp):            new RegExp(escapeRegExp(keyword), "ig"),:RegExp() called with a `keyword` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/snippetClasses.js:2030:37:warning(detect-non-literal-regexp):            string = string.replace(new RegExp(elm[regexIndex], "g"), elm[replacerIdx]);:RegExp() called with a `convertForHTML` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/prokeys/js/textmethods.js:15:9:error(insecure-document-method):        listParent.innerHTML = resultString;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/textmethods.js:136:17:error(insecure-document-method):                node.innerHTML = newVal.replace(/ $/g, "&nbsp;").replace(/ {2}/g, " &nbsp;");:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/prokeys/js/textmethods.js:139:21:error(insecure-document-method):                    node.innerHTML = node.innerHTML.replace(/\n/g, "<br>");:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
