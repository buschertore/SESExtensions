data/tempCode/notifier-for-gmail/v1/builds/unpacked/chrome/data/options/index.html:17:11:warning(django-no-csrf-token):          <form action="https://www.paypal.com/cgi-bin/webscr" method="post">:Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
data/tempCode/notifier-for-gmail/v1/builds/unpacked/chrome/data/popup/index.js:402:7:error(insecure-document-method):      qs("iframe").contentDocument.body.innerHTML = content;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/notifier-for-gmail/v1/builds/unpacked/chrome/lib/utils/render.js:171:3:error(insecure-document-method):  node.innerHTML = node.innerHTML.replace(/<br>/g, '\n');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/notifier-for-gmail/v1/builds/unpacked/chrome/lib/utils/render.js:174:5:error(insecure-document-method):    paras[i].innerHTML += 'NEWLINE';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/notifier-for-gmail/v1/compile/convert.js:50:46:warning(path-join-resolve-traversal):    fs.unlinkSync(path.resolve('src/locale', file));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/notifier-for-gmail/v1/src/data/options/index.html:17:11:warning(django-no-csrf-token):          <form action="https://www.paypal.com/cgi-bin/webscr" method="post">:Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
data/tempCode/notifier-for-gmail/v1/src/data/popup/index.js:402:7:error(insecure-document-method):      qs("iframe").contentDocument.body.innerHTML = content;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/notifier-for-gmail/v1/src/lib/utils/render.js:171:3:error(insecure-document-method):  node.innerHTML = node.innerHTML.replace(/<br>/g, '\n');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/notifier-for-gmail/v1/src/lib/utils/render.js:174:5:error(insecure-document-method):    paras[i].innerHTML += 'NEWLINE';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1215:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1215:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `nestedKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1215:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1215:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `replacementHash` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1216:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(f.escape(value)));:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1216:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(f.escape(value)));:RegExp() called with a `nestedKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1216:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(f.escape(value)));:RegExp() called with a `options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1216:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(f.escape(value)));:RegExp() called with a `replacementHash` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1218:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1218:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `nestedKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1218:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1218:39:warning(detect-non-literal-regexp):                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.regexReplacementEscape(value));:RegExp() called with a `replacementHash` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:298:33:warning(prototype-pollution-loop):                                value = value[keys[x]] = defaultValue;:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:300:33:warning(prototype-pollution-loop):                                value = value[keys[x]] = value[keys[x]] || {};:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:1000:17:warning(prototype-pollution-loop):                node = node[keys[x]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/i18next-1.7.4.js:2763:29:warning(prototype-pollution-loop):                            arg = arg[match[2][k]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/notifier-for-gmail/v1/src/lib/wrapper/safari/q.js:434:26:info(unsafe-formatstring):            console.warn(name + " is deprecated, use " + alternative +:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/notifier-for-gmail/v3.classic/core/utils/log.js:29:16:info(unsafe-formatstring):  console.info('%c' + origin, 'color:' + cc[n], ...args);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/notifier-for-gmail/v3.dev/data/popup/api.js:105:13:warning(wildcard-postmessage-configuration):            iframe.contentWindow.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/notifier-for-gmail/v3.dev/data/popup/externals/moment/moment.js:799:20:warning(detect-non-literal-regexp):            return new RegExp(unescapeFormat(token));:RegExp() called with a `token` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
