data/tempCode/hover-zoom+/js/hoverzoom.js:3945:22:warning(detect-non-literal-regexp):                re = new RegExp(searchKey);:RegExp() called with a `searchKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/js/hoverzoom.js:4003:22:warning(detect-non-literal-regexp):                re = new RegExp(searchValue);:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/js/hoverzoom.js:4064:29:warning(prototype-pollution-loop):        keys.forEach(key => result = result[key]);:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/hover-zoom+/js/libs/modernizr-2.7.1.js:125:7:error(insecure-document-method):      (body ? div : fakeBody).innerHTML += style;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/hover-zoom+/js/libs/modernizr-2.7.1.js:1077:11:error(insecure-document-method):          p.innerHTML = 'x<style>' + cssText + '</style>';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/hover-zoom+/plugins/bilibili_a.js:101:56:warning(unknown-value-with-script-tag):                    let playinfo = innerHTML.substring(index1 + token1.length - 1, index2 + 1);:Cannot determine what 'index1' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'index1' is not externally controlled, or sanitize this data.
data/tempCode/hover-zoom+/plugins/bilibili_a.js:101:84:warning(unknown-value-with-script-tag):                    let playinfo = innerHTML.substring(index1 + token1.length - 1, index2 + 1);:Cannot determine what 'index2' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'index2' is not externally controlled, or sanitize this data.
data/tempCode/hover-zoom+/plugins/duckduckgo.js:58:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchKey);:RegExp() called with a `searchKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/duckduckgo.js:115:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchValue);:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/duckduckgo.js:169:33:warning(prototype-pollution-loop):            keys.forEach(key => result = result[key]);:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/hover-zoom+/plugins/flickr.js:449:164:error(detected-generic-api-key):                            var requestUrl = 'https://api.flickr.com/services/rest/?photo_id=' + id + '&method=flickr.photos.getSizes&format=json&nojsoncallback=1&api_key=9bb671af308f509d0c82146cbc936b3c';:Generic API Key detected
data/tempCode/hover-zoom+/plugins/flickr.js:111:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchKey);:RegExp() called with a `searchKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/flickr.js:168:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchValue);:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/flickr.js:217:33:warning(prototype-pollution-loop):            keys.forEach(key => result = result[key]);:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/hover-zoom+/plugins/flickr_a.js:94:23:error(detected-generic-api-key):                //var apiKey = '0bb8ac4ab9a737b644c407ba8f59e9e7';:Generic API Key detected
data/tempCode/hover-zoom+/plugins/flickr_a.js:95:23:error(detected-generic-api-key):                //var apiKey = '26a8c097b4cc3237a4efad4df5f8fc7a';:Generic API Key detected
data/tempCode/hover-zoom+/plugins/flickr_a.js:96:23:error(detected-generic-api-key):                const apiKey = '9bb671af308f509d0c82146cbc936b3c';:Generic API Key detected
data/tempCode/hover-zoom+/plugins/imgur_a.js:19:13:error(insecure-document-method):            e.innerHTML = input;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/hover-zoom+/plugins/kick_a.js:95:148:error(detected-jwt-token):        // => live url: https://fa723fc1b171.us-west-2.playback.live-video.net/api/video/v1/us-west-2.196233775518.channel.1IvyLgocb1PI.m3u8?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzM4NCJ9.eyJhd3M6Y2hhbm5lbC1hcm4iOiJhcm46YXdzOml2czp1cy13ZXN0LTI6MTk2MjMzNzc1NTE4OmNoYW5uZWwvMUl2eUxnb2NiMVBJIiwiYXdzOmFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbiI6Imh0dHBzOi8va2ljay5jb20iLCJhd3M6c3RyaWN0LW9yaWdpbi1lbmZvcmNlbWVudCI6ZmFsc2UsImV4cCI6MTY3OTI0OTU0OX0.DeM-3K2LOzPU2uNaYx2pvqj0R-35XBGQGJ0_uVKV8QPMQ2laQa_ENZ0FsDsXPqMJ2R7HLZZMY_Ep9cLMojO9sF87g2Wp8vQ203kJ1YXOjbsj1hZHDGTB4oEaTkSPtWr4:JWT token detected
data/tempCode/hover-zoom+/plugins/picclick.js:106:24:warning(incomplete-sanitization):            var data = response.replace('data(', '').replace(');', '').replace("'", " ");:`response.replace('data(', '').replace(');', '').replace` method will only replace the first occurrence when used with a string argument ("'"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/hover-zoom+/plugins/qwant.js:63:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchValue);:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/qwant.js:112:33:warning(prototype-pollution-loop):            keys.forEach(key => result = result[key]);:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/hover-zoom+/plugins/sogou.js:55:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchKey);:RegExp() called with a `searchKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/sogou.js:112:26:warning(detect-non-literal-regexp):                    re = new RegExp(searchValue);:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hover-zoom+/plugins/sogou.js:166:33:warning(prototype-pollution-loop):            keys.forEach(key => result = result[key]);:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/hover-zoom+/plugins/thingiverse.js:12:17:error(detected-generic-api-key):            var apiKey = '56edfc79ecf25922b98202dd79a291aa'; // directly from https://cdn.thingiverse.com/site/js/app.bundle.js:Generic API Key detected
data/tempCode/hover-zoom+/plugins/tumblr_a.js:99:99:error(detected-generic-api-key):            $.getJSON('https://api.tumblr.com/v2/blog/' + blog_name + '/posts?id=' + aHref[4] + '&api_key=GSgWCc96GxL3x2OlEtMUE56b8gjbFHSV5wf8Zm8Enr1kNcjt3U&npf=true', function (data) {:Generic API Key detected
