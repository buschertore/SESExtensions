data/tempCode/word-replacer-max/packages/content/vite.config.ts:30:17:warning(path-join-resolve-traversal):                `${basename(:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/word-replacer-max/packages/shared/__test__/parse/searchNode.test.ts:95:7:error(insecure-document-method):      document.body.innerHTML = `:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-replacer-max/packages/shared/src/replace.ts:21:20:warning(detect-non-literal-regexp):  case: (query) => new RegExp(query, "g"),:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/word-replacer-max/packages/shared/src/replace.ts:22:23:warning(detect-non-literal-regexp):  default: (query) => new RegExp(query, "gi"),:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/word-replacer-max/packages/shared/src/replace.ts:23:28:warning(detect-non-literal-regexp):  regex: (query, flags) => new RegExp(query, flags),:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/word-replacer-max/packages/shared/src/replace.ts:23:28:warning(detect-non-literal-regexp):  regex: (query, flags) => new RegExp(query, flags),:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/word-replacer-max/packages/shared/src/replace.ts:25:5:warning(detect-non-literal-regexp):    new RegExp(`(^|\\s)${escapeRegex(query)}($|\\s)`, flags),:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/word-replacer-max/packages/shared/src/replace.ts:25:5:warning(detect-non-literal-regexp):    new RegExp(`(^|\\s)${escapeRegex(query)}($|\\s)`, flags),:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
