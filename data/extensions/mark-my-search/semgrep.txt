data/tempCode/mark-my-search/src/background.ts:96:4:warning(detect-non-literal-regexp):			(new RegExp(sanitize(hostname) + "\\b")).test(url.hostname):RegExp() called with a `{ hostname, pathname }` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/mark-my-search/src/background.ts:97:47:warning(detect-non-literal-regexp):			&& (pathname === "" || pathname === "/" || (new RegExp("\\b" + sanitize(pathname.slice(1)))).test(url.pathname.slice(1))):RegExp() called with a `{ hostname, pathname }` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/mark-my-search/src/content.ts:2116:3:error(insecure-document-method):		gutter.innerHTML = markersHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mark-my-search/src/content.ts:2167:4:error(insecure-document-method):			highlight.outerHTML = highlight.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mark-my-search/src/content.ts:3111:3:error(insecure-document-method):		gutter.innerHTML = markersHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/mark-my-search/src/include/pattern-diacritic.ts:53:3:warning(detect-non-literal-regexp):		new RegExp(:RegExp() called with a `characterGroups` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/mark-my-search/src/include/pattern-diacritic.ts:53:3:warning(detect-non-literal-regexp):		new RegExp(:RegExp() called with a `patternString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/mark-my-search/src/include/pattern-stem.ts:260:33:warning(detect-non-literal-regexp):		const replacePatternReverse = new RegExp(:RegExp() called with a `suffix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
