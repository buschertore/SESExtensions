data/tempCode/gumbo-twitch-companion/src/browser/components/Renderer.tsx:7:78:warning(react-dangerouslysetinnerhtml):  return <div className={props.className} dangerouslySetInnerHTML={{ __html: props.content }} />;:Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.
data/tempCode/gumbo-twitch-companion/src/browser/helpers/array.ts:12:25:warning(detect-non-literal-regexp):  const searchPattern = new RegExp(escapeRegExp(query), "i");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
