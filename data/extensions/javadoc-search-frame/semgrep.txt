data/tempCode/javadoc-search-frame/src/common/lib/OptionsPageGenerator.js:129:3:error(insecure-document-method):  errorMessageElement.innerHTML = Messages.get('optionsReadOnly');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/javadoc-search-frame/src/common/lib/common.js:560:3:error(insecure-document-method):  newNode.innerHTML = contents;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1027:10:warning(detect-non-literal-regexp):  return new RegExp(pattern);:RegExp() called with a `searchString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1038:26:warning(detect-non-literal-regexp):  return caseSensitive ? new RegExp(pattern) : new RegExp(pattern, 'i');:RegExp() called with a `searchString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1038:48:warning(detect-non-literal-regexp):  return caseSensitive ? new RegExp(pattern) : new RegExp(pattern, 'i');:RegExp() called with a `searchString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1654:21:warning(detect-non-literal-regexp):          var rx2 = new RegExp(matches[0], 'g');:RegExp() called with a `classOrPackageLink` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1654:21:warning(detect-non-literal-regexp):          var rx2 = new RegExp(matches[0], 'g');:RegExp() called with a `memberOrKeywordLink` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1654:21:warning(detect-non-literal-regexp):          var rx2 = new RegExp(matches[0], 'g');:RegExp() called with a `menuAnchorDefinition` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/javadoc-search-frame/src/common/lib/common.js:1654:21:warning(detect-non-literal-regexp):          var rx2 = new RegExp(matches[0], 'g');:RegExp() called with a `menuReplacement` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
