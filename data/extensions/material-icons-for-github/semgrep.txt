data/tempCode/material-icons-for-github/.github/workflows/icon-review.yml:15:9:warning(pull-request-target-code-checkout):      - name: Checkout Fork 🛎️:This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.
data/tempCode/material-icons-for-github/src/helpers/customIcons.ts:7:41:warning(path-join-resolve-traversal):    .map((v) => dirname(join(__dirname, v)));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/helpers/objects.ts:21:7:warning(prototype-pollution-loop):      result = result[k];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/material-icons-for-github/src/icons/generator/folderGenerator.ts:325:43:warning(path-join-resolve-traversal):  const iconsFolderPath = join(iconsPath, `${iconName}.svg`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/iconOpacity.ts:91:30:warning(path-join-resolve-traversal):    const svgFilePath = join(iconPath, iconFileName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/iconOpacity.ts:91:40:warning(path-join-resolve-traversal):    const svgFilePath = join(iconPath, iconFileName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/iconSaturation.ts:113:30:warning(path-join-resolve-traversal):    const svgFilePath = join(iconsPath, iconFileName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/iconSaturation.ts:113:41:warning(path-join-resolve-traversal):    const svgFilePath = join(iconsPath, iconFileName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/jsonGenerator.ts:183:32:warning(path-join-resolve-traversal):  const defaultIconPath = join(iconJsonPath, '..', 'icons');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/jsonGenerator.ts:190:31:warning(path-join-resolve-traversal):        const filePath = join(iconPath, f);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/jsonGenerator.ts:190:41:warning(path-join-resolve-traversal):        const filePath = join(iconPath, f);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/icons/generator/jsonGenerator.ts:195:11:warning(path-join-resolve-traversal):          iconPath,:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/scripts/helpers/screenshots.ts:11:40:warning(path-join-resolve-traversal):    const htmlFilePath = join('file:', filePath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/material-icons-for-github/src/scripts/preview/preview.ts:72:36:warning(path-join-resolve-traversal):  const filePath = join(__dirname, fileName + '.html');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
