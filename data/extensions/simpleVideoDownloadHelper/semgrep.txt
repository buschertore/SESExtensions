/home/codescan/VideoDownloadHelper/video-url-parser/bs/js/bootstrap.bundle.js:209:16:warning(detect-non-literal-regexp):          if (!new RegExp(expectedTypes).test(valueType)) {:RegExp() called with a `configTypes` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/VideoDownloadHelper/video-url-parser/bs/js/bootstrap.js:210:16:warning(detect-non-literal-regexp):          if (!new RegExp(expectedTypes).test(valueType)) {:RegExp() called with a `configTypes` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/VideoDownloadHelper/video-url-parser/js/functions.js:142:19:warning(detect-non-literal-regexp):    const regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
