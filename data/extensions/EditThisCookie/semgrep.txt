/home/codescan/Edit-This-Cookie/js/utils.js:109:25:warning(detect-non-literal-regexp):    var ruleDomainReg = new RegExp(rule.domain);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Edit-This-Cookie/js/utils.js:110:23:warning(detect-non-literal-regexp):    var ruleNameReg = new RegExp(rule.name);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Edit-This-Cookie/js/utils.js:111:24:warning(detect-non-literal-regexp):    var ruleValueReg = new RegExp(rule.value);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Edit-This-Cookie/lib/jquery.jeditable.js:372:21:warning(eval-detected):                    eval ("var json = " + string);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
/home/codescan/Edit-This-Cookie/lib/jquery.jeditable.js:263:17:error(insecure-document-method):                self.innerHTML = str;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Edit-This-Cookie/lib/jquery.jeditable.js:281:21:error(insecure-document-method):                    self.innerHTML = str;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Edit-This-Cookie/lib/jquery.jeditable.js:291:13:error(insecure-document-method):            self.innerHTML = self.revert;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Edit-This-Cookie/popup.html:273:13:warning(plaintext-http-link):            <a id="helpButton" i18n="help" href="http://www.editthiscookie.com/start/" target="_blank">:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
