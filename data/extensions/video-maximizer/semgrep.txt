data/tempCode/video-maximizer/scripts/buildpackage.js:111:48:warning(path-join-resolve-traversal):  const fullFilePath = path.resolve(__dirname, filePath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/video-maximizer/scripts/buildpackage.js:9:12:error(detect-child-process):  execSync(commands, {:Detected calls to child_process from a function argument `commands`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/video-maximizer/src/background_executescripts.js:188:21:info(unsafe-formatstring):        console.log(`VideoMaxExt: _injectSetSpeedForVideosFn:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/video-maximizer/src/background_executescripts.js:203:21:info(unsafe-formatstring):        console.log(`VideoMaxExt: _injectSetSpeedForVideosFn:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/video-maximizer/src/options.js:116:5:error(insecure-document-method):    document.getElementById("nozoomlist").innerHTML = list;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/video-maximizer/src/options.js:188:5:error(insecure-document-method):    document.getElementById("version").innerHTML = `:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/video-maximizer/src/popup.js:150:5:error(insecure-document-method):    parentElem.innerHTML = htmlArr.join("\n");:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/video-maximizer/src/popup.js:162:48:warning(detect-eval-with-expression):          globals.debounceTimerId = setTimeout(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
data/tempCode/video-maximizer/src/videomax_main_inject.js:278:19:info(unsafe-formatstring):    console.trace(`%c VideoMax INJECT ${inIFrame} ERROR`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/video-maximizer/src/videomax_main_inject.js:294:17:info(unsafe-formatstring):    console.log(`%c VideoMax ${iframe}`, color, ...args);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
