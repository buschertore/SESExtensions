/home/codescan/KellyC-Image-Downloader/extension/lib/kellyFavItems.js:194:13:warning(wildcard-postmessage-configuration):            window.postMessage({kelly_dynaminc : true, method : 'kelly_dynaminc.' + (active ? 'bind' : 'unbind') + '.beforeunload'}, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/KellyC-Image-Downloader/extension/lib/kellyFavItems.js:1277:27:warning(detect-non-literal-regexp):                var reg = new RegExp(urlFilter), match = typeof item.pImage == 'string' ? item.pImage.match(reg) : item.pImage[0].match(reg);:RegExp() called with a `urlFilter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/KellyC-Image-Downloader/extension/lib/kellyTools.js:1402:25:warning(detect-non-literal-regexp):    return text.replace(new RegExp(search, 'g'), replace);:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
