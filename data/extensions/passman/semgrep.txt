data/tempCode/passman/.drone.yml.sig:1:1:error(detected-jwt-token):eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGRlcHRoOiAxCiAgdmVyaWZpZWQtY2hlY2s6CiAgICBpbWFnZTogcHl0aG9uCiAgICBjb21tYW5kczoKICAgICAgLSB3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9icmFudGplL3Bhc3NtYW4tY2kvbWFzdGVyL3ZlcmlmaWVkLWNoZWNrLnB5CiAgICAgIC0gcGlwIGluc3RhbGwgcmVxdWVzdHMKICAgICAgLSBweXRob24gLi92ZXJpZmllZC1jaGVjay5weQogICAgd2hlbjoKICAgICAgbWF0cml4OgogICAgICAgIFRFU1RTOiB2ZXJpZmllZC1jaGVjawptYXRyaXg6CiAgaW5jbHVkZToKICAgIC0gVEVTVFM6IHZlcmlmaWVkLWNoZWNr.btTpiQWKREIfNf8L-mA2PuMcMuy8VW5QVtrHmXypT-w:JWT token detected
data/tempCode/passman/js/app/controllers/credential.js:583:72:warning(incomplete-sanitization):                        credential.description_html = $sce.trustAsHtml(angular.copy(credential.description).replace("\n", '<br />'));:`angular.copy(credential.description).replace` method will only replace the first occurrence when used with a string argument ("\n"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/passman/js/app/services/searchboxexpanderservice.js:190:6:error(insecure-document-method):					label.innerHTML=translations[key];:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passman/js/importers/import-main.js:51:3:error(insecure-document-method):		e.innerHTML = input;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passman/js/importers/import-main.js:141:24:warning(detect-non-literal-regexp):	return target.replace(new RegExp(search, 'g'), replacement);:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/passman/js/importers/import-main.js:58:19:warning(incomplete-sanitization):				headings[i] = headings[i].replace(',', '_'):`headings[i].replace(',', '_')
					.toLowerCase().replace(' ', '_')
					.replace('(', '').replace(')', '').replace` method will only replace the first occurrence when used with a string argument ('"'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/passman/js/importers/importer-keepasscsv.js:51:20:warning(incomplete-sanitization):					row.expires = row.expires.replace('"', '');:`row.expires.replace` method will only replace the first occurrence when used with a string argument ('"'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/passman/lib/Service/EncryptService.php:156:4:warning(openssl-decrypt-validate):			$dec = openssl_decrypt($enc, $this->cipher, $cipherKey, true, $iv);:The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`.
data/tempCode/passman/lib/Service/IconService.php:336:4:error(curl-ssl-verifypeer-off):			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);:SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= false)
data/tempCode/passman/templates/views/partials/forms/share_credential/basics.html:97:2:warning(var-in-script-tag):	{{data.text}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/passman/templates/views/partials/forms/share_credential/basics.html:97:2:error(var-in-script-tag):	{{data.text}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
