data/tempCode/attendance-for-google-mee/js/attendance.js:635:29:error(insecure-document-method):                            this.statusCountEls[:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/attendance-for-google-mee/js/attendance.js:645:21:error(insecure-document-method):                    this.statusCountEls[:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/attendance-for-google-mee/js/attendance.js:918:9:error(insecure-document-method):        document.getElementById(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/attendance-for-google-mee/js/attendance.js:461:37:warning(incomplete-sanitization):                                    testName.replace('|', ' ').trim(),:`testName.replace` method will only replace the first occurrence when used with a string argument ('|'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/attendance-for-google-mee/js/attendance.js:462:37:warning(incomplete-sanitization):                                    name.replace('|', ' ').trim():`name.replace` method will only replace the first occurrence when used with a string argument ('|'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/attendance-for-google-mee/js/attendance.js:671:30:warning(incomplete-sanitization):            const realName = entry.name.replace('|', ' ').trim():`entry.name.replace` method will only replace the first occurrence when used with a string argument ('|'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/attendance-for-google-mee/js/chipset-textfield.js:34:13:error(insecure-document-method):            highlighter.innerHTML = this.value:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/attendance-for-google-mee/js/chipset-textfield.js:80:21:error(insecure-document-method):                    highlighter.innerHTML = this.value:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/attendance-for-google-mee/js/chipset-textfield.js:83:21:error(insecure-document-method):                    highlighter.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/attendance-for-google-mee/js/chipset-textfield.js:129:63:warning(incomplete-sanitization):        chipEl.querySelector('.mdc-chip__text').textContent = text:`text.replace` method will only replace the first occurrence when used with a string argument ('|'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/attendance-for-google-mee/js/utils.js:86:22:warning(detect-non-literal-regexp):            .replace(new RegExp(`^${firstName}\\s*`), ''):RegExp() called with a `firstName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/attendance-for-google-mee/js/utils.js:87:22:warning(detect-non-literal-regexp):            .replace(new RegExp(`\\s*${firstName}$`), ''):RegExp() called with a `firstName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/attendance-for-google-mee/js/utils.js:10:13:info(unsafe-formatstring):            `%c[A4GM]%c ${message} `,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
