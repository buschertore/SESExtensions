/home/codescan/track-extension/docs/_includes/head.html:11:5:warning(missing-integrity):    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
/home/codescan/track-extension/docs/_includes/js.html:1:18:error(var-in-script-tag):    <script src="{{ '/assets/scale.fix.js' | prepend: site.baseurl }}"></script>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/track-extension/docs/_includes/markdown.html:1:24:warning(no-interpolation-in-tag):{%if include.selector%}<{{include.selector}} {%if include.classes%}class="{{include.classes}}"{%endif%} {%if include.id%}id="{{include.id}}{%endif%}">{%endif%}:Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.
/home/codescan/track-extension/src/content/toggl.js:56:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', handleIncomingMessage);:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/track-extension/src/content/zendesk.js:43:12:warning(detect-eval-with-expression):setTimeout(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
/home/codescan/track-extension/src/content/zendesk.js:85:12:warning(detect-eval-with-expression):setTimeout(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
/home/codescan/track-extension/src/content/zendesk.js:121:12:warning(detect-eval-with-expression):setTimeout(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
