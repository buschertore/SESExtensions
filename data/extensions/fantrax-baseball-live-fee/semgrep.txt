data/tempCode/fantrax-baseball-live-fee/background.js:17:12:warning(detect-non-literal-regexp):    return new RegExp("^" + rule.split("*").join(".*") + "$").test(str);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/fantrax-baseball-live-fee/content.js:135:12:warning(detect-non-literal-regexp):    return new RegExp("^" + rule.split("*").join(".*") + "$").test(str);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/fantrax-baseball-live-fee/content.js:139:30:warning(detect-eval-with-expression):var checkExist = setInterval(function() {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
data/tempCode/fantrax-baseball-live-fee/roster.js:76:25:error(insecure-document-method):                        container.innerHTML += '\:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/fantrax-baseball-live-fee/roster.js:381:12:warning(detect-non-literal-regexp):    return new RegExp("^" + rule.split("*").join(".*") + "$").test(str);:RegExp() called with a `rule` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/fantrax-baseball-live-fee/roster.js:27:34:warning(detect-eval-with-expression):    var checkExist = setInterval(function() {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
