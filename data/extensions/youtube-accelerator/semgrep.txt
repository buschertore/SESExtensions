data/tempCode/youtube-accelerator/accelerator_plugin.js:87:92:warning(detect-non-literal-regexp):        if (!ev.shiftKey && !ev.metaKey && !ev.ctrlKey && ytp.settings.fasterKeyCode.match(new RegExp("(?:^|,)" + ev.which + "(?:,|$)"))) {:RegExp() called with a `ev` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/youtube-accelerator/accelerator_plugin.js:89:99:warning(detect-non-literal-regexp):        } else if (!ev.shiftKey && !ev.metaKey && !ev.ctrlKey && ytp.settings.slowerKeyCode.match(new RegExp("(?:^|,)" + ev.which + "(?:,|$)"))) {:RegExp() called with a `ev` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/youtube-accelerator/accelerator_plugin.js:91:98:warning(detect-non-literal-regexp):        } else if (!ev.shiftKey && !ev.metaKey && !ev.ctrlKey && ytp.settings.resetKeyCode.match(new RegExp("(?:^|,)" + ev.which + "(?:,|$)"))) {:RegExp() called with a `ev` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/youtube-accelerator/accelerator_plugin.js:94:44:warning(detect-non-literal-regexp):            if (ev.shiftKey && "190".match(new RegExp("(?:^|,)" + ev.which + "(?:,|$)"))) {:RegExp() called with a `ev` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/youtube-accelerator/accelerator_plugin.js:98:51:warning(detect-non-literal-regexp):            } else if (ev.shiftKey && "188".match(new RegExp("(?:^|,)" + ev.which + "(?:,|$)"))) {:RegExp() called with a `ev` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
