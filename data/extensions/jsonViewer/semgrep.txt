/home/codescan/json-viewer/extension/src/backend.js:10:19:info(unsafe-formatstring):    console.error('[JSONViewer] error: ' + e.message, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/json-viewer/extension/src/json-viewer/highlight-content.js:111:21:info(unsafe-formatstring):      console.error('[JSONViewer] error: ' + e.message, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/json-viewer/extension/src/json-viewer/highlighter.js:144:5:error(insecure-document-method):    div.innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/options/render-addons.js:5:3:error(insecure-document-method):  addonsInput.innerHTML = jsonFormater(JSON.stringify(value));:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/options/render-structure.js:5:3:error(insecure-document-method):  structureInput.innerHTML = jsonFormater(JSON.stringify(value));:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/options/render-style.js:5:3:error(insecure-document-method):  styleInput.innerHTML = value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/options/render-theme-list.js:49:3:error(insecure-document-method):  themesExampleInput.innerHTML = jsonFormater(JSON.stringify(themeJSONExample));:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/scratch-pad/load-editor.js:31:19:info(unsafe-formatstring):    console.error('[JSONViewer] error: ' + e.message, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/json-viewer/extension/src/json-viewer/scratch-pad/render-format-button.js:12:3:error(insecure-document-method):  formatLink.innerHTML = svgFormat;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/storage.js:54:23:info(unsafe-formatstring):        console.error('[JSONViewer] error: ' + e.message, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/json-viewer/extension/src/json-viewer/viewer/expose-json.js:9:5:error(insecure-document-method):    script.innerHTML = 'window.json = ' + text + ';';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/viewer/load-required-css.js:24:5:error(insecure-document-method):    style.innerHTML = options.style;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/viewer/render-alert.js:26:21:info(unsafe-formatstring):      console.error('[JSONViewer] error: ' + e.message, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/json-viewer/extension/src/json-viewer/viewer/render-extras.js:19:3:error(insecure-document-method):  optionsLink.innerHTML = svgGear;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/viewer/render-extras.js:25:3:error(insecure-document-method):  rawLink.innerHTML = svgRaw;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/json-viewer/viewer/render-extras.js:48:3:error(insecure-document-method):  unfoldLink.innerHTML = svgUnfold;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/extension/src/options.js:33:3:error(insecure-document-method):  versionLink.innerHTML = version;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/json-viewer/lib/build-extension-webpack-plugin/build-extension.js:11:53:warning(path-join-resolve-traversal):    var themePath = path.join(BuildPaths.EXTENSION, 'assets/' + theme);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/json-viewer/lib/build-extension-webpack-plugin/build-extension.js:15:71:warning(path-join-resolve-traversal):      fs.copySync(themePath + '.css', path.join(BuildPaths.EXTENSION, themeCSSPath));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/json-viewer/webpack.config.js:22:58:warning(path-join-resolve-traversal):  return fs.readdirSync(path.join('extension', 'themes', darkness)).:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
