/home/codescan/thegreatsuspender/src/js/about.js:14:5:error(insecure-document-method):    versionEl.innerHTML = 'v' + chrome.runtime.getManifest().version;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/debug.js:66:7:error(insecure-document-method):      tableEl.innerHTML = tableEl.innerHTML + html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/debug.js:71:5:error(insecure-document-method):    document.getElementById(elementId).innerHTML = getterFn();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/debug.js:75:7:error(insecure-document-method):      document.getElementById(elementId).innerHTML = newVal;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/dom-to-image.js:307:62:error(insecure-document-method):                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/dom-to-image.js:627:24:warning(detect-non-literal-regexp):                return new RegExp('(url\\([\'"]?)(' + util.escape(url) + ')([\'"]?\\))', 'g');:RegExp() called with a `url` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/thegreatsuspender/src/js/dom-to-image.js:698:37:info(unsafe-formatstring):                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:138:5:error(insecure-document-method):    _document.getElementById('gsTitle').innerHTML = title;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:139:5:error(insecure-document-method):    _document.getElementById('gsTopBarTitle').innerHTML = title;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:149:5:error(insecure-document-method):    _document.getElementById('gsTopBarUrl').innerHTML = cleanUrl(url);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:192:5:error(insecure-document-method):    reasonMsgEl.innerHTML = reason;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:217:7:error(insecure-document-method):      previewEl.innerHTML = _document.getElementById(:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:282:7:error(insecure-document-method):      hotkeyEl.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:288:7:error(insecure-document-method):      hotkeyEl.innerHTML = `<a id="setKeyboardShortcut" href="#">${reloadString}</a>`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsSuspendedTab.js:348:5:error(insecure-document-method):    toastEl.innerHTML = _document.getElementById('toastTemplate').innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsUtils.js:390:9:error(insecure-document-method):        el.innerHTML = el:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/gsUtils.js:325:9:warning(detect-non-literal-regexp):        new RegExp(whitelistItem); // eslint-disable-line no-new:RegExp() called with a `whitelistItem` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/thegreatsuspender/src/js/gsUtils.js:329:14:warning(detect-non-literal-regexp):      return new RegExp(whitelistItem).test(word);:RegExp() called with a `whitelistItem` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/thegreatsuspender/src/js/historyItems.js:69:5:error(insecure-document-method):    sessionTitle.innerHTML = titleText;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/historyItems.js:237:5:error(insecure-document-method):    el.innerHTML = gsUtils.htmlEncode(text || '');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/notice.js:20:7:error(insecure-document-method):      noticeContentEl.innerHTML = notice.text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/popup.js:208:5:error(insecure-document-method):    document.getElementById('statusDetail').innerHTML = statusDetail;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/thegreatsuspender/src/js/shortcuts.js:32:11:error(insecure-document-method):          shortcutsEl.innerHTML += `<div ${:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
