data/tempCode/library-detector-academic/content_scripts/detect.js:450:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener("message", async function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/library-detector-academic/content_scripts/detect.js:468:13:warning(wildcard-postmessage-configuration):            this.window.postMessage({type: 'response', detected_libs: L.convertToJson()}, "*"):The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/library-detector-academic/content_scripts/inject.js:39:1:warning(insufficient-postmessage-origin-validation):window.addEventListener("message", function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/library-detector-academic/content_scripts/inject.js:31:9:warning(wildcard-postmessage-configuration):        window.postMessage({type: 'detect', url: baseurl}, "*"):The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/library-detector-academic/popup/DtrMenu.js:38:15:error(insecure-document-method):              document.getElementById(`${accordian_id}_body`).innerHTML += `<hr/>:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/library-detector-academic/popup/DtrMenu.js:59:15:error(insecure-document-method):              LibAccordion.innerHTML += accordian_template:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/library-detector-academic/tool/genPTS.py:15:5:warning(formatted-sql-query):    cursor.execute(f"SELECT root_name, content FROM {COM_TREE_TABLE};"):Detected possible formatted SQL query. Use parameterized queries instead.
data/tempCode/library-detector-academic/tool/genPTS.py:25:5:warning(formatted-sql-query):    cursor.execute(f"SELECT libname, filename, url, version, in_deps, out_deps, comment, id FROM {FILE_TABLE};"):Detected possible formatted SQL query. Use parameterized queries instead.
data/tempCode/library-detector-academic/tool/genPTS.py:15:5:error(sqlalchemy-execute-raw-query):    cursor.execute(f"SELECT root_name, content FROM {COM_TREE_TABLE};"):Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.
data/tempCode/library-detector-academic/tool/genPTS.py:25:5:error(sqlalchemy-execute-raw-query):    cursor.execute(f"SELECT libname, filename, url, version, in_deps, out_deps, comment, id FROM {FILE_TABLE};"):Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.
