data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/content/index.ts:136:1:warning(insufficient-postmessage-origin-validation):window.addEventListener('message', function (event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/reactVirtual/components/SvgComp.tsx:21:52:warning(react-dangerouslysetinnerhtml):    return <svg dangerouslySetInnerHTML={{ __html: svgString }} className={`${className || ''}`} />:Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/utils/hooks.ts:131:9:warning(wildcard-postmessage-configuration):        window.postMessage({ action: POST_MSG_TYPE.historyChagne, url: urlString }, '*'):The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/utils/hooks.ts:147:13:warning(wildcard-postmessage-configuration):            window.postMessage({ action: POST_MSG_TYPE.historyChagne, url: document.location.href }, '*'):The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/utils/hooks.ts:157:13:warning(wildcard-postmessage-configuration):            window.postMessage({ action: POST_MSG_TYPE.historyChagne, url: document.location.href }, '*'):The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/utils/hooks.ts:146:20:warning(detect-eval-with-expression):        setTimeout(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/app/scripts/utils/hooks.ts:156:20:warning(detect-eval-with-expression):        setTimeout(() => {:Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:14:36:warning(path-join-resolve-traversal):        const filePath = path.join(folderPath, fileName):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:14:48:warning(path-join-resolve-traversal):        const filePath = path.join(folderPath, fileName):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:26:36:warning(path-join-resolve-traversal):        const filePath = path.join(folderPath, fileName):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:26:48:warning(path-join-resolve-traversal):        const filePath = path.join(folderPath, fileName):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:32:41:warning(path-join-resolve-traversal):        const subFolderPath = path.join(folderPath, subFolder):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:32:53:warning(path-join-resolve-traversal):        const subFolderPath = path.join(folderPath, subFolder):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:82:42:warning(path-join-resolve-traversal):        const outputFilePath = path.join(filePath, '../', `${fileName}.js`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:82:59:warning(path-join-resolve-traversal):        const outputFilePath = path.join(filePath, '../', `${fileName}.js`):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/buildAfter.js:68:38:warning(unknown-value-with-script-tag):    $('body').append(`<script src="${jsFileName}"></script>`):Cannot determine what 'jsFileName' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'jsFileName' is not externally controlled, or sanitize this data.
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/bunpack.ts:11:18:error(detect-child-process):            exec(command, (err, stdout, stderr) => {:Detected calls to child_process from a function argument `filePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/%E5%BE%AE%E5%8D%9A%E6%89%A9%E5%B1%95/weiboSave/scripts/singlepost.js:165:9:error(insecure-document-method):        content.innerHTML = html:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
