data/tempCode/rys-%E2%80%94-remove-youtube-sugg/src/shared/mixpanel.js:27:349:warning(detect-non-literal-regexp):c.wb=function(a){var b,a=a.toLowerCase();for(b=0;b<ya.length;b++)if(-1!==a.indexOf(ya[b]))return l;return F};c.bc=function(a){var b,d,n,f=[];c.g(b)&&(b="&");c.a(a,function(a,b){d=encodeURIComponent(a.toString());n=encodeURIComponent(b);f[f.length]=n+"="+d});return f.join(b)};c.qb=function(a,b){var b=b.replace(/[[]/,"\\[").replace(/[\]]/,"\\]"),d=RegExp("[\\?&]"+b+"=([^&#]*)").exec(a);if(d===q||d&&"string"!==typeof d[1]&&d[1].length)return"";d=d[1];try{d=decodeURIComponent(d)}catch(c){p.error("Skipping decoding for malformed query param: "+:RegExp() called with a `b` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
