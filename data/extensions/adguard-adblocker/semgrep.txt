data/tempCode/adguard-adblocker/Extension/src/background/api/network/settings.ts:35:14:error(detected-generic-api-key):    readonly apiKey = '4DDBE80A3DA94D819A00523252FB6380';:Generic API Key detected
data/tempCode/adguard-adblocker/Extension/src/background/utils/url.ts:179:52:warning(detect-non-literal-regexp):            return (string.length - string.replace(new RegExp(substring, 'g'), '').length) / substring.length;:RegExp() called with a `substring` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-adblocker/Extension/src/content-script/content-utils/elements.ts:91:9:error(insecure-document-method):        div.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/adguard-adblocker/Extension/src/pages/common/components/Editor/mode-adguard.js:1016:39:warning(detect-non-literal-regexp):            this.foldingStartMarker = new RegExp(:RegExp() called with a `commentRegex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-adblocker/Extension/src/pages/common/components/Editor/mode-adguard.js:1019:38:warning(detect-non-literal-regexp):            this.foldingStopMarker = new RegExp(:RegExp() called with a `commentRegex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-adblocker/Extension/src/pages/devtools-elements-sidebar.js:201:13:error(insecure-document-method):            tmpEl.innerHTML = elHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/adguard-adblocker/Extension/src/pages/popup/components/Stats/StatsChart/Chart.jsx:249:17:error(insecure-document-method):                this.svg[0][0].getElementsByTagName('defs')[0].innerHTML += grad1;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/adguard-adblocker/tools/bundle/chrome/webpack.chrome.js:42:29:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/chrome/webpack.chrome.js:42:55:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/crx.js:46:54:warning(path-join-resolve-traversal):    const browserBuildPath = path.join(envBuildPath, browserConf.buildDir);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/crx.js:49:36:warning(path-join-resolve-traversal):    const manifestPath = path.join(browserBuildPath, 'manifest.json');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/edge/webpack.edge.js:42:29:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/edge/webpack.edge.js:42:55:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/firefox/webpack.firefox.js:73:29:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/firefox/webpack.firefox.js:73:55:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/opera/webpack.opera.js:42:29:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/bundle/opera/webpack.opera.js:42:55:warning(path-join-resolve-traversal):            path: path.join(commonConfig.output.path, browserConfig.buildDir),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/helpers.js:177:55:warning(path-join-resolve-traversal):    const filePath = path.join(LOCALES_ABSOLUTE_PATH, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/download-locales.js:193:55:warning(path-join-resolve-traversal):        const localeFilePath = path.join(LOCALES_DIR, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/download-locales.js:194:54:warning(path-join-resolve-traversal):        const localeDirPath = path.join(LOCALES_DIR, locale);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/download-locales.js:228:53:warning(path-join-resolve-traversal):        const pathToLocale = path.join(LOCALES_DIR, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/renew-locales.js:73:26:warning(detect-non-literal-regexp):    const filterRegexp = new RegExp(filesReg);:RegExp() called with a `filesReg` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-adblocker/tools/locales/renew-locales.js:78:40:warning(path-join-resolve-traversal):            const filePath = path.join(dir, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/renew-locales.js:78:45:warning(path-join-resolve-traversal):            const filePath = path.join(dir, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/unused.js:64:36:warning(path-join-resolve-traversal):        const fullPath = path.join(dirPath, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/unused.js:64:45:warning(path-join-resolve-traversal):        const fullPath = path.join(dirPath, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/locales/upload-locales.js:46:72:warning(path-join-resolve-traversal):    formData.append('file', fs.createReadStream(path.join(LOCALES_DIR, `${locale}/${LOCALE_DATA_FILENAME}`)));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/resources/dangerous-rules/scanner.ts:115:36:warning(path-join-resolve-traversal):        const fullPath = path.join(directory, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/resources/dangerous-rules/scanner.ts:115:47:warning(path-join-resolve-traversal):        const fullPath = path.join(directory, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-adblocker/tools/resources/download-filters.js:147:55:warning(path-join-resolve-traversal):    await fs.promises.writeFile(path.join(filtersDir, url.file), response.data);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
