/home/codescan/ember-inspector/.github/workflows/build.yml:74:11:error(detected-codeclimate):          CODECLIMATE_REPO_TOKEN: 59edcfd1ffc778791af49ca594b503e7179f6bbe1991b2cc0c0a6987d103253d:CodeClimate detected
/home/codescan/ember-inspector/app/index.html:37:18:error(var-in-script-tag):    <script src="{{rootURL}}assets/vendor.js"></script>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/ember-inspector/app/index.html:38:18:error(var-in-script-tag):    <script src="{{rootURL}}assets/ember-inspector.js"></script>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
/home/codescan/ember-inspector/app/models/promise.js:132:14:warning(detect-non-literal-regexp):      .match(new RegExp(`.*${escapeRegExp(val.toLowerCase())}.*`));:RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ember-inspector/app/models/promise.js:138:14:warning(detect-non-literal-regexp):      .match(new RegExp(`.*${escapeRegExp(val.toLowerCase())}.*`));:RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ember-inspector/app/services/adapters/bookmarklet.js:68:7:warning(detect-non-literal-regexp):      new RegExp(:RegExp() called with a `sVar` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ember-inspector/app/utils/check-current-route.js:12:28:warning(detect-non-literal-regexp):    currentRouteName.match(new RegExp(`(^|\\.)${regName}(\\.|$)`));:RegExp() called with a `routeValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ember-inspector/app/utils/search-match.js:12:16:warning(detect-non-literal-regexp):  let regExp = new RegExp(escapeRegExp(sanitize(searchQuery)));:RegExp() called with a `searchQuery` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/ember-inspector/ember_debug/libs/view-inspection.js:716:51:warning(react-unsanitized-method):    document.body.insertAdjacentHTML('beforeend', html.trim());:Detection of insertAdjacentHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use insertAdjacentHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.
/home/codescan/ember-inspector/ember_debug/services/session.js:32:3:warning(insecure-object-assign):  Object.assign(Session.prototype, {:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
/home/codescan/ember-inspector/skeletons/web-extension/content-script.js:26:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener('message', function(event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/ember-inspector/skeletons/web-extension/scripts/in-page-script.js:46:7:warning(wildcard-postmessage-configuration):      window.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
