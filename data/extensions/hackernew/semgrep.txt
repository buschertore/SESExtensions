data/tempCode/hackernew/js/libs/twitter.text.js:41:12:warning(detect-non-literal-regexp):    return new RegExp(regex.replace(/#\{(\w+)\}/g, function(match, name) {:RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hackernew/js/libs/twitter.text.js:41:12:warning(detect-non-literal-regexp):    return new RegExp(regex.replace(/#\{(\w+)\}/g, function(match, name) {:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/hackernew/js/libs/twitter.text.js:41:12:warning(detect-non-literal-regexp):    return new RegExp(regex.replace(/#\{(\w+)\}/g, function(match, name) {:RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
