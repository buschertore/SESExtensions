data/tempCode/%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1-by-extension/docs/W3CWebSocket.md:19:18:error(detect-insecure-websocket):var ws = new WS('ws://example.com/resource', 'foo', 'http://example.com');:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1-by-extension/docs/WebSocketClient.md:54:2:error(detect-insecure-websocket):`ws://www.mygreatapp.com:1234/websocketapp/`:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1-by-extension/docs/WebSocketClient.md:111:17:error(detect-insecure-websocket):client.connect('ws://echo.websocket.org/', null, null, null, requestOptions);:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1-by-extension/docs/WebSocketServer.md:41:292:error(detect-insecure-websocket):The Node http or https server instance(s) to attach to.  You can pass a single instance directly, or pass an array of instances to attach to multiple http/https servers.  Passing an array is particularly useful when you want to accept encrypted and unencrypted WebSocket connections on both ws:// and wss:// protocols using the same WebSocketServer instance.:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1-by-extension/example/whiteboard/public/client.js:38:16:error(detect-insecure-websocket):    var url = "ws://" + document.URL.substr(7).split('/')[0];:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1-by-extension/lib/WebSocketRouter.js:122:20:warning(detect-non-literal-regexp):            path = new RegExp('^' + path + '$');:RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
