/home/codescan/darkreader/src/background/config-manager.ts:99:31:info(unsafe-formatstring):                console.error(`${name} remote load error`, err);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/darkreader/src/inject/dynamic-theme/css-rules.ts:53:20:warning(detect-non-literal-regexp):    const regexp = new RegExp(`${prop}:\\s*(.*?)\\s*;`);:RegExp() called with a `prop` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/darkreader/src/inject/index.ts:303:36:warning(eval-detected):                    const result = eval(data);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
/home/codescan/darkreader/src/utils/tabs.ts:50:22:info(unsafe-formatstring):        console.warn(`TabManager.getActiveTab() could not reliably find the active tab, picking the best guess ${log}`, tab);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/darkreader/src/utils/url.ts:262:16:warning(detect-non-literal-regexp):        return new RegExp(pattern);:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
