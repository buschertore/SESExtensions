data/tempCode/create-link/extension/options.html:21:23:warning(plaintext-http-link):				<li>Developped by <a href="http://ido.nu/kuma/">ku</a> and <a href="https://github.com/ku/CreateLink/graphs/contributors">Contributors</a><li>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/create-link/extension/options.html:22:18:warning(plaintext-http-link):				<li>Icons by <a href="http://icontoaster.com/?free-icons-for-all">icontoaster.com</a></li>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/create-link/extension/options.html:72:65:warning(plaintext-http-link):      <dd>Selected text or page title. All cahracters listed in <a href="http://daringfireball.net/projects/markdown/syntax#backslash">Markdown specification</a> will be escaped with backslash.</dd>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/create-link/src/createlink.ts:22:17:warning(detect-non-literal-regexp):        var r = new RegExp(m[1], m[3]);:RegExp() called with a `def` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/create-link/src/utils.ts:54:5:error(insecure-document-method):    div.innerHTML = text:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
