/home/codescan/vimium/background_scripts/completion.js:235:36:warning(detect-non-literal-regexp):      .split(/\s+/).map((param) => new RegExp(`\&${param}=[^&]+`)),:RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/background_scripts/completion.js:242:45:warning(detect-non-literal-regexp):  [".", ["^https?://", "\\W+$"].map((re) => new RegExp(re))],:RegExp() called with a `re` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/background_scripts/completion.js:847:35:warning(detect-non-literal-regexp):      (this.cache[regexpString] = new RegExp(regexpString, Utils.hasUpperCase(string) ? "" : "i"));:RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/background_scripts/completion.js:847:35:warning(detect-non-literal-regexp):      (this.cache[regexpString] = new RegExp(regexpString, Utils.hasUpperCase(string) ? "" : "i"));:RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/background_scripts/completion.js:847:35:warning(detect-non-literal-regexp):      (this.cache[regexpString] = new RegExp(regexpString, Utils.hasUpperCase(string) ? "" : "i"));:RegExp() called with a `suffix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/background_scripts/completion_engines.js:36:49:warning(detect-non-literal-regexp):    this.regexps = this.regexps.map((regexp) => new RegExp(regexp));:RegExp() called with a `regexp` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/background_scripts/exclusions.js:13:18:warning(detect-non-literal-regexp):        result = new RegExp("^" + pattern.replace(/\*/g, ".*") + "$");:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/content_scripts/hud.js:254:5:error(insecure-document-method):    this.styleElement.innerHTML = `\:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/vimium/content_scripts/link_hints.js:779:11:error(insecure-document-method):          marker.element.innerHTML = spanWrap(marker.hintString.toUpperCase());:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/vimium/content_scripts/link_hints.js:858:5:error(insecure-document-method):    marker.element.innerHTML = spanWrap(caption);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/vimium/content_scripts/link_hints.js:1043:19:warning(incomplete-sanitization):        mapName = mapName.replace(/^#/, "").replace('"', '\\"');:`mapName.replace(/^#/, "").replace` method will only replace the first occurrence when used with a string argument ('"'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/vimium/content_scripts/mode_find.js:189:17:warning(detect-non-literal-regexp):      pattern = new RegExp(regexPattern, `g${this.query.ignoreCase ? "i" : ""}`);:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/content_scripts/mode_normal.js:460:9:warning(detect-non-literal-regexp):      ? new RegExp("\\b" + linkString + "\\b", "i"):RegExp() called with a `linkStrings` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/content_scripts/mode_normal.js:461:9:warning(detect-non-literal-regexp):      : new RegExp(linkString, "i");:RegExp() called with a `linkStrings` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/content_scripts/ui_component.js:24:17:error(insecure-document-method):        (items) => styleSheet.innerHTML = items.vimiumCSSInChromeStorage,:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/vimium/lib/handler_stack.js:154:19:info(unsafe-formatstring):      console.log(`${eventNumber}`, type, handler._name, label);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/vimium/make.js:45:3:warning(insecure-object-assign):  Object.assign(manifest.background, {:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
/home/codescan/vimium/make.js:50:3:warning(insecure-object-assign):  Object.assign(manifest.action, {:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
/home/codescan/vimium/make.js:54:3:warning(insecure-object-assign):  Object.assign(manifest, {:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
/home/codescan/vimium/pages/action.js:136:12:warning(detect-non-literal-regexp):    return new RegExp("^" + patternStr.replace(/\*/g, ".*") + "$");:RegExp() called with a `patternStr` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/vimium/pages/action.js:146:24:warning(incomplete-sanitization):      const hostname = url.split("/", 3).slice(1).join("/").replace("[", "\\[").replace(:`url.split("/", 3).slice(1).join("/").replace` method will only replace the first occurrence when used with a string argument ("["). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/vimium/pages/action.js:146:24:warning(incomplete-sanitization):      const hostname = url.split("/", 3).slice(1).join("/").replace("[", "\\[").replace(:`url.split("/", 3).slice(1).join("/").replace("[", "\\[").replace` method will only replace the first occurrence when used with a string argument ("]"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/vimium/pages/completion_engines.js:43:3:error(insecure-document-method):  document.getElementById("engineList").innerHTML = html.join("");:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/vimium/pages/help_dialog.js:14:7:warning(incomplete-sanitization):  a = a.replace("<", "~");:`a.replace` method will only replace the first occurrence when used with a string argument ("<"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/vimium/pages/help_dialog.js:15:7:warning(incomplete-sanitization):  b = b.replace("<", "~");:`b.replace` method will only replace the first occurrence when used with a string argument ("<"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
/home/codescan/vimium/pages/ui_component_server.js:16:1:warning(insufficient-postmessage-origin-validation):window.addEventListener("message", registerPort);:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/vimium/pages/vomnibar.js:309:5:error(insecure-document-method):    this.completionList.innerHTML = this.completions.map((c) => `<li>${c.html}</li>`).join("");:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/vimium/test_harnesses/has_popup_and_link_hud.html:72:3:warning(plaintext-http-link):  <a id="biglink" href="http://ninjawords.com/thisShouldEventuallyGetTruncatedBecauseItsAReallyLongLink,very,long,indeed">Big link</a>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/vimium/test_harnesses/vomnibar.html:13:3:warning(missing-integrity):  <script src="https://github.com/ooyala/livecss/raw/master/livecss.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
