data/tempCode/sctranslator/config/env.js:56:45:warning(path-join-resolve-traversal):  .map(folder => path.resolve(appDirectory, folder)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/sctranslator/config/paths.js:10:63:warning(path-join-resolve-traversal):const resolveApp = relativePath => path.resolve(appDirectory, relativePath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/sctranslator/src/public/text-preprocessing.ts:20:99:warning(detect-non-literal-regexp):        textPreprocessingRegExpList.map(({ pattern, flags, replacement }) => (text = text.replace(new RegExp(pattern, flags), replacement)));:RegExp() called with a `{ pattern, flags, replacement }` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/sctranslator/src/public/text-preprocessing.ts:37:104:warning(detect-non-literal-regexp):        afterSelectingTextRegExpList.forEach(({ pattern, flags, replacement }) => (text = text.replace(new RegExp(pattern, flags), replacement)));:RegExp() called with a `{ pattern, flags, replacement }` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/sctranslator/src/public/web-page-translate/index.ts:286:15:warning(incomplete-sanitization):        text: text.substring(searchIndex).replace('\n', ' '),:`text.substring(searchIndex).replace` method will only replace the first occurrence when used with a string argument ('\n'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
