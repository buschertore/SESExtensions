data/tempCode/reader-view/v2/firefox/common.js:316:16:warning(detect-non-literal-regexp):        return new RegExp(s.substr(2), 'i');:RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/reader-view/v2/firefox/data/inject/Readability.js:1275:9:error(insecure-document-method):        page.innerHTML = pageCacheHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v2/firefox/data/inject/Readability.js:1598:7:error(insecure-document-method):      tmp.innerHTML = noscript.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v2/firefox/data/reader/index.js:759:29:warning(js-open-redirect):    return location.replace(args.get('url'));:The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
data/tempCode/reader-view/v2/firefox/data/reader/libs/design-mode/index.js:1:32:warning(wildcard-postmessage-configuration):const post = (method, data) => top.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/reader-view/v2/firefox/data/reader/libs/text-to-speech/vendors/sentence-boundary-detection/sbd.js:188:5:error(insecure-document-method):    $div.innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v2/firefox/data/reader/libs/text-to-speech/vendors/sentence-boundary-detection/sbd.js:269:18:warning(detect-non-literal-regexp):        var re = new RegExp(html_boundaries_regexp, "g");:RegExp() called with a `user_options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/reader-view/v2/firefox/data/reader/plugins/doi/core.js:54:15:error(insecure-document-method):              code.innerHTML = Prism.highlight(JSON.stringify(r, null, '  '), Prism.languages.json, 'json');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v2/firefox/data/reader/plugins/doi/prism/prism.js:554:4:error(insecure-document-method):			env.element.innerHTML = env.highlightedCode;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v2/firefox/data/reader/plugins/doi/prism/prism.js:901:26:warning(detect-non-literal-regexp):				patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');:RegExp() called with a `grammar` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/reader-view/v3/data/inject/Readability.js:1285:9:error(insecure-document-method):        page.innerHTML = pageCacheHtml;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v3/data/inject/Readability.js:1608:7:error(insecure-document-method):      tmp.innerHTML = noscript.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v3/data/inject/next-chap/NextChap.js:83:11:error(insecure-document-method):          duplicatedLink.innerHTML += `<!--${link.outerHTML}-->`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v3/data/navigate.js:19:21:warning(detect-non-literal-regexp):          const r = new RegExp(rule.substr(2), 'i');:RegExp() called with a `prefs` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/reader-view/v3/data/reader/index.js:804:29:warning(js-open-redirect):    return location.replace(args.get('url'));:The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
data/tempCode/reader-view/v3/data/reader/libs/design-mode/index.js:1:32:warning(wildcard-postmessage-configuration):const post = (method, data) => top.postMessage({:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/reader-view/v3/data/reader/libs/turndown/turndown.js:196:30:warning(detect-non-literal-regexp):      var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');:RegExp() called with a `options` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/reader-view/v3/data/reader/plugins/doi/core.mjs:60:15:error(insecure-document-method):              code.innerHTML = Prism.highlight(JSON.stringify(r, null, '  '), Prism.languages.json, 'json');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v3/data/reader/plugins/doi/prism/prism.js:554:4:error(insecure-document-method):			env.element.innerHTML = env.highlightedCode;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/reader-view/v3/data/reader/plugins/doi/prism/prism.js:901:26:warning(detect-non-literal-regexp):				patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');:RegExp() called with a `grammar` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
