data/tempCode/word-collector-improve-yo/chrome-extension/options.js:117:4:error(insecure-document-method):			tbody.innerHTML = _trs;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-collector-improve-yo/chrome-extension/options.js:128:4:error(insecure-document-method):			table.innerHTML = my._table;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-collector-improve-yo/chrome-extension/options.js:165:4:error(insecure-document-method):			table.innerHTML = my._table;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-collector-improve-yo/chrome-extension/popup.js:92:4:error(insecure-document-method):			el.innerHTML = inner;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-collector-improve-yo/chrome-extension/popup.js:159:4:error(insecure-document-method):			tbody.innerHTML = _trs;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-collector-improve-yo/chrome-extension/popup.js:180:4:error(insecure-document-method):			table.innerHTML = my._table;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/word-collector-improve-yo/chrome-extension/utils/collect.js:10:14:warning(detect-non-literal-regexp):		const re = new RegExp(`[\\s${ignoreCharsStrg}]+`); //because pad = " ":RegExp() called with a `ignoreCharsStrg` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/word-collector-improve-yo/chrome-extension/utils/dom.js:4:2:error(insecure-document-method):	el.innerHTML = inner;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
