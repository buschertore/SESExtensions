data/tempCode/tiny-tiny-rss-checker/js/options.js:69:2:error(insecure-document-method):	last_updated.innerHTML = d;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:591:64:warning(eval-detected):    return this.extractScripts().map(function(script) { return eval(script) });:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:692:46:warning(eval-detected):      if (!sanitize || json.isJSON()) return eval('(' + json + ')');:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:1641:14:warning(eval-detected):      return eval((this.transport.responseText || '').unfilterJSON());:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2042:11:error(insecure-document-method):          element.innerHTML = content.stripScripts();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2046:9:error(insecure-document-method):        element.innerHTML = content.stripScripts();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2789:10:error(insecure-document-method):    else element.outerHTML = content.stripScripts();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2815:5:error(insecure-document-method):    div.innerHTML = '&nbsp;' + t[0] + html + t[1];:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2822:5:error(insecure-document-method):    div.innerHTML = html;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:4720:2:error(insecure-document-method):	form.innerHTML = "<a name='" + id + "'/>";:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:874:16:warning(detect-non-literal-regexp):      filter = new RegExp(RegExp.escape(filter));:RegExp() called with a `filter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2303:7:warning(detect-non-literal-regexp):      new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));:RegExp() called with a `className` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2316:7:warning(detect-non-literal-regexp):      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();:RegExp() called with a `className` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:785:9:warning(prototype-pollution-loop):        ctx = ctx[comp];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:2135:11:warning(prototype-pollution-loop):    while (element = element[property]) {:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:4837:4:warning(prototype-pollution-loop):			elem = elem[dir];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:4856:5:warning(prototype-pollution-loop):				elem = elem[dir];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:4873:4:warning(prototype-pollution-loop):			elem = elem[dir];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/tiny-tiny-rss-checker/lib/prototype.js:4899:5:warning(prototype-pollution-loop):				elem = elem[dir];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/tiny-tiny-rss-checker/lib/scriptaculous/effects.js:1054:5:error(insecure-document-method):    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/tiny-tiny-rss-checker/lib/scriptaculous/scriptaculous.js:31:7:error(insecure-document-method):      document.write('<script type="text/javascript" src="'+libraryName+'"><\/script>');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
