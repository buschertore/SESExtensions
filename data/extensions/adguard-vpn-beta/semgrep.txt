data/tempCode/adguard-vpn-beta/src/common/log-storage/storageProvider/browserProvider/BrowserLogStorageProvider.ts:48:27:info(unsafe-formatstring):            console.error(`Error parsing logs from storage: ${e}`, 'Setting logs to the empty array.');:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/adguard-vpn-beta/src/common/utils/string.ts:48:20:warning(detect-non-literal-regexp):    const regexp = new RegExp(`^${regexpStr}$`);:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/adguard-vpn-beta/tasks/crx.ts:47:55:warning(path-join-resolve-traversal):        const resolverPath = path.resolve(WRITE_PATH, crxName);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-vpn-beta/tasks/translations/download.js:57:53:warning(path-join-resolve-traversal):            const filePath = path.join(LOCALES_DIR, lang, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-vpn-beta/tasks/translations/helpers.js:33:55:warning(path-join-resolve-traversal):    const filePath = path.join(LOCALES_ABSOLUTE_PATH, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-vpn-beta/tasks/translations/helpers.js:44:57:warning(path-join-resolve-traversal):    const localePath = path.join(LOCALES_ABSOLUTE_PATH, locale, LOCALE_DATA_FILENAME);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-vpn-beta/tasks/translations/unused.js:42:36:warning(path-join-resolve-traversal):        const fullPath = path.join(dirPath, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/adguard-vpn-beta/tasks/translations/unused.js:42:45:warning(path-join-resolve-traversal):        const fullPath = path.join(dirPath, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
