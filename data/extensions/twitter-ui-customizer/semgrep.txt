data/tempCode/twitter-ui-customizer/npm-scripts/vite-plugin/vite-plugin-web-ext.ts:93:29:error(spawn-shell-true):                    child = spawn(`web-ext`, [`run -s "./dist" -t chromium -u twitter.com ${com_args}`], { shell: true });:Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
data/tempCode/twitter-ui-customizer/src/content/index.ts:35:9:info(unsafe-formatstring):        `%cTwitter UI Customizer${isSafemode ? " (Safe Mode)" : ""}%cby kaonasi_biwa\n\nTwitter を思いのままに。⧸ Language: ${TUICI18N.get("@JapaneseLanguageName")}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/twitter-ui-customizer/src/content/modules/i18n/index.ts:9:30:warning(insecure-object-assign):            i18nData[elem] = Object.assign(:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
data/tempCode/twitter-ui-customizer/src/content/modules/observer/titleObserver.ts:20:56:warning(detect-non-literal-regexp):                const titleInfo = document.title.match(new RegExp(regexp)); /*/Xユーザーの(.*)さん: 「(.*)」/*/:RegExp() called with a `regexp` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/twitter-ui-customizer/src/content/modules/pref/index.ts:18:13:warning(prototype-pollution-loop):            pointer = pointer[k];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/twitter-ui-customizer/src/content/modules/settings/index.ts:96:13:error(insecure-document-method):            tweetTextElement.innerHTML = tweetText.replace("{mention}", tweetLinkElement.outerHTML);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
