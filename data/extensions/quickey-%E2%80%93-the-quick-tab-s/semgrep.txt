data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:94:23:warning(var-in-script-tag):        ga('create', '{{ page.google_analytics | default: site.google_analytics }}', 'auto');:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:22:5:warning(missing-integrity):    <link rel="chrome-webstore-item" href="https://chrome.google.com/webstore/detail/ldlghkoiihaelfnggonhjnfiabmaficg">:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:26:5:warning(missing-integrity):    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:44:27:warning(var-in-href):          <p class="view"><a href="{{ site.github.repository_url }}">View the project on GitHub <small>{{ github_name }}</small></a></p>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:49:17:warning(var-in-href):            <li><a href="{{ site.github.zip_url }}">Download <strong>ZIP File</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:50:17:warning(var-in-href):            <li><a href="{{ site.github.tar_url }}">Download <strong>TAR Ball</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:51:17:warning(var-in-href):            <li><a href="{{ site.github.repository_url }}">View On <strong>GitHub</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:79:42:warning(var-in-href):        <p>This project is maintained by <a href="{{ site.github.owner_url }}">{{ site.github.owner_name }}</a></p>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:44:30:warning(template-href-var):          <p class="view"><a href="{{ site.github.repository_url }}">View the project on GitHub <small>{{ github_name }}</small></a></p>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:49:20:warning(template-href-var):            <li><a href="{{ site.github.zip_url }}">Download <strong>ZIP File</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:50:20:warning(template-href-var):            <li><a href="{{ site.github.tar_url }}">Download <strong>TAR Ball</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:51:20:warning(template-href-var):            <li><a href="{{ site.github.repository_url }}">View On <strong>GitHub</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:79:45:warning(template-href-var):        <p>This project is maintained by <a href="{{ site.github.owner_url }}">{{ site.github.owner_name }}</a></p>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:84:18:error(var-in-script-tag):    <script src="{{ '/assets/js/scale.fix.js' | relative_url }}"></script>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:94:23:error(var-in-script-tag):        ga('create', '{{ page.google_analytics | default: site.google_analytics }}', 'auto');:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:44:30:warning(template-href-var):          <p class="view"><a href="{{ site.github.repository_url }}">View the project on GitHub <small>{{ github_name }}</small></a></p>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:49:20:warning(template-href-var):            <li><a href="{{ site.github.zip_url }}">Download <strong>ZIP File</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:50:20:warning(template-href-var):            <li><a href="{{ site.github.tar_url }}">Download <strong>TAR Ball</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:51:20:warning(template-href-var):            <li><a href="{{ site.github.repository_url }}">View On <strong>GitHub</strong></a></li>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/docs/_layouts/default.html:79:45:warning(template-href-var):        <p>This project is maintained by <a href="{{ site.github.owner_url }}">{{ site.github.owner_name }}</a></p>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/src/js/background/storage.js:90:24:info(unsafe-formatstring):DEBUG && console.error(`Storage error: ${failure}`, storage);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/src/js/lib/lodash.js:27:180:warning(prototype-pollution-loop):}catch(t){}var u=le.call(t);return e&&(r?t[je]=n:delete t[je]),u}function Qt(t,r,n){r=kt(r,t);for(var e=-1,u=r.length,o=false;++e<u;){var i=pr(r[e]);if(!(o=null!=t&&n(t,i)))break;t=t[i]}return o||++e!=u?o:(u=null==t?0:t.length,!!u&&Or(u)&&tr(i,u)&&(Qe(t)||Ke(t)))}function Xt(t){var r=t.length,n=new t.constructor(r);return r&&"string"==typeof t[0]&&ae.call(t,"index")&&(n.index=t.index,n.input=t.input),n}function Yt(t){return typeof t.constructor!="function"||ur(t)?{}:De(_e(t))}function Zt(t,r,n){var e=t.constructor;:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/src/js/lib/pinyin.js:2202:28:warning(detect-non-literal-regexp):const RE_PHONETIC_SYMBOL = new RegExp("([" + Object.keys(PHONETIC_SYMBOL).join("") + "])", "g");:RegExp() called with a `__webpack_require__` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/src/js/lib/require.js:2140:16:warning(eval-detected):        return eval(text);:Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.
data/tempCode/quickey-%E2%80%93-the-quick-tab-s/src/js/options/keyboard-shortcuts.js:65:31:warning(detect-non-literal-regexp):					const chromeKeyPattern = new RegExp("[ " + chromeKey + "]", "i");:RegExp() called with a `chromeKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
