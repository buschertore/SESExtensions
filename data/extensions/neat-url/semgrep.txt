data/tempCode/neat-url/options.js:122:5:error(insecure-document-method):				i18nElements[i].innerHTML = message;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/neat-url/options.js:94:15:info(unsafe-formatstring):		console.log("options.js val restored for " + p + " is", val);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/neat-url/shared.js:110:24:warning(detect-non-literal-regexp):	return target.replace(new RegExp(search, 'g'), replacement);:RegExp() called with a `search` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/neat-url/shared.js:442:14:warning(incomplete-sanitization):		.map(bp => bp.replace("KEY{", "").replace("}", ""));:`bp.replace("KEY{", "").replace` method will only replace the first occurrence when used with a string argument ("}"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
