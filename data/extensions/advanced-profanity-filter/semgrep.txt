data/tempCode/advanced-profanity-filter/bin/common.mjs:43:21:warning(detect-non-literal-regexp):      const regex = new RegExp(`^${prefix}`);:RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/advanced-profanity-filter/bin/watch.mjs:13:43:warning(path-join-resolve-traversal):  fse.copySync(file, path.join('./dist/', basename));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/advanced-profanity-filter/src/script/domain.ts:46:33:warning(detect-non-literal-regexp):    return sorted.find((key) => new RegExp(`(^|.)${key}$`).test(hostname));:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/advanced-profanity-filter/src/script/webConfig.ts:92:21:warning(detect-non-literal-regexp):    const pattern = new RegExp(`^_${key}\\d+`);:RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
