data/tempCode/stylebot/src/background/utils.ts:120:28:warning(detect-non-literal-regexp):      const regexPattern = new RegExp(pattern, 'i');:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/stylebot/src/background/utils.ts:132:12:warning(detect-non-literal-regexp):    return new RegExp(regex).test(pageUrl);:RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/stylebot/src/css/filter.ts:11:48:warning(detect-non-literal-regexp):const getEffectRegex = (name: FilterEffect) => new RegExp(`${name}\\((.*)\\)$`);:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/stylebot/src/css/inject-style.ts:19:5:error(insecure-document-method):    el.innerHTML = cssWithExpandedImports;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/stylebot/src/dark-mode/index.ts:177:5:error(insecure-document-method):    el.innerHTML = css;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/stylebot/src/dark-mode/index.ts:154:21:info(unsafe-formatstring):        console.log(`Error analyzing ${selector}`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/stylebot/src/editor/components/CssPropertyValueGroup.vue:15:9:warning(avoid-v-html):        <span v-if="option.html" v-html="option.html" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/stylebot/src/editor/utils/init-editor.ts:58:7:error(insecure-document-method):      styleEl.innerHTML = css;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/stylebot/src/monaco-editor/iframe/MonacoEditorIframe.ts:125:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener(:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/stylebot/src/monaco-editor/iframe/MonacoEditorIframe.ts:90:5:warning(wildcard-postmessage-configuration):    window.parent.postMessage(message, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/stylebot/src/readability/components/TheReader.vue:16:7:warning(avoid-v-html):      <div class="stylebot-reader-content" v-html="article.content" />:Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.
data/tempCode/stylebot/src/readability/reader.ts:21:9:error(insecure-document-method):        el.innerHTML = css;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
