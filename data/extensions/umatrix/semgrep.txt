data/tempCode/umatrix/platform/chromium/vapi-background.js:1195:32:error(detect-insecure-websocket):            if ( urls.indexOf('ws://*/*') === -1 ) {:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/umatrix/platform/chromium/vapi-background.js:1196:28:error(detect-insecure-websocket):                urls.push('ws://*/*');:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
data/tempCode/umatrix/platform/firefox/vapi-webrequest.js:193:20:warning(detect-non-literal-regexp):            return new RegExp(:RegExp() called with a `a` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/platform/firefox/vapi-webrequest.js:193:20:warning(detect-non-literal-regexp):            return new RegExp(:RegExp() called with a `list` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/js/codemirror/search.js:34:21:warning(detect-non-literal-regexp):            query = new RegExp(query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), caseInsensitive ? "gi" : "g");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/js/codemirror/search.js:36:21:warning(detect-non-literal-regexp):            query = new RegExp(query.source, query.ignoreCase ? "gi" : "g");:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/js/codemirror/search.js:178:27:warning(detect-non-literal-regexp):            try { query = new RegExp(isRE[1], isRE[2].indexOf("i") === -1 ? "" : "i"); }:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/js/logger-ui.js:138:18:warning(detect-non-literal-regexp):            re = new RegExp(re.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');:RegExp() called with a `re` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/js/user-rules.js:125:13:warning(detect-non-literal-regexp):            new RegExp(filter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi') ::RegExp() called with a `filter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/lib/codemirror/addon/search/searchcursor.js:26:41:warning(detect-non-literal-regexp):    return current == target ? regexp : new RegExp(regexp.source, target):RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/umatrix/src/lib/codemirror/addon/search/searchcursor.js:26:41:warning(detect-non-literal-regexp):    return current == target ? regexp : new RegExp(regexp.source, target):RegExp() called with a `regexp` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
