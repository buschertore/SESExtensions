/home/codescan/mailvelope/config/webpack.comp.js:18:26:warning(path-join-resolve-traversal):      path: path.resolve(`./build/tmp/components/${pathname}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/mailvelope/locales/ar/messages.json:11:21:warning(contains-bidirectional-characters):        "message": "‫<0>هيءْ Mailvelope </0>للبدء !‬",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:11:63:warning(contains-bidirectional-characters):        "message": "‫<0>هيءْ Mailvelope </0>للبدء !‬",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:91:63:warning(contains-bidirectional-characters):        "message": "يطابق اسم النطاق النمط ‪[*.]host.name.tld[:port]‬",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:91:90:warning(contains-bidirectional-characters):        "message": "يطابق اسم النطاق النمط ‪[*.]host.name.tld[:port]‬",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:123:21:warning(contains-bidirectional-characters):        "message": "‮التعمية",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:243:21:warning(contains-bidirectional-characters):        "message": "‮لا",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:255:21:warning(contains-bidirectional-characters):        "message": "‮نعم",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:447:21:warning(contains-bidirectional-characters):        "message": "‫اجعل Mailvelope أكثر أمانا عبر تخصيص خلفية الأمن لديك.‬",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:447:113:warning(contains-bidirectional-characters):        "message": "‫اجعل Mailvelope أكثر أمانا عبر تخصيص خلفية الأمن لديك.‬",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:671:21:warning(contains-bidirectional-characters):        "message": "‮اسم الملف",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:1087:21:warning(contains-bidirectional-characters):        "message": "‮كلمة السّر",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/locales/ar/messages.json:1135:21:warning(contains-bidirectional-characters):        "message": "‮المبدئيّ",:This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
/home/codescan/mailvelope/src/app/keyring/KeyImport.js:22:28:error(detected-pgp-private-key-block):const PRIVATE_KEY_REGEX = /-----BEGIN PGP PRIVATE KEY BLOCK-----[\s\S]+?-----END PGP PRIVATE KEY BLOCK-----/g;:Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.
/home/codescan/mailvelope/src/app/settings/Provider.js:152:19:warning(detect-non-literal-regexp):    const regex = new RegExp(matchPattern2RegExString(host));:RegExp() called with a `host` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/mailvelope/src/lib/inject.js:28:27:warning(detect-non-literal-regexp):      watchlistRegex.push(new RegExp(originAndPathMatches));:RegExp() called with a `{schemes, host}` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/mailvelope/src/lib/lib-mvelo.js:47:9:warning(prototype-pollution-loop):        obj = obj[path[i]];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/mailvelope/src/lib/util.js:266:10:warning(detect-non-literal-regexp):  return new RegExp(:RegExp() called with a `matchPattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/mailvelope/src/modules/KeyringBase.js:126:21:info(unsafe-formatstring):        console.log(`Error in KeyringBase.getKeyData for key ${key.getFingerprint()}.`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/mailvelope/src/modules/key.js:148:19:info(unsafe-formatstring):      console.log(`Error in mapKeys on mapping primary user for key ${key.getFingerprint()}.`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/mailvelope/src/modules/keyStore.js:92:22:warning(detect-non-literal-regexp):  const emailRegex = new RegExp(`<${emailEsc}>`);:RegExp() called with a `email` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/mailvelope/src/modules/keyring.js:112:19:info(unsafe-formatstring):      console.log(`Building keyring for id ${keyringId} failed`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/mailvelope/src/modules/keyring.js:129:17:info(unsafe-formatstring):    console.log(`Building keyring for id ${GNUPG_KEYRING_ID} failed`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/mailvelope/src/modules/wkdLocate.js:128:82:warning(detect-non-literal-regexp):    blacklist = (defaults.preferences.keyserver.wkd_blacklist || []).map(item => RegExp(item, 'i'));:RegExp() called with a `item` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
