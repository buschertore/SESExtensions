data/tempCode/semanticfinder/extension/src/utils/utils.js:2:17:info(unsafe-formatstring):    console.log("%c" + label + ": %c" + message,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/semanticfinder/src/js/index.js:180:13:error(insecure-document-method):            listItem.innerHTML = createCardHTML(text, similarity);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/index.js:201:13:error(insecure-document-method):            listItem.innerHTML = createCardHTML(text, similarity);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/index.js:789:9:error(insecure-document-method):        document.getElementById("ollama_chat_text").innerHTML = marked(ollama_response):User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/semantic.js:118:13:error(insecure-document-method):            document.getElementById("chat_text").innerHTML = message.chat_text:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/semantic.js:123:13:error(insecure-document-method):            document.getElementById("summary_text").innerHTML = message.summary_text:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/utils.js:398:25:error(insecure-document-method):                        tooltip.innerHTML = `${info.object.label} <br>Similarity: ${info.object.similarity.toFixed(2)}`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/utils.js:417:25:error(insecure-document-method):                        tooltip.innerHTML = `${info.object.label} <br>Similarity: ${info.object.similarity.toFixed(2)}`;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/semanticfinder/src/js/utils.js:134:19:warning(detect-non-literal-regexp):    const regex = new RegExp(r, 'g');:RegExp() called with a `r` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/semanticfinder/src/js/utils.js:569:27:info(unsafe-formatstring):            console.error(`Error handling remote PDF file upload for URL ${url}:`, error);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
