/home/codescan/Reddit-Enhancement-Suite/lib/core/migrate/migrators.js:24:17:info(unsafe-formatstring):		console.error(`Couldn't migrate ${moduleID}::${optionName} from`, formerDefaultValue, 'to/via', valueOrFunction, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/core/migrate/migrators.js:43:17:info(unsafe-formatstring):		console.error(`Couldn't migrate ${moduleID}::${optionName} to`, valueOrFunction, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/core/migrate/migrators.js:60:17:info(unsafe-formatstring):		console.error(`Couldn't migrate ${oldModuleID}::${oldOptionName} to ${newModuleID}::${newOptionName} via`, valueOrFunction, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/core/migrate/migrators.js:78:17:info(unsafe-formatstring):		console.error(`Couldn't migrate storage ${oldKey} to ${newModuleID}::${newOptionName} via`, valueOrFunction, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/commandLine.js:73:26:error(insecure-document-method):	const setTip = str => { tip.innerHTML = DOMPurify.sanitize(str); };:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Reddit-Enhancement-Suite/lib/modules/commandLine.js:75:28:error(insecure-document-method):	const setError = str => { error.innerHTML = DOMPurify.sanitize(str); };:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Reddit-Enhancement-Suite/lib/modules/commentPreview.js:314:31:error(insecure-document-method):		for (const ele of elements) ele.innerHTML = markdownToHTML(markdownText);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Reddit-Enhancement-Suite/lib/modules/commentTools.js:768:34:warning(detect-non-literal-regexp):			macroText = macroText.replace(new RegExp(placeholder, 'g'), value);:RegExp() called with a `macroText` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/customToggles.js:50:18:info(unsafe-formatstring):			console.error(`A toggle with key ${key} already exists`, instance);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/filteReddit/Case.js:76:11:warning(detect-non-literal-regexp):			return new RegExp(str, flags);:RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/filteReddit/Case.js:79:11:warning(detect-non-literal-regexp):			return new RegExp(fullMatch ? `^${patt}$` : patt, 'i');:RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/filteReddit/Case.js:201:64:warning(detect-non-literal-regexp):		return Object.entries(variants).map<*>(([flags, sources]) => new RegExp(sources.join('|'), flags));:RegExp() called with a `pattIfEmpty` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/filteReddit/Case.js:65:18:info(unsafe-formatstring):			console.error(`Could not build case: ${e.message}. Ignoring.`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/hosts/tumblr.js:20:5:error(detected-generic-api-key):				api_key: 'WeJQquHCAasi5EzaN9jMtIZkYzGfESUtEvcYDeSMLICveo3XDq',:Generic API Key detected
/home/codescan/Reddit-Enhancement-Suite/lib/modules/penaltyBox.js:150:16:info(unsafe-formatstring):		console.warn(`${module.moduleID} could not disable option`, moduleID, optionKey);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/settingsNavigation.js:185:4:warning(insufficient-postmessage-origin-validation):			window.addEventListener('message', ({ origin, data }: MessageEvent) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/Reddit-Enhancement-Suite/lib/modules/settingsNavigation.js:142:3:warning(wildcard-postmessage-configuration):		window.parent.postMessage({ hash }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/settingsNavigation.js:153:3:warning(wildcard-postmessage-configuration):		iframe.contentWindow.postMessage({ close: true }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/settingsNavigation.js:173:3:warning(wildcard-postmessage-configuration):		(iframe && iframe.contentWindow || window).postMessage({ load: { moduleID, optionKey } }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/settingsNavigation.js:181:16:warning(wildcard-postmessage-configuration):			if (iframe) iframe.contentWindow.postMessage({ context }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/settingsNavigation.js:198:3:warning(wildcard-postmessage-configuration):		window.parent.postMessage({ closing: true }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/showImages.js:1663:5:warning(wildcard-postmessage-configuration):				this.iframe.contentWindow.postMessage(this.playCommand, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/showImages.js:1673:5:warning(wildcard-postmessage-configuration):				this.iframe.contentWindow.postMessage(this.pauseCommand, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/showImages.js:955:18:info(unsafe-formatstring):			console.error(`showImages: could not create expando for ${mediaUrl.href}`, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/modules/subredditManager.js:751:2:error(insecure-document-method):	container.innerHTML = shortcuts;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Reddit-Enhancement-Suite/lib/options/handleBlocking.js:12:4:warning(wildcard-postmessage-configuration):			window.parent.postMessage({ failedToLoad: true }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/options/options.entry.js:20:2:warning(wildcard-postmessage-configuration):	window.parent.postMessage({ loadSuccess: true }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/options/options.entry.js:23:2:warning(wildcard-postmessage-configuration):	window.parent.postMessage({ failedToLoad: true }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
/home/codescan/Reddit-Enhancement-Suite/lib/options/settingsConsole.js:56:2:warning(insufficient-postmessage-origin-validation):	window.addEventListener('message', ({ data }) => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/Reddit-Enhancement-Suite/lib/utils/caseBuilder.js:98:17:info(unsafe-formatstring):		console.error(`Case type ${data.type} is not available. Ignoring block.`, data);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/Reddit-Enhancement-Suite/lib/utils/pageContextScript.js:36:23:error(insecure-document-method):					if (origContent) ele.innerHTML = origContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Reddit-Enhancement-Suite/lib/utils/string.js:67:2:error(insecure-document-method):	template.innerHTML = markup;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
