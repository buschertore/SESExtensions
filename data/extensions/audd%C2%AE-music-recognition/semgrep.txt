data/tempCode/audd%C2%AE-music-recognition/src/popup/canvas.js:2:471:info(unsafe-formatstring):class MiniGl{constructor(canvas,width,height,debug=false){const _miniGl=this,debug_output=-1!==document.location.search.toLowerCase().indexOf("debug=webgl");_miniGl.canvas=canvas,_miniGl.gl=_miniGl.canvas.getContext("webgl",{antialias:true}),_miniGl.meshes=[];const context=_miniGl.gl;width&&height&&this.setSize(width,height),_miniGl.lastDebugMsg,_miniGl.debug=debug&&debug_output?function(e){const t=new Date;t-_miniGl.lastDebugMsg>1e3&&console.log("---"),console.log(t.toLocaleTimeString()+Array(Math.max(0,32-e.length)).join(" ")+e+": ",...Array.from(arguments).slice(1)),_miniGl.lastDebugMsg=t}:()=>{},Object.defineProperties(_miniGl,{Material:{enumerable:false,value:class{constructor(vertexShaders,fragments,uniforms={}){const material=this;function getShaderByType(type,source){const shader=context.createShader(type);return context.shaderSource(shader,source),context.compileShader(shader),context.getShaderParameter(shader,context.COMPILE_STATUS)||console.error(context.getShaderInfoLog(shader)),_miniGl.debug("Material.compileShaderSource",{source:source}),shader}:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:171:2:warning(var-in-script-tag):	{{#history}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:172:11:warning(var-in-script-tag):	<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:173:75:warning(var-in-script-tag):	  <div class="history-cover"><img src="../../img/no-album.svg" data-src="{{albumImage}}" width="45"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:175:32:warning(var-in-script-tag):	  <div class="history-artist">{{artist}}</div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:176:31:warning(var-in-script-tag):	  <div class="history-title">{{title}}</div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:178:2:warning(var-in-script-tag):	{{/history}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:92:4:warning(var-in-href):			<a href="{{song_link}}?t={{timecode}}" target="_blank"><button class="results-button button-listen">LISTEN</button></a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:128:5:warning(var-in-href):				<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:153:5:warning(var-in-href):				<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:172:2:warning(var-in-href):	<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:190:13:warning(var-in-href):            <a href={{tab_url}} target="_blank">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:195:13:warning(var-in-href):            <a href={{link}} target="_blank">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:92:7:warning(template-href-var):			<a href="{{song_link}}?t={{timecode}}" target="_blank"><button class="results-button button-listen">LISTEN</button></a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:128:8:warning(template-href-var):				<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:153:8:warning(template-href-var):				<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:172:5:warning(template-href-var):	<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:190:16:warning(template-href-var):            <a href={{tab_url}} target="_blank">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:195:16:warning(template-href-var):            <a href={{link}} target="_blank">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:171:2:error(var-in-script-tag):	{{#history}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:172:11:error(var-in-script-tag):	<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:173:75:error(var-in-script-tag):	  <div class="history-cover"><img src="../../img/no-album.svg" data-src="{{albumImage}}" width="45"></div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:175:32:error(var-in-script-tag):	  <div class="history-artist">{{artist}}</div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:176:31:error(var-in-script-tag):	  <div class="history-title">{{title}}</div>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:178:2:error(var-in-script-tag):	{{/history}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:92:7:warning(template-href-var):			<a href="{{song_link}}?t={{timecode}}" target="_blank"><button class="results-button button-listen">LISTEN</button></a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:128:8:warning(template-href-var):				<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:153:8:warning(template-href-var):				<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:172:5:warning(template-href-var):	<a href="{{song_link}}" target="_blank"> <div class="history-track">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:190:16:warning(template-href-var):            <a href={{tab_url}} target="_blank">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.html:195:16:warning(template-href-var):            <a href={{link}} target="_blank">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.js:270:9:error(insecure-document-method):        objects[i].innerHTML = chrome.i18n.getMessage(objects[i].dataset.message);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/audd%C2%AE-music-recognition/src/popup/popup.js:664:4:error(insecure-document-method):	  recordingLengthTextDiv.innerHTML = this.value / 10 + "s";:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
