data/tempCode/vimium-c-all-by-keyboard/background/browsing_data_manager.ts:732:35:warning(detect-non-literal-regexp):  blockListRe_ = arr.length > 0 ? new RegExp(arr.map(BgUtils_.escapeAllForRe_).join("|"), "") : null:RegExp() called with a `newList` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/clipboard.ts:70:15:warning(detect-non-literal-regexp):      sepRe = new RegExp(`^((?:\\\\[^]|[^${s}\\\\])+)${s}(.*)${s}([a-z]{0,9})(?:,|$)`):RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/completion.ts:443:31:warning(detect-non-literal-regexp):        const re: RegExpOne = new RegExp(`^https?://${BgUtils_.escapeAllForRe_(key)}/?$`):RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/completion_utils.ts:197:30:warning(detect-non-literal-regexp):    RegExpCache_.parts_[0] = new RegExp(isShortUrl ? s : s + "(?:/|$)", RegExpCache_.parts_[0].flags as "":RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/help_dialog.ts:176:24:info(detect-replaceall-sanitization):        description = [i18n_.get(command as NormalizedNames)! // lgtm [js/incomplete-sanitization]:Detected a call to `replace()` in an attempt to HTML escape the string `i18n_.get(command as NormalizedNames)!`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.
data/tempCode/vimium-c-all-by-keyboard/background/help_dialog.ts:176:24:info(detect-replaceall-sanitization):        description = [i18n_.get(command as NormalizedNames)! // lgtm [js/incomplete-sanitization]:Detected a call to `replace()` in an attempt to HTML escape the string `i18n_.get(command as NormalizedNames)! // lgtm [js/incomplete-sanitization]
              .replace("<", "&lt;")`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.
data/tempCode/vimium-c-all-by-keyboard/background/help_dialog.ts:176:24:warning(incomplete-sanitization):        description = [i18n_.get(command as NormalizedNames)! // lgtm [js/incomplete-sanitization]:`i18n_.get(command as NormalizedNames)!.replace` method will only replace the first occurrence when used with a string argument ("<"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/vimium-c-all-by-keyboard/background/help_dialog.ts:176:24:warning(incomplete-sanitization):        description = [i18n_.get(command as NormalizedNames)! // lgtm [js/incomplete-sanitization]:`i18n_.get(command as NormalizedNames)! // lgtm [js/incomplete-sanitization]
              .replace("<", "&lt;").replace` method will only replace the first occurrence when used with a string argument (">"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/vimium-c-all-by-keyboard/background/help_dialog.ts:178:23:warning(incomplete-sanitization):            (params ? cmdParams.replace("*", () => params) : " ")] // lgtm [js/incomplete-sanitization]:`cmdParams.replace` method will only replace the first occurrence when used with a string argument ("*"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/vimium-c-all-by-keyboard/background/key_mappings.ts:527:26:warning(prototype-pollution-loop):      while (j < last) { ref2 = ref2[stripKey_(arr[j++])] = {} }:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/vimium-c-all-by-keyboard/background/parse_urls.ts:416:25:warning(detect-non-literal-regexp):            delimiter = new RegExp("^" + key, (<RegExpI> /[a-z]/i).test(key) ? "i" as "" : "":RegExp() called with a `str` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/parse_urls.ts:490:15:warning(detect-non-literal-regexp):    matcher_: new RegExp(str + str2 + url, (<RegExpI> /[a-z]/i).test(str2) ? "i" as "" : "") as RegExpI | RegExpOne:RegExp() called with a `ind` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/parse_urls.ts:490:15:warning(detect-non-literal-regexp):    matcher_: new RegExp(str + str2 + url, (<RegExpI> /[a-z]/i).test(str2) ? "i" as "" : "") as RegExpI | RegExpOne:RegExp() called with a `url` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/run_commands.ts:119:65:warning(detect-non-literal-regexp):    template = template.replace(<RegExpG & RegExpSearchable<1>> new RegExp("\\$\\{([^}]*)}|\\$\\$":RegExp() called with a `rawMask` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/background/run_commands.ts:119:65:warning(detect-non-literal-regexp):    template = template.replace(<RegExpG & RegExpSearchable<1>> new RegExp("\\$\\{([^}]*)}|\\$\\$":RegExp() called with a `template` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:305:4:warning(var-in-href):			<a class="VimL TopLink" target="_blank" rel="noopener noreferrer" href="{{homePage}}/wiki">$Wiki</a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:306:4:warning(var-in-href):			<a class="VimL TopLink" target="_blank" rel="noopener noreferrer" href="{{browserHelp}}">$browserHelp</a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:306:70:warning(template-href-var):			<a class="VimL TopLink" target="_blank" rel="noopener noreferrer" href="{{browserHelp}}">$browserHelp</a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:346:61:warning(template-href-var):					class="VimL" target="_blank" rel="noopener noreferrer" href="{{release}}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:349:62:warning(template-href-var):				  class="VimL" target="_blank" rel="noopener noreferrer" href="{{reviewPage}}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:351:62:warning(template-href-var):				  class="VimL" target="_blank" rel="noopener noreferrer" href="{{homePage}}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:306:70:warning(template-href-var):			<a class="VimL TopLink" target="_blank" rel="noopener noreferrer" href="{{browserHelp}}">$browserHelp</a>:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:346:61:warning(template-href-var):					class="VimL" target="_blank" rel="noopener noreferrer" href="{{release}}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:349:62:warning(template-href-var):				  class="VimL" target="_blank" rel="noopener noreferrer" href="{{reviewPage}}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/help_dialog.html:351:62:warning(template-href-var):				  class="VimL" target="_blank" rel="noopener noreferrer" href="{{homePage}}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:87:36:warning(var-in-script-tag):	<div class="item" data-alt-index="{{altIndex}}">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:89:20:warning(var-in-script-tag):			<svg class="icon{{level}}{{favIcon}}" viewBox="0 0 64 64">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:89:29:warning(var-in-script-tag):			<svg class="icon{{level}}{{favIcon}}" viewBox="0 0 64 64">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:90:18:warning(var-in-script-tag):				<path class="{{typeIcon}}"></path>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:91:30:warning(var-in-script-tag):			</svg><span class="title">{{title}}</span>{{label}}{{time}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:91:46:warning(var-in-script-tag):			</svg><span class="title">{{title}}</span>{{label}}{{time}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:91:55:warning(var-in-script-tag):			</svg><span class="title">{{title}}</span>{{label}}{{time}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:94:7:warning(var-in-script-tag):			<a>{{textSplit}}</a>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:87:36:error(var-in-script-tag):	<div class="item" data-alt-index="{{altIndex}}">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:89:20:error(var-in-script-tag):			<svg class="icon{{level}}{{favIcon}}" viewBox="0 0 64 64">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:89:29:error(var-in-script-tag):			<svg class="icon{{level}}{{favIcon}}" viewBox="0 0 64 64">:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:90:18:error(var-in-script-tag):				<path class="{{typeIcon}}"></path>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:91:30:error(var-in-script-tag):			</svg><span class="title">{{title}}</span>{{label}}{{time}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:91:46:error(var-in-script-tag):			</svg><span class="title">{{title}}</span>{{label}}{{time}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:91:55:error(var-in-script-tag):			</svg><span class="title">{{title}}</span>{{label}}{{time}}:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/front/vomnibar.html:94:7:error(var-in-script-tag):			<a>{{textSplit}}</a>:Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).
data/tempCode/vimium-c-all-by-keyboard/lib/math_parser.js:44:4:warning(prototype-pollution-loop):			value = value[part];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/vimium-c-all-by-keyboard/lib/math_parser.js:54:4:warning(prototype-pollution-loop):			value = value[part];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/vimium-c-all-by-keyboard/lib/simple_eval.ts:974:38:warning(detect-non-literal-regexp):  else if (literal.c === 4) { return new RegExp(literal.v[0], literal.v[1] as "") }:RegExp() called with a `literal` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/lib/utils.ts:235:11:warning(detect-non-literal-regexp):    <any> new RegExp(Build.NDEBUG ? VTr(pattern) : VTr(pattern) || "^(?!)", flags as "g"):RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/lib/utils.ts:235:11:warning(detect-non-literal-regexp):    <any> new RegExp(Build.NDEBUG ? VTr(pattern) : VTr(pattern) || "^(?!)", flags as "g"):RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/pages/options_action.ts:223:31:warning(detect-non-literal-regexp):      : { t: serialized.t, v: new RegExp(serialized.v as string, "") }:RegExp() called with a `serialized` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/pages/options_base.ts:584:12:warning(detect-non-literal-regexp):    return new RegExp(pattern, suffix as "");:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/pages/options_base.ts:584:12:warning(detect-non-literal-regexp):    return new RegExp(pattern, suffix as "");:RegExp() called with a `suffix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/pages/options_ext.ts:228:41:warning(detect-non-literal-regexp):    omniBlockListRe = arr.length > 0 && new RegExp(arr.map((s: string): string => escapeAllForRe_(s)).join("|"), ""):RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/pages/options_ext.ts:258:21:warning(incomplete-sanitization):        ext_ver_f ? oTrans_("fileVCVer").replace("*", ext_ver_f) : "", // lgtm [js/incomplete-sanitization]:`oTrans_("fileVCVer").replace` method will only replace the first occurrence when used with a string argument ("*"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/vimium-c-all-by-keyboard/pages/options_ext.ts:259:22:warning(incomplete-sanitization):        (ext_ver_f ? oTrans_("fileVCVer_2").replace("*", ext_ver_f) : "" // lgtm [js/incomplete-sanitization]:`oTrans_("fileVCVer_2").replace` method will only replace the first occurrence when used with a string argument ("*"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.
data/tempCode/vimium-c-all-by-keyboard/scripts/dependencies.js:190:19:warning(detect-non-literal-regexp):      return re ? new RegExp(re[1], re[2]) : literal;:RegExp() called with a `literal` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/scripts/dependencies.js:387:10:warning(detect-non-literal-regexp):    if (!new RegExp("\\b" + name + " ?=").test(code)) {:RegExp() called with a `code` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/scripts/dependencies.js:588:17:warning(detect-non-literal-regexp):  const keyRe = new RegExp(`\\b(?:${keys})\\b`, "g"):RegExp() called with a `global_defs` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:37:44:warning(path-join-resolve-traversal):      path[i] = p[0] !== "!" ? osPath.join(base, p) : "!" + osPath.join(base, p.slice(1));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:37:50:warning(path-join-resolve-traversal):      path[i] = p[0] !== "!" ? osPath.join(base, p) : "!" + osPath.join(base, p.slice(1));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:37:73:warning(path-join-resolve-traversal):      path[i] = p[0] !== "!" ? osPath.join(base, p) : "!" + osPath.join(base, p.slice(1));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:37:79:warning(path-join-resolve-traversal):      path[i] = p[0] !== "!" ? osPath.join(base, p) : "!" + osPath.join(base, p.slice(1));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:314:28:warning(path-join-resolve-traversal):        path = osPath.join(path, "typescript");:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:316:29:warning(path-join-resolve-traversal):      path = osPath.resolve(path):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:325:24:warning(path-join-resolve-traversal):    if (osPath.resolve(path).startsWith(process.cwd())) {:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:577:76:warning(path-join-resolve-traversal):    return exports.checkAnyNewer(i[0], JSDEST, is_file ? osPath.join(DEST, i[1]) : DEST, is_file ? "" : ".js");:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/gulp-utils.js:628:70:warning(path-join-resolve-traversal):    const newerTransform = newer(is_file ? { dest: osPath.join(DEST, output) } : { dest: DEST, ext }):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/vimium-c-all-by-keyboard/scripts/make.sh:55:3:warning(ifs-tampering):  IFS=$'\n':The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.
data/tempCode/vimium-c-all-by-keyboard/scripts/make.sh:57:3:warning(ifs-tampering):  IFS="$OLD_IFS":The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.
