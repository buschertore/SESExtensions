/home/codescan/markdown-viewer/background/detect.js:100:126:warning(detect-non-literal-regexp):      (origin && origin.header && origin.path && origin.match && /\btext\/(?:(?:(?:x-)?markdown)|plain)\b/i.test(content) && new RegExp(origin.match).test(location.href)) ||:RegExp() called with a `url` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/markdown-viewer/background/detect.js:102:67:warning(detect-non-literal-regexp):      (origin && origin.path && origin.match && !origin.header && new RegExp(origin.match).test(location.href)):RegExp() called with a `url` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/markdown-viewer/background/mathjax.js:4:20:warning(detect-non-literal-regexp):  var delimiters = new RegExp([:RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/markdown-viewer/background/storage.js:19:5:warning(insecure-object-assign):    Object.assign(state, JSON.parse(JSON.stringify(:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
/home/codescan/markdown-viewer/content/mermaid.js:15:11:error(insecure-document-method):          diagram.innerHTML = definitions[index]:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
