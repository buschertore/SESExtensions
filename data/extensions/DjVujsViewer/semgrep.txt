/home/codescan/djvujs/.js:9:47:error(detect-child-process):        const subProcess = child_process.exec(command, resolve);:Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/djvujs/library/debug/js/DjVuGlobals.js:9:5:error(insecure-document-method):    output.innerHTML += str + "<br>";:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/djvujs/library/debug/js/DjVuGlobals.js:13:5:error(insecure-document-method):    output.innerHTML += str;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/djvujs/library/debug/js/reloader.js:9:21:info(unsafe-formatstring):        console.log(`%cTrying to open a connention with ${address} ...`, "color: blue");:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/djvujs/library/debug/js/reloader.js:11:40:info(unsafe-formatstring):        ws.onopen = () => console.info(`%cConnection is opened with ${address}. The page will be reloaded on each update.`, "color: green");:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/djvujs/library/debug/js/reloader.js:7:24:error(detect-insecure-websocket):        var address = 'ws://' + location.host;:Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
/home/codescan/djvujs/library/server.js:19:7:info(express-check-csurf-middleware-usage):const app = express();:A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
/home/codescan/djvujs/library/server.js:36:14:warning(direct-response-write):    res.send(`:Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.
/home/codescan/djvujs/library/server.js:39:1:warning(raw-html-format):   <body><embed type="image/x-djvu" src="${req.query.file}" width="600"></body>:User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.
/home/codescan/djvujs/library/server.js:48:16:warning(using-http-server):const server = http.createServer(app);:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
/home/codescan/djvujs/viewer/src/components/Translation.jsx:44:23:warning(detect-non-literal-regexp):        const regex = new RegExp(`(${st})`, 'g');:RegExp() called with a `insertions` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
