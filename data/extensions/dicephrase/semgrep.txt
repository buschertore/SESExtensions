data/tempCode/dicephrase/fw/bootstrap/js/bootstrap.js:1401:5:error(insecure-document-method):    createdDocument.body.innerHTML = unsafeHtml:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/dicephrase/js/results.js:132:3:error(insecure-document-method):		newPassphraseArea.innerHTML = concealmentBullets;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/dicephrase/js/results.js:154:3:error(insecure-document-method):		countdownSecondsText.innerHTML = 60;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/dicephrase/js/results.js:159:3:error(insecure-document-method):		countdownSecondsText.innerHTML = "0" + countdownSecondsText.innerHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/dicephrase/js/results.js:182:2:error(insecure-document-method):	newPassphraseArea.innerHTML = concealmentBullets;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/dicephrase/js/results.js:115:14:warning(detect-non-literal-regexp):	var regex = new RegExp("\^" + number + "\\t\\S\+\$", "m");:RegExp() called with a `number` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
