/home/codescan/rikaikun/.github/workflows/presubmit.yml:25:9:warning(pull-request-target-code-checkout):      - uses: actions/checkout@v4.1.1:This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.
/home/codescan/rikaikun/.github/workflows/release.yml:42:9:error(run-shell-injection):        run: npx semantic-release ${{ github.event.inputs.dryRun}}:Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".
/home/codescan/rikaikun/extension/rikaicontent.ts:164:5:error(insecure-document-method):    shadowcontainer.innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/rikaikun/utils/update-db.ts:196:54:warning(path-join-resolve-traversal):                path.join('..', 'extension', 'data', dataFile),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/rikaikun/utils/update-db.ts:208:54:warning(path-join-resolve-traversal):                path.join('..', 'extension', 'data', indexFile),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/rikaikun/utils/update-db.ts:437:50:warning(path-join-resolve-traversal):    new URL(path.join('..', 'extension', 'data', dataFile), import.meta.url):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
