data/tempCode/toolkit-for-ynab/scripts/generateFeatureIndex.js:22:52:warning(path-join-resolve-traversal):      let featureSetting = require(path.join('..', projectFeaturePath, 'settings.js')); // eslint-disable-line global-require:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/toolkit-for-ynab/scripts/generateSettings.js:85:62:warning(path-join-resolve-traversal):          const setting = require(path.join(__dirname, '..', file)); // eslint-disable-line global-require:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/toolkit-for-ynab/scripts/lib/archive.ts:22:47:warning(path-join-resolve-traversal):  const zipFile = path.join(OUTPUT_DIRECTORY, `${zipFileNamePrefix}-v${version}-${browser}.zip`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/toolkit-for-ynab/scripts/publishForChrome.js:100:17:info(unsafe-formatstring):    console.log(`Failed to create release for ${version}.\n`, error);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/toolkit-for-ynab/src/core/common/errors/with-toolkit-error.ts:63:3:warning(wildcard-postmessage-configuration):  window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/toolkit-for-ynab/src/core/common/errors/with-toolkit-error.ts:60:17:info(unsafe-formatstring):  console.error(message, errorStack || '');:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/toolkit-for-ynab/src/core/content-scripts/extension-bridge.js:86:3:warning(insufficient-postmessage-origin-validation):  window.addEventListener('message', toolkitMessageHandler);:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/toolkit-for-ynab/src/core/content-scripts/extension-bridge.js:14:3:warning(wildcard-postmessage-configuration):  window.postMessage(:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/toolkit-for-ynab/src/extension/listeners/observeListener.js:102:9:info(unsafe-formatstring):        `Changed nodes have been the same for ${this.duplicateCount} emits. A feature is likely always updating DOM elements inside an observe without an proper exit condition.`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/toolkit-for-ynab/src/extension/listeners/observeListener.js:134:13:info(unsafe-formatstring):            `${feature.constructor.name}.observe() took %c${featureElapsed}ms%c to run`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/toolkit-for-ynab/src/extension/ynab-toolkit.tsx:48:5:warning(wildcard-postmessage-configuration):    window.postMessage({ type: OutboundMessageType.ToolkitLoaded }, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/toolkit-for-ynab/webpack.config.js:128:40:warning(path-join-resolve-traversal):            from: path.join(__dirname, `${CODE_SOURCE_DIR}/assets/environment/${env.buildType}`),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
