data/tempCode/lighthouse/core/audits/byte-efficiency/legacy-javascript.js:57:15:warning(detect-non-literal-regexp):    this.re = new RegExp(`(^\r\n|\r|\n)|${patternsExpression}`, 'g');:RegExp() called with a `patterns` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/lighthouse/core/config/config-helpers.js:512:47:warning(path-join-resolve-traversal):  const cwdPath = path.resolve(process.cwd(), moduleIdentifier);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/config/config-helpers.js:531:37:warning(path-join-resolve-traversal):  const relativePath = path.resolve(configDir, moduleIdentifier);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/config/config-helpers.js:531:48:warning(path-join-resolve-traversal):  const relativePath = path.resolve(configDir, moduleIdentifier);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:51:50:warning(path-join-resolve-traversal):  const artifactsStr = fs.readFileSync(path.join(basePath, artifactsFilename), 'utf8');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:60:62:warning(path-join-resolve-traversal):    const devtoolsLog = JSON.parse(fs.readFileSync(path.join(basePath, filename), 'utf8'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:60:72:warning(path-join-resolve-traversal):    const devtoolsLog = JSON.parse(fs.readFileSync(path.join(basePath, filename), 'utf8'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:72:44:warning(path-join-resolve-traversal):    const file = fs.readFileSync(path.join(basePath, filename), {encoding: 'utf-8'});:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:72:54:warning(path-join-resolve-traversal):    const file = fs.readFileSync(path.join(basePath, filename), {encoding: 'utf-8'});:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:105:31:warning(path-join-resolve-traversal):    fs.readFileSync(path.join(basePath, optionsFilename), 'utf-8'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:118:32:warning(path-join-resolve-traversal):    const stepPath = path.join(basePath, filename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:118:42:warning(path-join-resolve-traversal):    const stepPath = path.join(basePath, filename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:123:33:warning(path-join-resolve-traversal):      fs.readFileSync(path.join(stepPath, optionsFilename), 'utf-8'):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:184:32:warning(path-join-resolve-traversal):    const stepPath = path.join(basePath, `step${i}`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:187:17:warning(path-join-resolve-traversal):      path.join(stepPath, optionsFilename),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/asset-saver.js:193:15:warning(path-join-resolve-traversal):    path.join(basePath, optionsFilename),:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/lib/lantern/page-dependency-graph.js:458:19:info(unsafe-formatstring):      console.log(padRight(bar, widthInCharacters), `| ${displayName.slice(0, 30)}`);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/lighthouse/core/runner.js:539:75:warning(path-join-resolve-traversal):    if (typeof auditMode === 'string') return path.resolve(process.cwd(), auditMode);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/runner.js:540:76:warning(path-join-resolve-traversal):    if (typeof gatherMode === 'string') return path.resolve(process.cwd(), gatherMode);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/gcp-collection/fleet-create-directories.js:45:34:warning(path-join-resolve-traversal):  const dir = path.join(TMP_DIR, `instance${MACHINE_BASE_INDEX + i}`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/gcp-collection/fleet-create-directories.js:50:42:warning(path-join-resolve-traversal):    fs.copyFileSync(path.join(scriptDir, f), path.join(dir, f)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/gcp-collection/fleet-create-directories.js:50:56:warning(path-join-resolve-traversal):    fs.copyFileSync(path.join(scriptDir, f), path.join(dir, f)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/gcp-collection/fleet-create-directories.js:50:61:warning(path-join-resolve-traversal):    fs.copyFileSync(path.join(scriptDir, f), path.join(dir, f)):Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/gcp-collection/fleet-create-directories.js:52:30:warning(path-join-resolve-traversal):  fs.writeFileSync(path.join(dir, 'urls.txt'), urls.join('\n'));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/gcp-collection/gcp-run.sh:31:1:warning(ifs-tampering):IFS=$'\n':The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.
data/tempCode/lighthouse/core/scripts/gcp-collection/gcp-run.sh:44:1:warning(ifs-tampering):IFS=$OLDIFS:The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.
data/tempCode/lighthouse/core/scripts/gcp-collection/gcp-setup.sh:20:1:warning(curl-pipe-bash):curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -:Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid piping untrusted data into `bash` or any other shell if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.
data/tempCode/lighthouse/core/scripts/i18n/bake-ctc-to-lhl.js:124:32:warning(path-join-resolve-traversal):    const fullPath = path.join(dir, filename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/i18n/bake-ctc-to-lhl.js:124:37:warning(path-join-resolve-traversal):    const fullPath = path.join(dir, filename);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/i18n/bake-ctc-to-lhl.js:131:36:warning(path-join-resolve-traversal):      const outputFile = path.join(dir, path.basename(filename).replace('.ctc', ''));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/i18n/collect-strings.js:546:33:warning(path-join-resolve-traversal):  const globPattern = path.join(path.relative(LH_ROOT, dir), '/**/*.js');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/i18n/collect-strings.js:553:45:warning(path-join-resolve-traversal):    const absolutePath = path.join(LH_ROOT, relativeToRootPath);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/i18n/collect-strings.js:605:39:warning(path-join-resolve-traversal):  const fullPath = path.join(LH_ROOT, `shared/localization/locales/${locale}.ctc.json`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/core/scripts/lantern/collect/gcp-setup.sh:14:1:warning(curl-pipe-bash):curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -:Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid piping untrusted data into `bash` or any other shell if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.
data/tempCode/lighthouse/core/scripts/lantern/print-correlations.js:292:5:info(unsafe-formatstring):    `${label}:`.padEnd(10),:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/lighthouse/core/scripts/lantern/print-correlations.js:313:5:info(unsafe-formatstring):    `p${percentile}:`.padEnd(10),:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/lighthouse/core/scripts/lantern/run-on-all-assets.js:52:5:warning(insecure-object-assign):    Object.assign(site, {lantern});:Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.
data/tempCode/lighthouse/core/scripts/print-contributors.js:59:19:info(unsafe-formatstring):      console.log(`https://api.github.com/repos/GoogleChrome/lighthouse/commits/${author.hash}`, 'unexpected json', json);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/lighthouse/docs/recipes/auth/server/public/home-unauthenticated.html:14:3:warning(django-no-csrf-token):  <form class="login-form" action="/login" method="post">:Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
data/tempCode/lighthouse/docs/recipes/auth/server/server.js:31:3:warning(express-session-hardcoded-secret):  secret: 'notverysecret',:A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).
data/tempCode/lighthouse/report/renderer/details-renderer.js:194:19:info(unsafe-formatstring):    console.error(`Unknown details type: ${type}`, value);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/lighthouse/shared/localization/locales/ar.json:2370:400:warning(contains-bidirectional-characters):    "message": "نظرًا لتغيّر المواصفات، تم بشكل نهائي إيقاف إمكانية استخدام `SourceBuffer.abort()` الهادفة إلى إلغاء عملية إزالة النطاق غير المتزامن الذي يخصّ `remove()`. ستتم إزالة الميزة في المستقبل. وعليك معالجة الحدث `updateend` بدلاً من ذلك. ‫`abort()` مخصَّص فقط لإلغاء إمكانية إلحاق الوسائط غير المتزامنة أو إعادة ضبط حالة المحلِّل.":This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.
data/tempCode/lighthouse/third-party/axe/valid-langs.js:77:5:warning(prototype-pollution-loop):    array = array[index];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:40:56:warning(path-join-resolve-traversal):  const contentShellDirPath = path.resolve(CACHE_PATH, commitPosition, 'out', TARGET);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:41:53:warning(path-join-resolve-traversal):  const contentShellPath = path.resolve(CACHE_PATH, commitPosition, 'out');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:127:50:warning(path-join-resolve-traversal):  const contentShellPath = path.join(CACHE_PATH, folder);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:156:29:warning(path-join-resolve-traversal):  const dest = path.resolve(path.dirname(src), 'out');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:159:40:warning(path-join-resolve-traversal):  const originalDirPath = path.resolve(dest, 'content-shell');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:160:35:warning(path-join-resolve-traversal):  const newDirPath = path.resolve(dest, TARGET);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:168:25:warning(path-join-resolve-traversal):    return path.resolve(dirPath, 'content_shell');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:172:25:warning(path-join-resolve-traversal):    return path.resolve(dirPath, 'content_shell.exe');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:176:25:warning(path-join-resolve-traversal):    return path.resolve(dirPath, 'Content Shell.app', 'Contents', 'MacOS', 'Content Shell');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/download-content-shell.js:157:9:error(detect-child-process):  shell(`unzip ${src} -d ${dest}`);:Detected calls to child_process from a function argument `contentShellZipPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:65:41:warning(path-join-resolve-traversal):    const targetFilePath = path.resolve(dest, path.basename(src));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:65:47:warning(path-join-resolve-traversal):    const targetFilePath = path.resolve(dest, path.basename(src));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:78:40:warning(path-join-resolve-traversal):    const targetDirPath = path.resolve(dest, path.basename(src));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:78:46:warning(path-join-resolve-traversal):    const targetDirPath = path.resolve(dest, path.basename(src));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:85:40:warning(path-join-resolve-traversal):        const childPath = path.resolve(src, files[i]);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:85:45:warning(path-join-resolve-traversal):        const childPath = path.resolve(src, files[i]);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:89:47:warning(path-join-resolve-traversal):          const targetFilePath = path.resolve(targetDirPath, path.basename(childPath));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:89:62:warning(path-join-resolve-traversal):          const targetFilePath = path.resolve(targetDirPath, path.basename(childPath));:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/download-content-shell/utils.js:104:16:error(detect-child-process):  return shell(command).toString().trim();:Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
data/tempCode/lighthouse/third-party/esbuild-plugins-polyfills/esbuild-polyfills.js:88:29:warning(path-join-resolve-traversal):            key = path.join(path.dirname(args.importer), args.path);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/third-party/esbuild-plugins-polyfills/esbuild-polyfills.js:88:58:warning(path-join-resolve-traversal):            key = path.join(path.dirname(args.importer), args.path);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
data/tempCode/lighthouse/treemap/app/index.html:17:3:warning(missing-integrity):  <link rel="canonical" href="https://googlechrome.github.io/lighthouse/treemap/">:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/lighthouse/viewer/app/index.html:17:3:warning(missing-integrity):  <link rel="canonical" href="https://googlechrome.github.io/lighthouse/viewer/">:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/lighthouse/viewer/app/src/firebase-auth.js:19:7:error(detected-generic-api-key):      apiKey: 'AIzaSyBQEZMlX6A9B0jJ6PFGcBADbXZG9ogyCmQ',:Generic API Key detected
data/tempCode/lighthouse/viewer/app/src/lighthouse-report-viewer.js:469:5:warning(insufficient-postmessage-origin-validation):    window.addEventListener('message', e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/lighthouse/viewer/app/src/lighthouse-report-viewer.js:474:11:warning(wildcard-postmessage-configuration):          self.opener.postMessage({rendered: true}, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
data/tempCode/lighthouse/viewer/app/src/lighthouse-report-viewer.js:484:7:warning(wildcard-postmessage-configuration):      self.opener.postMessage({opened: true}, '*');:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
