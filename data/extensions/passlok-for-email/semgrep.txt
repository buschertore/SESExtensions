data/tempCode/passlok-for-email/html/help.html:137:73:warning(plaintext-http-link):    <p>1. Encrypt the files using AES with an archiving utility such as <a href="http://www.7-zip.org/" target="_blank">7-zip</a> (Windows), <a href="http://www.kekaosx.com/" target="_blank">Keka</a> (OSX), or <a href="https://wiki.archlinux.org/index.php/p7zip" target="_blank">p7zip</a> (Linux), then lock the password for the files inside an encrypted email message, and attach the encrypted archives through the email program's compose or reply window. This is best for large files.</p>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/passlok-for-email/html/help.html:137:142:warning(plaintext-http-link):    <p>1. Encrypt the files using AES with an archiving utility such as <a href="http://www.7-zip.org/" target="_blank">7-zip</a> (Windows), <a href="http://www.kekaosx.com/" target="_blank">Keka</a> (OSX), or <a href="https://wiki.archlinux.org/index.php/p7zip" target="_blank">p7zip</a> (Linux), then lock the password for the files inside an encrypted email message, and attach the encrypted archives through the email program's compose or reply window. This is best for large files.</p>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/passlok-for-email/js-lib/jsstegdecoder.js:115:9:warning(prototype-pollution-loop):        node = node[bit];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
data/tempCode/passlok-for-email/js-lib/purify.js:1060:11:error(insecure-document-method):          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/bodyscript.js:165:5:error(insecure-document-method):				composeBox.innerHTML = decryptSanitizer(request.bodyText);					//put in what was in email compose:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/content.js:122:8:error(insecure-document-method):							bodyDiv.innerHTML = request.composeHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/content.js:202:8:error(insecure-document-method):							bodyDiv.innerHTML = request.composeHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/content.js:291:8:error(insecure-document-method):							bodyDiv.innerHTML = request.composeHTML;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/crypto-sym.js:68:2:error(insecure-document-method):	readBox.innerHTML = decryptSanitizer(plain.trim());:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/crypto-sym.js:247:4:error(insecure-document-method):			readBox.innerHTML = decryptSanitizer(plain.trim());:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/crypto-sym.js:273:15:warning(detect-non-literal-regexp):				var reg = new RegExp(letter);:RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/passlok-for-email/js-src/crypto.js:811:2:error(insecure-document-method):	readBox.innerHTML = plainstr;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/keylock.js:168:28:warning(detect-non-literal-regexp):			string = string.replace(new RegExp(wordsFound[i], "g"),'');									//remove all instances:RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/passlok-for-email/js-src/popuphead.js:182:4:error(insecure-document-method):			composeBox.innerHTML += "<br><br>" + URLFromFileLoaded.replace(/  /g,' &nbsp;'):User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/popuphead.js:184:4:error(insecure-document-method):			composeBox.innerHTML += '<br><a download="' + escapedName + '" href="' + decryptSanitizer(URLFromFileLoaded) + '">' + escapedName + '</a>':User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/popuphead.js:207:3:error(insecure-document-method):		composeBox.innerHTML += decryptSanitizer('<img style="width:80%;" src="' + URLFromFileLoaded.replace(/=+$/,'') + '">'):User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/screens.js:300:4:error(insecure-document-method):			composeBox.innerHTML += "<br><br>" + URLFromFileLoaded.replace(/  /g,' &nbsp;'):User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/screens.js:302:4:error(insecure-document-method):			composeBox.innerHTML += '<br><a download="' + escapedName + '" href="' + decryptSanitizer(URLFromFileLoaded) + '">' + escapedName + '</a>':User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/passlok-for-email/js-src/screens.js:326:3:error(insecure-document-method):		composeBox.innerHTML += decryptSanitizer('<img src="' + URLFromFileLoaded.replace(/=+$/,'') + '">');:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
