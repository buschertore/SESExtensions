/home/codescan/app/res/android/scripts/beforeBuild.js:9:22:warning(path-join-resolve-traversal):  source = path.join(ctx.opts.projectRoot, 'build-extras.gradle');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/app/res/android/scripts/beforeBuild.js:10:27:warning(path-join-resolve-traversal):  destination = path.join(ctx.opts.projectRoot, 'platforms/android/app/build-extras.gradle');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/app/res/android/scripts/beforeBuild.js:15:24:warning(path-join-resolve-traversal):    source = path.join(ctx.opts.projectRoot, 'gradle.release.properties');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/app/res/android/scripts/beforeBuild.js:17:24:warning(path-join-resolve-traversal):    source = path.join(ctx.opts.projectRoot, 'gradle.dev.properties');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/app/res/android/scripts/beforeBuild.js:19:27:warning(path-join-resolve-traversal):  destination = path.join(ctx.opts.projectRoot, 'platforms/android/app/gradle.properties');:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/app/scripts/create-apk-package.js:33:8:error(detect-child-process):  exec(command, options, (error, stdout, stderr) => {:Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/app/scripts/update-build-number.js:18:44:warning(path-join-resolve-traversal):  const fileName = path.resolve(__dirname, `../build/${platformName}/manifest.json`);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/app/src/modules/android/android-app/android-app.component.ts:225:9:error(insecure-document-method):        txt.innerHTML = sharedBookmark.title ? sharedBookmark.title.trim() : '';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/app/src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html:10:7:warning(var-in-href):      <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html:248:5:warning(var-in-href):    <a href="{{ vm.newServiceInfo.url }}" class="new-tab":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html:10:10:warning(template-href-var):      <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html:248:8:warning(template-href-var):    <a href="{{ vm.newServiceInfo.url }}" class="new-tab":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html:10:10:warning(template-href-var):      <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html:248:8:warning(template-href-var):    <a href="{{ vm.newServiceInfo.url }}" class="new-tab":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-settings/about-settings/about-settings.component.html:8:3:warning(var-in-href):  <a class="new-tab" href="{{ vm.releaseNotesUrl }}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-settings/about-settings/about-settings.component.html:8:22:warning(template-href-var):  <a class="new-tab" href="{{ vm.releaseNotesUrl }}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-settings/about-settings/about-settings.component.html:8:22:warning(template-href-var):  <a class="new-tab" href="{{ vm.releaseNotesUrl }}":Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-settings/sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component.html:4:5:warning(var-in-href):    <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-settings/sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component.html:4:8:warning(template-href-var):    <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/app/app-settings/sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component.html:4:8:warning(template-href-var):    <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">:Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.
/home/codescan/app/src/modules/shared/bookmark/bookmark-helper/bookmark-helper.service.ts:356:54:warning(detect-non-literal-regexp):          const noProtocolUrl = bookmark.url.replace(new RegExp(`^${url.protocol}[/]*`), '');:RegExp() called with a `bookmark` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/app/src/modules/shared/metadata/get-metadata.ts:14:5:error(insecure-document-method):    txt.innerHTML = text.trim();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
