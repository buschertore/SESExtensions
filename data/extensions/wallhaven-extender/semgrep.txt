data/tempCode/wallhaven-extender/lib/simpleLightbox-2.1.0/simpleLightbox.js:52:9:error(insecure-document-method):        div.innerHTML = html.trim();:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/wallhaven-extender/lib/simpleLightbox-2.1.0/simpleLightbox.js:264:21:error(insecure-document-method):                    self.$content.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/wallhaven-extender/lib/simpleLightbox-2.1.0/simpleLightbox.js:43:17:warning(detect-non-literal-regexp):                new RegExp('(\\s|^)' + className + '(\\s|$)'), ' ':RegExp() called with a `className` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/wallhaven-extender/src/content.common.js:46:21:error(insecure-document-method):                    doc.body.innerHTML = request.responseText;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/wallhaven-extender/src/util.js:26:2:warning(insufficient-postmessage-origin-validation):	window.addEventListener("message", function(event) {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
data/tempCode/wallhaven-extender/src/util.js:54:3:warning(wildcard-postmessage-configuration):		window.postMessage(data, "*");:The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
