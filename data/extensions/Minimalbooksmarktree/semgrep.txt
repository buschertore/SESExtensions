/home/codescan/chrome-minimal-bookmarks-tree/src/background/OmniboxSuggester.ts:64:24:warning(detect-non-literal-regexp):    const expression = new RegExp(`(${searchTerm.replace(/([.?*+^$[\]\\(){}|-])/g, '$1')})`, 'gi');:RegExp() called with a `searchTerm` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/chrome-minimal-bookmarks-tree/src/browser_action/dialog/ConfirmDialog.ts:21:5:error(insecure-document-method):    question.innerHTML = this.question;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/chrome-minimal-bookmarks-tree/src/common/Utils.ts:61:9:error(insecure-document-method):        translatableElement.innerHTML = translation;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
