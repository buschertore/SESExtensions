data/tempCode/ctrl-f-plus-ctrl-+-f-sear/__tests__/e2e/helpers.ts:85:28:warning(detect-non-literal-regexp):  const searchQueryRegex = new RegExp(`${query}`, 'gi');:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/ctrl-f-plus-ctrl-+-f-sear/__tests__/e2e/helpers.ts:107:26:warning(detect-non-literal-regexp):  const highlightRegex = new RegExp(:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/ctrl-f-plus-ctrl-+-f-sear/__tests__/e2e/helpers.ts:367:26:warning(detect-non-literal-regexp):  const highlightRegex = new RegExp(:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/ctrl-f-plus-ctrl-+-f-sear/__tests__/e2e/helpers.ts:372:28:warning(detect-non-literal-regexp):  const searchQueryRegex = new RegExp(`${query}`, 'gi');:RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/ctrl-f-plus-ctrl-+-f-sear/src/contentScripts/utils/dom/removeAllHighlightMatches.ts:23:5:error(insecure-document-method):    elem.outerHTML = textContent;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/ctrl-f-plus-ctrl-+-f-sear/src/contentScripts/utils/search/searchAndHighlight.ts:119:21:warning(detect-non-literal-regexp):      const regex = new RegExp(searchValueWithSpaceOrNBSP, 'gi');:RegExp() called with a `searchValue` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
