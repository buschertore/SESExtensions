data/tempCode/screen-shader-smart-scree/src/scripts/background.js:140:9:warning(detect-non-literal-regexp):        new RegExp(:RegExp() called with a `domain` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/background.js:140:9:warning(detect-non-literal-regexp):        new RegExp(:RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/background.js:140:9:warning(detect-non-literal-regexp):        new RegExp(:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/background.js:84:36:error(react-insecure-request):            const response = await fetch('http://www.geoplugin.net/json.gp'):Unencrypted request over HTTP detected.
data/tempCode/screen-shader-smart-scree/src/scripts/content.js:237:21:error(insecure-document-method):                    $style.innerHTML += 'html > body{z-index: 0 !important;position: relative !important;}';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/screen-shader-smart-scree/src/scripts/content.js:241:25:error(insecure-document-method):                        $style.innerHTML += 'html, body{height: 100%;}';:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/screen-shader-smart-scree/src/scripts/content.js:450:29:error(insecure-document-method):                            $scrollbarstyle.innerHTML = `:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/screen-shader-smart-scree/src/scripts/content.js:748:13:warning(detect-non-literal-regexp):            new RegExp(:RegExp() called with a `domain` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/content.js:748:13:warning(detect-non-literal-regexp):            new RegExp(:RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/content.js:748:13:warning(detect-non-literal-regexp):            new RegExp(:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/popup.js:355:5:error(insecure-document-method):    $copyright.innerHTML = 'Made with hard work by Marc Guiselin and a crew of ' + [:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/screen-shader-smart-scree/src/scripts/popup.js:2267:12:warning(detect-non-literal-regexp):    return new RegExp(:RegExp() called with a `domain` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/popup.js:2267:12:warning(detect-non-literal-regexp):    return new RegExp(:RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/popup.js:2267:12:warning(detect-non-literal-regexp):    return new RegExp(:RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
data/tempCode/screen-shader-smart-scree/src/scripts/popup.js:1725:5:error(react-insecure-request):    fetch('http://www.geoplugin.net/json.gp'):Unencrypted request over HTTP detected.
