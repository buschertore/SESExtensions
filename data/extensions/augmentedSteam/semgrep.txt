/home/codescan/AugmentedSteam/config/scripts/make-release.cjs:52:14:error(detect-child-process):    execSync(command, {:Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. 
/home/codescan/AugmentedSteam/src/html/options.html:381:62:warning(plaintext-http-link):                    <li class="credits__item">Jason Shackles <a href="http://steamcommunity.com/profiles/76561198040672342" id="jshackles_steam">jshackles</a></li>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/AugmentedSteam/src/html/options.html:382:54:warning(plaintext-http-link):                    <li class="credits__item">Dan C. <a href="http://steamcommunity.com/profiles/76561198012785113" id="JoiNNN_steam">JoiNNN</a></li>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/AugmentedSteam/src/html/options.html:383:60:warning(plaintext-http-link):                    <li class="credits__item">Ben Williams <a href="http://steamcommunity.com/profiles/76561198000198761" id="smashman_steam">smash.mn</a></li>:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/AugmentedSteam/src/js/Background/Modules/Api.js:61:25:warning(prototype-pollution-loop):                        result = result[part];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
/home/codescan/AugmentedSteam/src/js/Content/Features/Community/GameCard/FCardExtraLinks.js:22:13:warning(raw-html-concat):            html += `<div class="es_gamecards_links">:User controlled data in a HTML string may result in XSS
/home/codescan/AugmentedSteam/src/js/Content/Features/Community/ProfileEdit/FBackgroundSelection.js:116:59:warning(detect-non-literal-regexp):                        const regexes = terms.map(term => new RegExp(StringUtils.escapeRegExp(term), "i"));:RegExp() called with a `term` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/AugmentedSteam/src/js/Content/Features/Page.js:89:13:info(unsafe-formatstring):            `%c Augmented %cSteam v${Info.version} %c ${config.PublicHost}`,:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
/home/codescan/AugmentedSteam/src/js/Content/Modules/Messenger.js:32:9:warning(insufficient-postmessage-origin-validation):        window.addEventListener("message", e => {:No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
/home/codescan/AugmentedSteam/src/js/Core/Html/Html.js:26:9:error(insecure-document-method):        template.innerHTML = DOMPurify.sanitize(html);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/AugmentedSteam/src/js/Core/Html/Html.js:58:13:error(insecure-document-method):            _node.innerHTML = DOMPurify.sanitize(html);:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/AugmentedSteam/src/js/Core/Html/HtmlParser.js:8:25:warning(detect-non-literal-regexp):                regex = new RegExp(`${name}\\s*=\\s*(\\{.+?\\});`);:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/AugmentedSteam/src/js/Core/Html/HtmlParser.js:10:25:warning(detect-non-literal-regexp):                regex = new RegExp(`${name}\\s*=\\s*(\\[.+?\\]);`);:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/AugmentedSteam/src/js/Core/Html/HtmlParser.js:12:25:warning(detect-non-literal-regexp):                regex = new RegExp(`${name}\\s*=\\s*(.+?);`);:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/AugmentedSteam/src/js/Core/Html/HtmlParser.js:14:25:warning(detect-non-literal-regexp):                regex = new RegExp(`${name}\\s*=\\s*['"](.+?)['"];`);:RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/AugmentedSteam/src/js/Core/Localization/Localization.js:70:13:warning(prototype-pollution-loop):            current = current[path.pop()];:Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.
