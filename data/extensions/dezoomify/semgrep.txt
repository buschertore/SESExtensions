data/tempCode/dezoomify/cloudflare/cloudflare-worker-proxy.js:18:21:info(unsafe-formatstring):        console.log("Invalid URL: " + target_url, e);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/dezoomify/cloudflare/worker/script.js:1:1242:info(unsafe-formatstring):!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t){async function r(e){return console.error(e),new Response(e.toString(),{status:500})}addEventListener("fetch",e=>{const t=e.request;console.log(t.url);let n=async function(e){const t=new URL(e.url);let r=t.searchParams.get("url"),n=new Request(r,e);try{n.headers.set("Origin",new URL(r).origin)}catch(e){console.log("Invalid URL: "+r,e)}n.headers.set("Referer",r.toString());const o=t.searchParams.get("cookies");o&&n.headers.set("Cookie",o),console.log(`Making request to ${n.url} with headers ${JSON.stringify(Object.fromEntries(n.headers.entries()))}`);let s=await fetch(n),i=s.headers.get("Location");for(let e=0;e<3&&i;e++)s=await fetch(i,n),i=s.headers.get("Location");i&&(s.headers.set("X-Disabled-Location",i),s.headers.set("Location","")),s=new Response(s.body,s);const a=s.headers.get("Set-Cookie");return a&&s.headers.set("X-Set-Cookie",a),s.headers.delete("Set-Cookie"),s}(t).catch(r);e.respondWith(n)})}]);:Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.
data/tempCode/dezoomify/index.html:16:3:warning(missing-integrity):  <link rel="author" href="https://github.com/lovasoa/">:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/dezoomify/index.html:17:3:warning(missing-integrity):  <link rel="canonical" href="https://dezoomify.ophir.dev/">:This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.
data/tempCode/dezoomify/index.html:63:45:warning(plaintext-http-link):          This script is released under the <a href="http://www.gnu.org/licenses/gpl.html">GPL</a>.:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/dezoomify/index.html:64:11:warning(plaintext-http-link):          <a href="http://github.com/lovasoa/dezoomify">See the source code</a>.:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/dezoomify/index.html:85:11:warning(plaintext-http-link):          <a href="http://www.enable-javascript.com/">:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
data/tempCode/dezoomify/node-app/proxy.js:6:18:warning(using-http-server):var server = new http.Server();:Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.
data/tempCode/dezoomify/proxy.php:37:12:warning(tainted-filename):$f = fopen($url, 'r', false, $context);:File name based on user input risks server-side request forgery.
data/tempCode/dezoomify/proxy.php:2:1:warning(php-permissive-cors):header("Access-Control-Allow-Origin: *");:Access-Control-Allow-Origin response header is set to "*". This will disable CORS Same Origin Policy restrictions.
data/tempCode/dezoomify/zoommanager.js:136:3:error(insecure-document-method):		document.getElementById("percent").innerHTML = text;:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
data/tempCode/dezoomify/zoommanager.js:140:2:error(insecure-document-method):	document.getElementById("percent").innerHTML = text + ' (' + percent + "%)";:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
