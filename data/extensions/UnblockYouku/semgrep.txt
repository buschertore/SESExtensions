/home/codescan/Unblock-Youku/src/content_scripts/unblockcn.js:12:1:error(insecure-document-method):document.body.innerHTML =:User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
/home/codescan/Unblock-Youku/src/popup.html:58:25:warning(plaintext-http-link):                        <a href="http://weibo.com/ubuku" target="_blank">:This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
/home/codescan/Unblock-Youku/tools/_regex_utils.mjs:15:20:warning(detect-non-literal-regexp):    regexList.push(new RegExp('^' + str + '$', 'i'));:RegExp() called with a `urlList` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.
/home/codescan/Unblock-Youku/tools/create_zip.js:75:32:warning(path-join-resolve-traversal):    const filePath = path.join(folder, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
/home/codescan/Unblock-Youku/tools/create_zip.js:75:40:warning(path-join-resolve-traversal):    const filePath = path.join(folder, file);:Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.
